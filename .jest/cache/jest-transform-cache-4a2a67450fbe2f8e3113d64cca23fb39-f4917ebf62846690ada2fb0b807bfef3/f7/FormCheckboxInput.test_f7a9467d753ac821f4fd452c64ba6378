679e45b4a643ae7abf0dbd2475a981e9
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

var core_1 = require("@bluebase/core");

var FormCheckboxInput_1 = require("../FormCheckboxInput");

var formik_1 = require("formik");

var index_1 = tslib_1.__importDefault(require("../../../index"));

var react_1 = tslib_1.__importDefault(require("react"));

var plugin_material_ui_1 = tslib_1.__importDefault(require("@bluebase/plugin-material-ui"));

var enzyme_1 = require("enzyme");

var enzyme_async_helpers_1 = require("enzyme-async-helpers");

var fieldProps = {
  label: 'Auto Login',
  name: 'auto-login',
  type: 'checkbox',
  value: true
};
describe('FormCheckboxInput', function () {
  it('should update checkbox value from onValueChange callback', function _callee() {
    var onSubmit, component, onValueChange;
    return _regenerator.default.async(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            onSubmit = jest.fn();
            component = enzyme_1.mount(react_1.default.createElement(core_1.BlueBaseApp, {
              plugins: [index_1.default, plugin_material_ui_1.default]
            }, react_1.default.createElement(formik_1.Formik, {
              initialValues: {
                'auto-login': false
              },
              onSubmit: onSubmit
            }, react_1.default.createElement(FormCheckboxInput_1.FormCheckboxInput, (0, _extends2.default)({}, fieldProps)))));
            _context.next = 4;
            return _regenerator.default.awrap(enzyme_async_helpers_1.waitForElement(component, FormCheckboxInput_1.FormCheckboxInput));

          case 4:
            expect(component.find('Checkbox').first().prop('name')).toBe('auto-login');
            expect(component.find('Checkbox').first().prop('checked')).toBe(false);
            onValueChange = component.find('Checkbox').first().prop('onValueChange');
            onValueChange(false, false);
            component.update();
            expect(component.find('Checkbox').first().prop('name')).toBe('auto-login');
            expect(component.find('Checkbox').first().prop('checked')).toBe(false);
            expect(component.find('Checkbox').last().prop('value')).toBe(true);

          case 12:
          case "end":
            return _context.stop();
        }
      }
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
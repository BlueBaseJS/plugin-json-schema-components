c88fba07f739fca5207f7865c4f0f23e
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

var core_1 = require("@bluebase/core");

var FormSwitchInput_1 = require("../FormSwitchInput");

var formik_1 = require("formik");

var index_1 = tslib_1.__importDefault(require("../../../index"));

var react_1 = tslib_1.__importDefault(require("react"));

var enzyme_1 = require("enzyme");

var enzyme_async_helpers_1 = require("enzyme-async-helpers");

var fieldProps = [{
  label: 'Autos Login',
  name: 'muzamil',
  type: 'switch',
  value: true,
  checked: true
}, {
  label: 'Auto Login',
  name: 'auto-login',
  type: 'switch',
  value: false,
  checked: false
}];
describe('FormSwitchInput', function () {
  var getIn = jest.mock('formik');
  it('should a switch with value true', function _callee() {
    var onSubmit, component;
    return _regenerator.default.async(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            onSubmit = jest.fn();
            component = enzyme_1.mount(react_1.default.createElement(core_1.BlueBaseApp, {
              plugins: [index_1.default]
            }, react_1.default.createElement(formik_1.Formik, {
              initialValues: {
                'auto-login': true
              },
              onSubmit: onSubmit
            }, react_1.default.createElement(FormSwitchInput_1.FormSwitchInput, (0, _extends2.default)({}, fieldProps[0], {
              getIn: getIn
            })))));
            _context.next = 4;
            return _regenerator.default.awrap(enzyme_async_helpers_1.waitForElement(component, FormSwitchInput_1.FormSwitchInput));

          case 4:
            expect(component.find('Switch').last().prop('name')).toBe('muzamil');
            expect(component.find('Switch').last().prop('checked')).toBe(false);
            expect(component.find('Switch').last().prop('value')).toBe(true);

          case 7:
          case "end":
            return _context.stop();
        }
      }
    });
  });
  it('should a switch with value false', function _callee2() {
    var onSubmit, component;
    return _regenerator.default.async(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            onSubmit = jest.fn();
            component = enzyme_1.mount(react_1.default.createElement(core_1.BlueBaseApp, {
              plugins: [index_1.default]
            }, react_1.default.createElement(formik_1.Formik, {
              initialValues: {
                'auto-login': false
              },
              onSubmit: onSubmit
            }, react_1.default.createElement(FormSwitchInput_1.FormSwitchInput, (0, _extends2.default)({}, fieldProps[1])))));
            _context2.next = 4;
            return _regenerator.default.awrap(enzyme_async_helpers_1.waitForElement(component, FormSwitchInput_1.FormSwitchInput));

          case 4:
            expect(component.find('Switch').last().prop('name')).toBe('auto-login');
            expect(component.find('Switch').last().prop('checked')).toBe(false);
            expect(component.find('Switch').last().prop('value')).toBe(false);

          case 7:
          case "end":
            return _context2.stop();
        }
      }
    });
  });
  it('should update switch value from onValueChange callback', function _callee3() {
    var onSubmit, component, SwitchComponent, onValueChange;
    return _regenerator.default.async(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            onSubmit = jest.fn();
            component = enzyme_1.mount(react_1.default.createElement(core_1.BlueBaseApp, {
              plugins: [index_1.default]
            }, react_1.default.createElement(formik_1.Formik, {
              initialValues: {
                'auto-login': false
              },
              onSubmit: onSubmit
            }, react_1.default.createElement(FormSwitchInput_1.FormSwitchInput, (0, _extends2.default)({}, fieldProps)))));
            _context3.next = 4;
            return _regenerator.default.awrap(enzyme_async_helpers_1.waitForElement(component, FormSwitchInput_1.FormSwitchInput));

          case 4:
            SwitchComponent = component.find('Switch').last();
            expect(SwitchComponent.prop('name')).toBe('auto-login');
            expect(SwitchComponent.prop('checked')).toBe(false);
            onValueChange = SwitchComponent.prop('onValueChange');
            onValueChange(null, true);
            component.update();
            SwitchComponent = component.find('Switch').first();
            expect(SwitchComponent.prop('name')).toBe('auto-login');
            expect(SwitchComponent.prop('checked')).toBe(true);

          case 13:
          case "end":
            return _context3.stop();
        }
      }
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
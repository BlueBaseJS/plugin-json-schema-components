3692551e93a61b3e8d5d6c13fceaab93
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

var core_1 = require("@bluebase/core");

var FormCheckboxInput_1 = require("../FormCheckboxInput");

var formik_1 = require("formik");

var index_1 = tslib_1.__importDefault(require("../../../index"));

var react_1 = tslib_1.__importDefault(require("react"));

var plugin_material_ui_1 = tslib_1.__importDefault(require("@bluebase/plugin-material-ui"));

var enzyme_1 = require("enzyme");

var enzyme_async_helpers_1 = require("enzyme-async-helpers");

var fieldProps = {
  label: 'Auto Login',
  name: 'auto-login',
  type: 'checkbox',
  value: true
};
describe('FormCheckboxInput', function () {
  it('should a checkbox with value true', function _callee() {
    var onSubmit, component;
    return _regenerator.default.async(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            onSubmit = jest.fn();
            component = enzyme_1.mount(react_1.default.createElement(core_1.BlueBaseApp, {
              plugins: [index_1.default, plugin_material_ui_1.default]
            }, react_1.default.createElement(formik_1.Formik, {
              initialValues: {
                'auto-login': true
              },
              onSubmit: onSubmit
            }, react_1.default.createElement(FormCheckboxInput_1.FormCheckboxInput, (0, _extends2.default)({}, fieldProps)))));
            _context.next = 4;
            return _regenerator.default.awrap(enzyme_async_helpers_1.waitForElement(component, FormCheckboxInput_1.FormCheckboxInput));

          case 4:
            expect(component.find('Checkbox').last().prop('name')).toBe('auto-login');
            expect(component.find('Checkbox').last().prop('checked')).toBe(true);

          case 6:
          case "end":
            return _context.stop();
        }
      }
    });
  });
  it('should a checkbox with value false', function _callee2() {
    var onSubmit, component;
    return _regenerator.default.async(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            onSubmit = jest.fn();
            component = enzyme_1.mount(react_1.default.createElement(core_1.BlueBaseApp, {
              plugins: [index_1.default, plugin_material_ui_1.default]
            }, react_1.default.createElement(formik_1.Formik, {
              initialValues: {
                'auto-login': false
              },
              onSubmit: onSubmit
            }, react_1.default.createElement(FormCheckboxInput_1.FormCheckboxInput, (0, _extends2.default)({}, fieldProps)))));
            _context2.next = 4;
            return _regenerator.default.awrap(enzyme_async_helpers_1.waitForElement(component, FormCheckboxInput_1.FormCheckboxInput));

          case 4:
            expect(component.find('Checkbox').last().prop('name')).toBe('auto-login');
            expect(component.find('Checkbox').last().prop('checked')).toBe(false);

          case 6:
          case "end":
            return _context2.stop();
        }
      }
    });
  });
  it('should a get value i.e true', function _callee3() {
    var onSubmit, component;
    return _regenerator.default.async(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            onSubmit = jest.fn();
            component = enzyme_1.mount(react_1.default.createElement(core_1.BlueBaseApp, {
              plugins: [index_1.default, plugin_material_ui_1.default]
            }, react_1.default.createElement(formik_1.Formik, {
              initialValues: {
                'auto-login': false
              },
              onSubmit: onSubmit
            }, react_1.default.createElement(FormCheckboxInput_1.FormCheckboxInput, (0, _extends2.default)({}, fieldProps)))));
            _context3.next = 4;
            return _regenerator.default.awrap(enzyme_async_helpers_1.waitForElement(component, FormCheckboxInput_1.FormCheckboxInput));

          case 4:
            expect(component.find('Checkbox').last().prop('name')).toBe('auto-login');
            expect(component.find('Checkbox').last().prop('value')).toBe(true);

          case 6:
          case "end":
            return _context3.stop();
        }
      }
    });
  });
  it('should a get value i.e false', function _callee4() {
    var onSubmit, component;
    return _regenerator.default.async(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            onSubmit = jest.fn();
            component = enzyme_1.mount(react_1.default.createElement(core_1.BlueBaseApp, {
              plugins: [index_1.default, plugin_material_ui_1.default]
            }, react_1.default.createElement(formik_1.Formik, {
              initialValues: {
                'auto-login': false
              },
              onSubmit: onSubmit
            }, react_1.default.createElement(FormCheckboxInput_1.FormCheckboxInput, (0, _extends2.default)({}, fieldProps, {
              value: false
            })))));
            _context4.next = 4;
            return _regenerator.default.awrap(enzyme_async_helpers_1.waitForElement(component, FormCheckboxInput_1.FormCheckboxInput));

          case 4:
            expect(component.find('Checkbox').last().prop('name')).toBe('auto-login');
            expect(component.find('Checkbox').last().prop('value')).toBe(false);

          case 6:
          case "end":
            return _context4.stop();
        }
      }
    });
  });
  it('should update checkbox value from onValueChange callback', function _callee5() {
    var onSubmit, component, onValueChange;
    return _regenerator.default.async(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            onSubmit = jest.fn();
            component = enzyme_1.mount(react_1.default.createElement(core_1.BlueBaseApp, {
              plugins: [index_1.default, plugin_material_ui_1.default]
            }, react_1.default.createElement(formik_1.Formik, {
              initialValues: {
                'auto-login': false
              },
              onSubmit: onSubmit
            }, react_1.default.createElement(FormCheckboxInput_1.FormCheckboxInput, (0, _extends2.default)({}, fieldProps)))));
            _context5.next = 4;
            return _regenerator.default.awrap(enzyme_async_helpers_1.waitForElement(component, FormCheckboxInput_1.FormCheckboxInput));

          case 4:
            expect(component.find('Checkbox').first().prop('name')).toBe('auto-login');
            expect(component.find('Checkbox').first().prop('checked')).toBe(false);
            onValueChange = component.find('Checkbox').first().prop('onValueChange');
            onValueChange(true, true);
            component.update();
            expect(component.find('Checkbox').first().prop('name')).toBe('auto-login');
            expect(component.find('Checkbox').first().prop('checked')).toBe(true);
            expect(component.find('Checkbox').last().prop('value')).toBe(true);

          case 12:
          case "end":
            return _context5.stop();
        }
      }
    });
  });
  it('should update checkbox value from onValueChange callback with null', function _callee6() {
    var onSubmit, component, onValueChange;
    return _regenerator.default.async(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            onSubmit = jest.fn();
            component = enzyme_1.mount(react_1.default.createElement(core_1.BlueBaseApp, {
              plugins: [index_1.default, plugin_material_ui_1.default]
            }, react_1.default.createElement(formik_1.Formik, {
              initialValues: {
                'auto-login': false
              },
              onSubmit: onSubmit
            }, react_1.default.createElement(FormCheckboxInput_1.FormCheckboxInput, (0, _extends2.default)({}, fieldProps)))));
            _context6.next = 4;
            return _regenerator.default.awrap(enzyme_async_helpers_1.waitForElement(component, FormCheckboxInput_1.FormCheckboxInput));

          case 4:
            expect(component.find('Checkbox').first().prop('name')).toBe('auto-login');
            expect(component.find('Checkbox').first().prop('checked')).toBe(false);
            onValueChange = component.find('Checkbox').first().prop('onValueChange');
            onValueChange(false, false);
            component.update();
            expect(component.find('Checkbox').first().prop('name')).toBe('auto-login');
            expect(component.find('Checkbox').first().prop('checked')).toBe(false);
            expect(component.find('Checkbox').last().prop('value')).toBe(null);

          case 12:
          case "end":
            return _context6.stop();
        }
      }
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
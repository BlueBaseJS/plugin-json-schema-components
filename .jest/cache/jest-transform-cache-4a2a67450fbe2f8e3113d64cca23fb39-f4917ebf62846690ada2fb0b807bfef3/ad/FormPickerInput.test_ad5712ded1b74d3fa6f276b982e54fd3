b4a54aec60454efdc7d27e1c2df9047d
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

var core_1 = require("@bluebase/core");

var FormPickerInput_1 = require("../FormPickerInput");

var formik_1 = require("formik");

var index_1 = tslib_1.__importDefault(require("../../../index"));

var react_1 = tslib_1.__importDefault(require("react"));

var enzyme_1 = require("enzyme");

var enzyme_async_helpers_1 = require("enzyme-async-helpers");

var fieldProps = {
  label: 'Language',
  name: 'lang',
  type: 'picker',
  items: [{
    label: 'JavaScript',
    value: 'js'
  }, {
    label: 'Java',
    value: 'java'
  }]
};
var initialValues = {
  'lang': 'js'
};
describe('FormPickerInput', function () {
  it('should render a picker with value "js"', function _callee() {
    var onSubmit, component;
    return _regenerator.default.async(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            onSubmit = jest.fn();
            component = enzyme_1.mount(react_1.default.createElement(core_1.BlueBaseApp, {
              plugins: [index_1.default]
            }, react_1.default.createElement(formik_1.Formik, {
              initialValues: initialValues,
              onSubmit: onSubmit
            }, react_1.default.createElement(FormPickerInput_1.FormPickerInput, (0, _extends2.default)({}, fieldProps)))));
            _context.next = 4;
            return _regenerator.default.awrap(enzyme_async_helpers_1.waitForElement(component, FormPickerInput_1.FormPickerInput));

          case 4:
            expect(component.find('Picker').last().prop('name')).toBe('lang');
            expect(component.find('Picker').last().prop('value')).toBe('js');

          case 6:
          case "end":
            return _context.stop();
        }
      }
    });
  });
  it('should update picker value from onValueChange callback', function _callee2() {
    var onSubmit, component, PickerComponent, onValueChange;
    return _regenerator.default.async(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            onSubmit = jest.fn();
            component = enzyme_1.mount(react_1.default.createElement(core_1.BlueBaseApp, {
              plugins: [index_1.default]
            }, react_1.default.createElement(formik_1.Formik, {
              initialValues: initialValues,
              onSubmit: onSubmit
            }, react_1.default.createElement(FormPickerInput_1.FormPickerInput, (0, _extends2.default)({}, fieldProps)))));
            _context2.next = 4;
            return _regenerator.default.awrap(enzyme_async_helpers_1.waitForElement(component, FormPickerInput_1.FormPickerInput));

          case 4:
            PickerComponent = component.find('Picker').last();
            expect(PickerComponent.prop('name')).toBe('lang');
            expect(PickerComponent.prop('value')).toBe('js');
            onValueChange = PickerComponent.prop('onValueChange');
            onValueChange('java');
            component.update();
            PickerComponent = component.find('Picker').first();
            expect(PickerComponent.prop('name')).toBe('lang');
            expect(PickerComponent.prop('value')).toBe('java');

          case 13:
          case "end":
            return _context2.stop();
        }
      }
    });
  });
  it('should update picker value from onValueChange callback with prop', function _callee3() {
    var onSubmit, component, PickerComponent, onValueChange;
    return _regenerator.default.async(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            onSubmit = jest.fn();
            component = enzyme_1.mount(react_1.default.createElement(core_1.BlueBaseApp, {
              plugins: [index_1.default]
            }, react_1.default.createElement(formik_1.Formik, {
              initialValues: initialValues,
              onSubmit: onSubmit
            }, react_1.default.createElement(FormPickerInput_1.FormPickerInput, (0, _extends2.default)({
              onValueChange: function onValueChange() {
                return null;
              }
            }, fieldProps)))));
            _context3.next = 4;
            return _regenerator.default.awrap(enzyme_async_helpers_1.waitForElement(component, FormPickerInput_1.FormPickerInput));

          case 4:
            PickerComponent = component.find('Picker').last();
            expect(PickerComponent.prop('name')).toBe('lang');
            expect(PickerComponent.prop('value')).toBe('js');
            onValueChange = PickerComponent.prop('onValueChange');
            onValueChange(null);
            component.update();
            PickerComponent = component.find('Picker').first();
            expect(PickerComponent.prop('name')).toBe('lang');
            expect(PickerComponent.prop('value')).toBe(null);

          case 13:
          case "end":
            return _context3.stop();
        }
      }
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
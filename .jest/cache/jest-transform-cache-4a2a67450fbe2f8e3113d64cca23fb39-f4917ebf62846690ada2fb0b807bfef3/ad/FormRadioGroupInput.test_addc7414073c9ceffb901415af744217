b2c2d3539eba90bc170a1c26b1850de1
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

var core_1 = require("@bluebase/core");

var FormRadioGroupInput_1 = require("../FormRadioGroupInput");

var formik_1 = require("formik");

var plugin_material_ui_1 = tslib_1.__importDefault(require("@bluebase/plugin-material-ui"));

var index_1 = tslib_1.__importDefault(require("../../../index"));

var react_1 = tslib_1.__importDefault(require("react"));

var enzyme_1 = require("enzyme");

var enzyme_async_helpers_1 = require("enzyme-async-helpers");

var fieldProps = {
  label: 'Language',
  name: 'lang',
  type: 'radio-group',
  items: [{
    label: 'JavaScript',
    value: 'js'
  }, {
    label: 'Java',
    value: 'java'
  }]
};
var initialValues = {
  'lang': 'js'
};
describe('FormRadioGroupInput', function () {
  it('should render a radio-group with value "js"', function _callee() {
    var onSubmit, component;
    return _regenerator.default.async(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            onSubmit = jest.fn();
            component = enzyme_1.mount(react_1.default.createElement(core_1.BlueBaseApp, {
              plugins: [index_1.default, plugin_material_ui_1.default]
            }, react_1.default.createElement(formik_1.Formik, {
              initialValues: initialValues,
              onSubmit: onSubmit
            }, react_1.default.createElement(FormRadioGroupInput_1.FormRadioGroupInput, (0, _extends2.default)({}, fieldProps)))));
            _context.next = 4;
            return _regenerator.default.awrap(enzyme_async_helpers_1.waitForElement(component, FormRadioGroupInput_1.FormRadioGroupInput));

          case 4:
            expect(component.find('RadioGroup').last().prop('name')).toBe('lang');
            expect(component.find('RadioGroup').last().prop('value')).toBe('js');

          case 6:
          case "end":
            return _context.stop();
        }
      }
    });
  });
  it('should update radio-group value from onValueChange callback', function _callee2() {
    var onSubmit, component, onValueChange;
    return _regenerator.default.async(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            onSubmit = jest.fn();
            component = enzyme_1.mount(react_1.default.createElement(core_1.BlueBaseApp, {
              plugins: [index_1.default, plugin_material_ui_1.default]
            }, react_1.default.createElement(formik_1.Formik, {
              initialValues: initialValues,
              onSubmit: onSubmit
            }, react_1.default.createElement(FormRadioGroupInput_1.FormRadioGroupInput, (0, _extends2.default)({}, fieldProps)))));
            _context2.next = 4;
            return _regenerator.default.awrap(enzyme_async_helpers_1.waitForElement(component, FormRadioGroupInput_1.FormRadioGroupInput));

          case 4:
            expect(component.find('RadioGroup').first().prop('name')).toBe('lang');
            expect(component.find('RadioGroup').first().prop('value')).toBe('js');
            onValueChange = component.find('RadioGroup').first().prop('onValueChange');
            onValueChange('java');
            component.update();
            expect(component.find('RadioGroup').first().prop('name')).toBe('lang');
            expect(component.find('RadioGroup').first().prop('value')).toBe('java');

          case 11:
          case "end":
            return _context2.stop();
        }
      }
    });
  });
  it('should update radio-group value from onValueChange callback as prop', function _callee3() {
    var onSubmit, component, onValueChange;
    return _regenerator.default.async(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            onSubmit = jest.fn();
            component = enzyme_1.mount(react_1.default.createElement(core_1.BlueBaseApp, {
              plugins: [index_1.default, plugin_material_ui_1.default]
            }, react_1.default.createElement(formik_1.Formik, {
              initialValues: initialValues,
              onSubmit: onSubmit
            }, react_1.default.createElement(FormRadioGroupInput_1.FormRadioGroupInput, (0, _extends2.default)({
              onValueChange: function onValueChange() {
                return null;
              }
            }, fieldProps)))));
            _context3.next = 4;
            return _regenerator.default.awrap(enzyme_async_helpers_1.waitForElement(component, FormRadioGroupInput_1.FormRadioGroupInput));

          case 4:
            expect(component.find('RadioGroup').first().prop('name')).toBe('lang');
            expect(component.find('RadioGroup').first().prop('value')).toBe('js');
            onValueChange = component.find('RadioGroup').first().prop('onValueChange');
            onValueChange(null);
            component.update();
            expect(component.find('RadioGroup').first().prop('name')).toBe('lang');
            expect(component.find('RadioGroup').first().prop('value')).toBe(null);

          case 11:
          case "end":
            return _context3.stop();
        }
      }
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
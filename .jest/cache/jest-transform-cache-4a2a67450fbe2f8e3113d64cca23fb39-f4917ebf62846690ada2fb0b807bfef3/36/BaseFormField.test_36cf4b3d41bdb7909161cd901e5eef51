c009d2a72806934b1ff04e223641e8b9
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

var components_1 = require("@bluebase/components");

var core_1 = require("@bluebase/core");

var index_1 = tslib_1.__importDefault(require("../../index"));

var react_1 = tslib_1.__importDefault(require("react"));

var enzyme_1 = require("enzyme");

var enzyme_async_helpers_1 = require("enzyme-async-helpers");

describe('BaseFormField', function () {
  it('should render all elements', function _callee() {
    var BaseFormField, component;
    return _regenerator.default.async(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            BaseFormField = components_1.getComponent('BaseFormField');
            component = enzyme_1.mount(react_1.default.createElement(core_1.BlueBaseApp, {
              plugins: [index_1.default]
            }, react_1.default.createElement(BaseFormField, {
              left: react_1.default.createElement(components_1.Text, null, "Temp"),
              right: react_1.default.createElement(components_1.Text, null, "26"),
              MainComponent: components_1.Slider,
              label: "Username",
              value: 100
            })));
            _context.next = 4;
            return _regenerator.default.awrap(enzyme_async_helpers_1.waitForElement(component, BaseFormField));

          case 4:
            expect(component.find('[testID="base-form-field"]').last().children()).toHaveLength(3);
            expect(component.find('[testID="base-form-field-left"] Text').last().text()).toBe('Temp');
            expect(component.find('[testID="base-form-field-main"]').last().children()).toHaveLength(1);
            expect(component.find('[testID="base-form-field-right"] Text').last().text()).toBe('26');

          case 8:
          case "end":
            return _context.stop();
        }
      }
    });
  });
  it('should not render any elements', function _callee2() {
    var BaseFormField, component;
    return _regenerator.default.async(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            BaseFormField = components_1.getComponent('BaseFormField');
            component = enzyme_1.mount(react_1.default.createElement(core_1.BlueBaseApp, {
              plugins: [index_1.default]
            }, react_1.default.createElement(BaseFormField, null)));
            _context2.next = 4;
            return _regenerator.default.awrap(enzyme_async_helpers_1.waitForElement(component, BaseFormField));

          case 4:
            expect(component.find('[testID="base-form-field"]').last().children()).toHaveLength(0);
            expect(component.find('[testID="base-form-field-left"]')).toHaveLength(0);
            expect(component.find('[testID="base-form-field-main"]')).toHaveLength(0);
            expect(component.find('[testID="base-form-field-right"]')).toHaveLength(0);

          case 8:
          case "end":
            return _context2.stop();
        }
      }
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL211enphbWlsL0RvY3VtZW50cy9ibHVlYmFzZS9wbHVnaW4tanNvbi1zY2hlbWEtY29tcG9uZW50cy9zcmMvSnNvbkZvcm0vX190ZXN0c19fL0Jhc2VGb3JtRmllbGQudGVzdC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUEsSUFBQSxZQUFBLEdBQUEsT0FBQSxDQUFBLHNCQUFBLENBQUE7O0FBRUEsSUFBQSxNQUFBLEdBQUEsT0FBQSxDQUFBLGdCQUFBLENBQUE7O0FBQ0EsSUFBQSxPQUFBLEdBQUEsT0FBQSxDQUFBLGVBQUEsQ0FBQSxPQUFBLENBQUEsYUFBQSxDQUFBLENBQUE7O0FBQ0EsSUFBQSxPQUFBLEdBQUEsT0FBQSxDQUFBLGVBQUEsQ0FBQSxPQUFBLENBQUEsT0FBQSxDQUFBLENBQUE7O0FBQ0EsSUFBQSxRQUFBLEdBQUEsT0FBQSxDQUFBLFFBQUEsQ0FBQTs7QUFDQSxJQUFBLHNCQUFBLEdBQUEsT0FBQSxDQUFBLHNCQUFBLENBQUE7O0FBRUEsUUFBUSxDQUFDLGVBQUQsRUFBa0IsWUFBSztBQUc5QixFQUFBLEVBQUUsQ0FBQyw0QkFBRCxFQUErQjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFFMUIsWUFBQSxhQUYwQixHQUVWLFlBQUEsQ0FBQSxZQUFBLENBQWlDLGVBQWpDLENBRlU7QUFHMUIsWUFBQSxTQUgwQixHQUdkLFFBQUEsQ0FBQSxLQUFBLENBQ2pCLE9BQUEsQ0FBQSxPQUFBLENBQUEsYUFBQSxDQUFDLE1BQUEsQ0FBQSxXQUFELEVBQVk7QUFBQyxjQUFBLE9BQU8sRUFBRSxDQUFDLE9BQUEsQ0FBQSxPQUFEO0FBQVYsYUFBWixFQUNDLE9BQUEsQ0FBQSxPQUFBLENBQUEsYUFBQSxDQUFDLGFBQUQsRUFBYztBQUNiLGNBQUEsSUFBSSxFQUFFLE9BQUEsQ0FBQSxPQUFBLENBQUEsYUFBQSxDQUFDLFlBQUEsQ0FBQSxJQUFELEVBQUssSUFBTCxFQUFLLE1BQUwsQ0FETztBQUViLGNBQUEsS0FBSyxFQUFFLE9BQUEsQ0FBQSxPQUFBLENBQUEsYUFBQSxDQUFDLFlBQUEsQ0FBQSxJQUFELEVBQUssSUFBTCxFQUFLLElBQUwsQ0FGTTtBQUdiLGNBQUEsYUFBYSxFQUFFLFlBQUEsQ0FBQSxNQUhGO0FBSWIsY0FBQSxLQUFLLEVBQUMsVUFKTztBQUtiLGNBQUEsS0FBSyxFQUFFO0FBTE0sYUFBZCxDQURELENBRGlCLENBSGM7QUFBQTtBQUFBLDhDQWUxQixzQkFBQSxDQUFBLGNBQUEsQ0FBZSxTQUFmLEVBQWlDLGFBQWpDLENBZjBCOztBQUFBO0FBbUJoQyxZQUFBLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBVixDQUFlLDRCQUFmLEVBQTZDLElBQTdDLEdBQW9ELFFBQXBELEVBQUQsQ0FBTixDQUF1RSxZQUF2RSxDQUFvRixDQUFwRjtBQUNBLFlBQUEsTUFBTSxDQUFDLFNBQVMsQ0FBQyxJQUFWLENBQWUsc0NBQWYsRUFBdUQsSUFBdkQsR0FBOEQsSUFBOUQsRUFBRCxDQUFOLENBQTZFLElBQTdFLENBQWtGLE1BQWxGO0FBQ0EsWUFBQSxNQUFNLENBQUMsU0FBUyxDQUFDLElBQVYsQ0FBZSxpQ0FBZixFQUFrRCxJQUFsRCxHQUF5RCxRQUF6RCxFQUFELENBQU4sQ0FBNEUsWUFBNUUsQ0FBeUYsQ0FBekY7QUFDQSxZQUFBLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBVixDQUFlLHVDQUFmLEVBQXdELElBQXhELEdBQStELElBQS9ELEVBQUQsQ0FBTixDQUE4RSxJQUE5RSxDQUFtRixJQUFuRjs7QUF0QmdDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEdBQS9CLENBQUY7QUEyQkEsRUFBQSxFQUFFLENBQUMsZ0NBQUQsRUFBbUM7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBRTlCLFlBQUEsYUFGOEIsR0FFZCxZQUFBLENBQUEsWUFBQSxDQUFpQyxlQUFqQyxDQUZjO0FBRzlCLFlBQUEsU0FIOEIsR0FHbEIsUUFBQSxDQUFBLEtBQUEsQ0FDakIsT0FBQSxDQUFBLE9BQUEsQ0FBQSxhQUFBLENBQUMsTUFBQSxDQUFBLFdBQUQsRUFBWTtBQUFDLGNBQUEsT0FBTyxFQUFFLENBQUMsT0FBQSxDQUFBLE9BQUQ7QUFBVixhQUFaLEVBQ0MsT0FBQSxDQUFBLE9BQUEsQ0FBQSxhQUFBLENBQUMsYUFBRCxFQUFjLElBQWQsQ0FERCxDQURpQixDQUhrQjtBQUFBO0FBQUEsOENBUzlCLHNCQUFBLENBQUEsY0FBQSxDQUFlLFNBQWYsRUFBaUMsYUFBakMsQ0FUOEI7O0FBQUE7QUFhcEMsWUFBQSxNQUFNLENBQUMsU0FBUyxDQUFDLElBQVYsQ0FBZSw0QkFBZixFQUE2QyxJQUE3QyxHQUFvRCxRQUFwRCxFQUFELENBQU4sQ0FBdUUsWUFBdkUsQ0FBb0YsQ0FBcEY7QUFDQSxZQUFBLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBVixDQUFlLGlDQUFmLENBQUQsQ0FBTixDQUEwRCxZQUExRCxDQUF1RSxDQUF2RTtBQUNBLFlBQUEsTUFBTSxDQUFDLFNBQVMsQ0FBQyxJQUFWLENBQWUsaUNBQWYsQ0FBRCxDQUFOLENBQTBELFlBQTFELENBQXVFLENBQXZFO0FBQ0EsWUFBQSxNQUFNLENBQUMsU0FBUyxDQUFDLElBQVYsQ0FBZSxrQ0FBZixDQUFELENBQU4sQ0FBMkQsWUFBM0QsQ0FBd0UsQ0FBeEU7O0FBaEJvQztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxHQUFuQyxDQUFGO0FBb0JBLENBbERPLENBQVIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTbGlkZXIsIFRleHQsIGdldENvbXBvbmVudCB9IGZyb20gJ0BibHVlYmFzZS9jb21wb25lbnRzJztcbmltcG9ydCB7IEJhc2VGb3JtRmllbGRQcm9wcyB9IGZyb20gJy4uJztcbmltcG9ydCB7IEJsdWVCYXNlQXBwIH0gZnJvbSAnQGJsdWViYXNlL2NvcmUnO1xuaW1wb3J0IFBsdWdpbiBmcm9tICcuLi8uLi9pbmRleCc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgbW91bnQgfSBmcm9tICdlbnp5bWUnO1xuaW1wb3J0IHsgd2FpdEZvckVsZW1lbnQgfSBmcm9tICdlbnp5bWUtYXN5bmMtaGVscGVycyc7XG5cbmRlc2NyaWJlKCdCYXNlRm9ybUZpZWxkJywgKCkgPT4ge1xuXG5cblx0aXQoJ3Nob3VsZCByZW5kZXIgYWxsIGVsZW1lbnRzJywgYXN5bmMgKCkgPT4ge1xuXG5cdFx0Y29uc3QgQmFzZUZvcm1GaWVsZCA9IGdldENvbXBvbmVudDxCYXNlRm9ybUZpZWxkUHJvcHM+KCdCYXNlRm9ybUZpZWxkJyk7XG5cdFx0Y29uc3QgY29tcG9uZW50ID0gbW91bnQoXG5cdFx0XHQ8Qmx1ZUJhc2VBcHAgcGx1Z2lucz17W1BsdWdpbl19PlxuXHRcdFx0XHQ8QmFzZUZvcm1GaWVsZFxuXHRcdFx0XHRcdGxlZnQ9ezxUZXh0PlRlbXA8L1RleHQ+fVxuXHRcdFx0XHRcdHJpZ2h0PXs8VGV4dD4yNjwvVGV4dD59XG5cdFx0XHRcdFx0TWFpbkNvbXBvbmVudD17U2xpZGVyfVxuXHRcdFx0XHRcdGxhYmVsPVwiVXNlcm5hbWVcIlxuXHRcdFx0XHRcdHZhbHVlPXsxMDB9XG5cdFx0XHRcdC8+XG5cdFx0XHQ8L0JsdWVCYXNlQXBwPlxuXHRcdCk7XG5cblx0XHRhd2FpdCB3YWl0Rm9yRWxlbWVudChjb21wb25lbnQgYXMgYW55LCBCYXNlRm9ybUZpZWxkKTtcblxuXHRcdC8vIGV4cGVjdChjb21wb25lbnQpLnRvTWF0Y2hTbmFwc2hvdCgpO1xuXG5cdFx0ZXhwZWN0KGNvbXBvbmVudC5maW5kKCdbdGVzdElEPVwiYmFzZS1mb3JtLWZpZWxkXCJdJykubGFzdCgpLmNoaWxkcmVuKCkpLnRvSGF2ZUxlbmd0aCgzKTtcblx0XHRleHBlY3QoY29tcG9uZW50LmZpbmQoJ1t0ZXN0SUQ9XCJiYXNlLWZvcm0tZmllbGQtbGVmdFwiXSBUZXh0JykubGFzdCgpLnRleHQoKSkudG9CZSgnVGVtcCcpO1xuXHRcdGV4cGVjdChjb21wb25lbnQuZmluZCgnW3Rlc3RJRD1cImJhc2UtZm9ybS1maWVsZC1tYWluXCJdJykubGFzdCgpLmNoaWxkcmVuKCkpLnRvSGF2ZUxlbmd0aCgxKTtcblx0XHRleHBlY3QoY29tcG9uZW50LmZpbmQoJ1t0ZXN0SUQ9XCJiYXNlLWZvcm0tZmllbGQtcmlnaHRcIl0gVGV4dCcpLmxhc3QoKS50ZXh0KCkpLnRvQmUoJzI2Jyk7XG5cblx0fSk7XG5cblxuXHRpdCgnc2hvdWxkIG5vdCByZW5kZXIgYW55IGVsZW1lbnRzJywgYXN5bmMgKCkgPT4ge1xuXG5cdFx0Y29uc3QgQmFzZUZvcm1GaWVsZCA9IGdldENvbXBvbmVudDxCYXNlRm9ybUZpZWxkUHJvcHM+KCdCYXNlRm9ybUZpZWxkJyk7XG5cdFx0Y29uc3QgY29tcG9uZW50ID0gbW91bnQoXG5cdFx0XHQ8Qmx1ZUJhc2VBcHAgcGx1Z2lucz17W1BsdWdpbl19PlxuXHRcdFx0XHQ8QmFzZUZvcm1GaWVsZCAvPlxuXHRcdFx0PC9CbHVlQmFzZUFwcD5cblx0XHQpO1xuXG5cdFx0YXdhaXQgd2FpdEZvckVsZW1lbnQoY29tcG9uZW50IGFzIGFueSwgQmFzZUZvcm1GaWVsZCk7XG5cblx0XHQvLyBleHBlY3QoY29tcG9uZW50KS50b01hdGNoU25hcHNob3QoKTtcblxuXHRcdGV4cGVjdChjb21wb25lbnQuZmluZCgnW3Rlc3RJRD1cImJhc2UtZm9ybS1maWVsZFwiXScpLmxhc3QoKS5jaGlsZHJlbigpKS50b0hhdmVMZW5ndGgoMCk7XG5cdFx0ZXhwZWN0KGNvbXBvbmVudC5maW5kKCdbdGVzdElEPVwiYmFzZS1mb3JtLWZpZWxkLWxlZnRcIl0nKSkudG9IYXZlTGVuZ3RoKDApO1xuXHRcdGV4cGVjdChjb21wb25lbnQuZmluZCgnW3Rlc3RJRD1cImJhc2UtZm9ybS1maWVsZC1tYWluXCJdJykpLnRvSGF2ZUxlbmd0aCgwKTtcblx0XHRleHBlY3QoY29tcG9uZW50LmZpbmQoJ1t0ZXN0SUQ9XCJiYXNlLWZvcm0tZmllbGQtcmlnaHRcIl0nKSkudG9IYXZlTGVuZ3RoKDApO1xuXG5cdH0pO1xuXG59KTtcbiJdfQ==
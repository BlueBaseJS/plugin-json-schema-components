660962020f64bb8d358932a249fadd33
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

var components_1 = require("@bluebase/components");

var formik_1 = require("formik");

var react_1 = tslib_1.__importDefault(require("react"));

var BaseFormField = components_1.getComponent('BaseFormField');

exports.FormPickerInput = function (_a) {
  var type = _a.type,
      items = _a.items,
      props = tslib_1.__rest(_a, ["type", "items"]);

  return react_1.default.createElement(formik_1.Field, (0, _extends2.default)({}, props), function (_ref) {
    var field = _ref.field,
        form = _ref.form;
    var inputProps = (0, _extends2.default)({}, props, field, {
      onValueChange: function onValueChange(v) {
        return form.setFieldValue(field.name, v);
      },
      selectedValue: field.value
    });
    return react_1.default.createElement(BaseFormField, (0, _extends2.default)({
      MainComponent: components_1.Picker
    }, inputProps), items.map(function (i) {
      return react_1.default.createElement(components_1.Picker.Item, (0, _extends2.default)({
        key: String(i.value)
      }, i));
    }));
  });
};

exports.FormPickerInput.defaultProps = {};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL211enphbWlsL0RvY3VtZW50cy9ibHVlYmFzZS9wbHVnaW4tanNvbi1zY2hlbWEtY29tcG9uZW50cy9zcmMvSnNvbkZvcm0vRmllbGRzL0Zvcm1QaWNrZXJJbnB1dC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUEsSUFBQSxZQUFBLEdBQUEsT0FBQSxDQUFBLHNCQUFBLENBQUE7O0FBRUEsSUFBQSxRQUFBLEdBQUEsT0FBQSxDQUFBLFFBQUEsQ0FBQTs7QUFDQSxJQUFBLE9BQUEsR0FBQSxPQUFBLENBQUEsZUFBQSxDQUFBLE9BQUEsQ0FBQSxPQUFBLENBQUEsQ0FBQTs7QUFRQSxJQUFNLGFBQWEsR0FBRyxZQUFBLENBQUEsWUFBQSxDQUFpQyxlQUFqQyxDQUF0Qjs7QUFFYSxPQUFBLENBQUEsZUFBQSxHQUFrQixVQUFDLEVBQUQsRUFBb0Q7QUFBQSxNQUFqRCxJQUFpRCxHQUF0QyxFQUFzQyxDQUFqRCxJQUFpRDtBQUFBLE1BQTNDLEtBQTJDLEdBQXRDLEVBQXNDLENBQTNDLEtBQTJDO0FBQUEsTUFBcEMsS0FBb0MsR0FBcEMsT0FBQSxDQUFBLE1BQUEsQ0FBQSxFQUFBLEVBQUEsQ0FBQSxNQUFBLEVBQUEsT0FBQSxDQUFBLENBQW9DOztBQUVsRixTQUNDLE9BQUEsQ0FBQSxPQUFBLENBQUEsYUFBQSxDQUFDLFFBQUEsQ0FBQSxLQUFELEVBQU0sdUJBQUEsRUFBQSxFQUFLLEtBQUwsQ0FBTixFQUNDLGdCQUF5QjtBQUFBLFFBQXRCLEtBQXNCLFFBQXRCLEtBQXNCO0FBQUEsUUFBZixJQUFlLFFBQWYsSUFBZTtBQUV6QixRQUFNLFVBQVUsR0FBQSx1QkFBQSxFQUFBLEVBQ1osS0FEWSxFQUVaLEtBRlksRUFFUDtBQUNSLE1BQUEsYUFBYSxFQUFFLHVCQUFDLENBQUQ7QUFBQSxlQUFZLElBQUksQ0FBQyxhQUFMLENBQW1CLEtBQUssQ0FBQyxJQUF6QixFQUErQixDQUEvQixDQUFaO0FBQUEsT0FEUDtBQUVSLE1BQUEsYUFBYSxFQUFFLEtBQUssQ0FBQztBQUZiLEtBRk8sQ0FBaEI7QUFPQSxXQUNDLE9BQUEsQ0FBQSxPQUFBLENBQUEsYUFBQSxDQUFDLGFBQUQsRUFBYyx1QkFBQTtBQUFDLE1BQUEsYUFBYSxFQUFFLFlBQUEsQ0FBQTtBQUFoQixLQUFBLEVBQTRCLFVBQTVCLENBQWQsRUFDQyxLQUFLLENBQUMsR0FBTixDQUFVLFVBQUEsQ0FBQztBQUFBLGFBQUksT0FBQSxDQUFBLE9BQUEsQ0FBQSxhQUFBLENBQUMsWUFBQSxDQUFBLE1BQUEsQ0FBTyxJQUFSLEVBQVksdUJBQUE7QUFBQyxRQUFBLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUg7QUFBWixPQUFBLEVBQTJCLENBQTNCLENBQVosQ0FBSjtBQUFBLEtBQVgsQ0FERCxDQUREO0FBS0EsR0FmRCxDQUREO0FBbUJBLENBckJZOztBQXVCYixPQUFBLENBQUEsZUFBQSxDQUFnQixZQUFoQixHQUErQixFQUEvQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpY2tlciwgUGlja2VySXRlbVByb3BzLCBQaWNrZXJQcm9wcywgZ2V0Q29tcG9uZW50IH0gZnJvbSAnQGJsdWViYXNlL2NvbXBvbmVudHMnO1xuaW1wb3J0IHsgQmFzZUZvcm1GaWVsZFByb3BzIH0gZnJvbSAnLi4vQmFzZUZvcm1GaWVsZCc7XG5pbXBvcnQgeyBGaWVsZCB9IGZyb20gJ2Zvcm1payc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEZvcm1QaWNrZXJJbnB1dFByb3BzIGV4dGVuZHMgUGlja2VyUHJvcHMge1xuXHR0eXBlOiAncGlja2VyJyxcblx0bmFtZTogc3RyaW5nLFxuXHRpdGVtczogUGlja2VySXRlbVByb3BzW10sXG59XG5cbmNvbnN0IEJhc2VGb3JtRmllbGQgPSBnZXRDb21wb25lbnQ8QmFzZUZvcm1GaWVsZFByb3BzPignQmFzZUZvcm1GaWVsZCcpO1xuXG5leHBvcnQgY29uc3QgRm9ybVBpY2tlcklucHV0ID0gKHsgdHlwZSwgaXRlbXMsIC4uLnByb3BzIH06IEZvcm1QaWNrZXJJbnB1dFByb3BzKSA9PiB7XG5cblx0cmV0dXJuIChcblx0XHQ8RmllbGQgey4uLnByb3BzfT5cblx0XHR7KHsgZmllbGQsIGZvcm0gfTogYW55KSA9PiB7XG5cblx0XHRcdGNvbnN0IGlucHV0UHJvcHM6IGFueSA9IHtcblx0XHRcdFx0Li4ucHJvcHMsXG5cdFx0XHRcdC4uLmZpZWxkLFxuXHRcdFx0XHRvblZhbHVlQ2hhbmdlOiAodjogYW55KSA9PiBmb3JtLnNldEZpZWxkVmFsdWUoZmllbGQubmFtZSwgdiksXG5cdFx0XHRcdHNlbGVjdGVkVmFsdWU6IGZpZWxkLnZhbHVlLFxuXHRcdFx0fTtcblxuXHRcdFx0cmV0dXJuIChcblx0XHRcdFx0PEJhc2VGb3JtRmllbGQgTWFpbkNvbXBvbmVudD17UGlja2VyfSB7Li4uaW5wdXRQcm9wc30+XG5cdFx0XHRcdHtpdGVtcy5tYXAoaSA9PiA8UGlja2VyLkl0ZW0ga2V5PXtTdHJpbmcoaS52YWx1ZSl9IHsuLi5pfSAvPil9XG5cdFx0XHRcdDwvQmFzZUZvcm1GaWVsZD5cblx0XHRcdCk7XG5cdFx0fX1cblx0XHQ8L0ZpZWxkPlxuXHQpO1xufTtcblxuRm9ybVBpY2tlcklucHV0LmRlZmF1bHRQcm9wcyA9IHtcbn07XG4iXX0=
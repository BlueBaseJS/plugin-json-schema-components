{"version":3,"sources":["/home/muzzamil/Documents/bluebase/plugin-json-schema-components/src/JsonForm/JsonForm.tsx"],"names":[],"mappings":";;;;;;;;;;;;AAAA,IAAA,QAAA,GAAA,OAAA,CAAA,QAAA,CAAA;;AACA,IAAA,MAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;;AACA,IAAA,MAAA,GAAA,OAAA,CAAA,QAAA,CAAA;;AAEA,IAAA,YAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;AACA,IAAA,OAAA,GAAA,OAAA,CAAA,eAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AA2BA,IAAM,gBAAgB,GAAG,SAAnB,gBAAmB,CAAC,KAAD,EAAyB;AAAA,MAEzC,MAFyC,GAE9B,KAF8B,CAEzC,MAFyC;;AAG3C,MAAE,MAAF,GAAsB,MAAtB,CAAE,MAAF;AAAA,MAAU,IAAV,GAAU,OAAA,CAAA,MAAA,CAAA,MAAA,EAAA,CAAA,QAAA,CAAA,CAAV;;AAEN,SACC,OAAA,CAAA,OAAA,CAAA,aAAA,CAAC,QAAA,CAAA,MAAD,EAAO,uBAAA,EAAA,EAAK,IAAL,CAAP,EACC,OAAA,CAAA,OAAA,CAAA,aAAA,CAAC,MAAA,CAAA,IAAD,EAAK,IAAL,EACC,OAAA,CAAA,OAAA,CAAA,aAAA,CAAC,YAAA,CAAA,UAAD,EAAW;AAAC,IAAA,MAAM,EAAE;AAAT,GAAX,CADD,CADD,CADD;AAOA,CAZD;;AAkBa,OAAA,CAAA,QAAA,GAAW,UAAC,KAAD,EAAyB;AAAA,MAExC,IAFwC,GAEf,KAFe,CAExC,IAFwC;AAAA,MAElC,MAFkC,GAEf,KAFe,CAElC,MAFkC;AAAA,MAE1B,MAF0B,GAEf,KAFe,CAE1B,MAF0B;;AAG1C,MAAE,MAAF,GAAsB,MAAtB,CAAE,MAAF;AAAA,MAAU,IAAV,GAAU,OAAA,CAAA,MAAA,CAAA,MAAA,EAAA,CAAA,QAAA,CAAA,CAAV;;AAEN,MAAI,CAAC,MAAL,EAAa;AACZ,WAAO,OAAA,CAAA,OAAA,CAAA,aAAA,CAAC,gBAAD,EAAiB,uBAAA;AAAC,MAAA,MAAM,EAAE;AAAT,KAAA,EAAqB,IAArB,CAAjB,CAAP;AACA;;AAED,SACC,OAAA,CAAA,OAAA,CAAA,aAAA,CAAC,MAAA,CAAA,cAAD,EAAe;AACd,IAAA,MAAM,EAAE,MADM;AAEd,IAAA,KAAK,EAAE,MAFO;AAGd,IAAA,IAAI,EAAE;AAHQ,GAAf,EAKC,UAAC,cAAD,EAA4C;AAC5C,WAAO,OAAA,CAAA,OAAA,CAAA,aAAA,CAAC,gBAAD,EAAiB,uBAAA;AAAC,MAAA,MAAM,EAAE;AAAT,KAAA,EAA6B,IAA7B,CAAjB,CAAP;AACA,GAPD,CADD;AAWA,CApBY","sourcesContent":["import { Formik, FormikConfig, FormikValues } from 'formik';\nimport { BlueBaseFilter } from '@bluebase/core';\nimport { Form } from './Form';\nimport { FormFieldProps } from './Fields';\nimport { FormFields } from './FormFields';\nimport React from 'react';\n\nexport interface FormProps<Values = FormikValues> extends FormikConfig<Values> {\n\tfields: FormFieldProps[];\n}\n\nexport interface JsonFormProps<Values = FormikValues> {\n\n\t/** JSON Schema. */\n\tschema: FormProps<Values>;\n\n\t/** Event name to filter this schema. If this is not provided, the schema is not filtered. */\n\tfilter?: string;\n\n\t/** Arguments for the filter. */\n\targs?: { [key: string]: any };\n\n  /**\n   * Used to locate this view in end-to-end tests.\n   */\n\ttestID?: string,\n}\n\n/**\n * A component that takes a json schema and converts it into a form.\n * @param props\n */\nconst JsonFormInternal = (props: JsonFormProps) => {\n\n\tconst { schema } = props;\n\tconst { fields, ...rest } = schema;\n\n\treturn (\n\t\t<Formik {...rest}>\n\t\t\t<Form>\n\t\t\t\t<FormFields fields={fields} />\n\t\t\t</Form>\n\t\t</Formik>\n\t);\n};\n\n/**\n * A component that takes a json schema and converts it into a form.\n * @param props\n */\nexport const JsonForm = (props: JsonFormProps) => {\n\n\tconst { args, filter, schema } = props;\n\tconst { fields, ...rest } = schema;\n\n\tif (!filter) {\n\t\treturn <JsonFormInternal schema={schema} {...rest} />;\n\t}\n\n\treturn (\n\t\t<BlueBaseFilter\n\t\t\tfilter={filter}\n\t\t\tvalue={schema}\n\t\t\targs={args}\n\t\t>\n\t\t{(filteredSchema: JsonFormProps['schema']) => {\n\t\t\treturn <JsonFormInternal schema={filteredSchema} {...rest} />;\n\t\t}}\n\t\t</BlueBaseFilter>\n\t);\n};\n"]}
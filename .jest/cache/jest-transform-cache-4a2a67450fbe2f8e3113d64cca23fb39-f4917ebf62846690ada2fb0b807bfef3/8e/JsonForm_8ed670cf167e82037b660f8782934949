8b55d68b20c896c4cfe300e5620865e6
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

var formik_1 = require("formik");

var core_1 = require("@bluebase/core");

var Form_1 = require("./Form");

var FormFields_1 = require("./FormFields");

var react_1 = tslib_1.__importDefault(require("react"));

var JsonFormInternal = function JsonFormInternal(props) {
  var schema = props.schema;

  var fields = schema.fields,
      rest = tslib_1.__rest(schema, ["fields"]);

  return react_1.default.createElement(formik_1.Formik, (0, _extends2.default)({}, rest), react_1.default.createElement(Form_1.Form, null, react_1.default.createElement(FormFields_1.FormFields, {
    fields: fields
  })));
};

exports.JsonForm = function (props) {
  var args = props.args,
      filter = props.filter,
      schema = props.schema;

  var fields = schema.fields,
      rest = tslib_1.__rest(schema, ["fields"]);

  if (!filter) {
    return react_1.default.createElement(JsonFormInternal, (0, _extends2.default)({
      schema: schema
    }, rest));
  }

  return react_1.default.createElement(core_1.BlueBaseFilter, {
    filter: filter,
    value: schema,
    args: args
  }, function (filteredSchema) {
    return react_1.default.createElement(JsonFormInternal, (0, _extends2.default)({
      schema: filteredSchema
    }, rest));
  });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL211enphbWlsL0RvY3VtZW50cy9ibHVlYmFzZS9wbHVnaW4tanNvbi1zY2hlbWEtY29tcG9uZW50cy9zcmMvSnNvbkZvcm0vSnNvbkZvcm0udHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBLElBQUEsUUFBQSxHQUFBLE9BQUEsQ0FBQSxRQUFBLENBQUE7O0FBQ0EsSUFBQSxNQUFBLEdBQUEsT0FBQSxDQUFBLGdCQUFBLENBQUE7O0FBQ0EsSUFBQSxNQUFBLEdBQUEsT0FBQSxDQUFBLFFBQUEsQ0FBQTs7QUFFQSxJQUFBLFlBQUEsR0FBQSxPQUFBLENBQUEsY0FBQSxDQUFBOztBQUNBLElBQUEsT0FBQSxHQUFBLE9BQUEsQ0FBQSxlQUFBLENBQUEsT0FBQSxDQUFBLE9BQUEsQ0FBQSxDQUFBOztBQTJCQSxJQUFNLGdCQUFnQixHQUFHLFNBQW5CLGdCQUFtQixDQUFDLEtBQUQsRUFBeUI7QUFBQSxNQUV6QyxNQUZ5QyxHQUU5QixLQUY4QixDQUV6QyxNQUZ5Qzs7QUFHM0MsTUFBRSxNQUFGLEdBQXNCLE1BQXRCLENBQUUsTUFBRjtBQUFBLE1BQVUsSUFBVixHQUFVLE9BQUEsQ0FBQSxNQUFBLENBQUEsTUFBQSxFQUFBLENBQUEsUUFBQSxDQUFBLENBQVY7O0FBRU4sU0FDQyxPQUFBLENBQUEsT0FBQSxDQUFBLGFBQUEsQ0FBQyxRQUFBLENBQUEsTUFBRCxFQUFPLHVCQUFBLEVBQUEsRUFBSyxJQUFMLENBQVAsRUFDQyxPQUFBLENBQUEsT0FBQSxDQUFBLGFBQUEsQ0FBQyxNQUFBLENBQUEsSUFBRCxFQUFLLElBQUwsRUFDQyxPQUFBLENBQUEsT0FBQSxDQUFBLGFBQUEsQ0FBQyxZQUFBLENBQUEsVUFBRCxFQUFXO0FBQUMsSUFBQSxNQUFNLEVBQUU7QUFBVCxHQUFYLENBREQsQ0FERCxDQUREO0FBT0EsQ0FaRDs7QUFrQmEsT0FBQSxDQUFBLFFBQUEsR0FBVyxVQUFDLEtBQUQsRUFBeUI7QUFBQSxNQUV4QyxJQUZ3QyxHQUVmLEtBRmUsQ0FFeEMsSUFGd0M7QUFBQSxNQUVsQyxNQUZrQyxHQUVmLEtBRmUsQ0FFbEMsTUFGa0M7QUFBQSxNQUUxQixNQUYwQixHQUVmLEtBRmUsQ0FFMUIsTUFGMEI7O0FBRzFDLE1BQUUsTUFBRixHQUFzQixNQUF0QixDQUFFLE1BQUY7QUFBQSxNQUFVLElBQVYsR0FBVSxPQUFBLENBQUEsTUFBQSxDQUFBLE1BQUEsRUFBQSxDQUFBLFFBQUEsQ0FBQSxDQUFWOztBQUVOLE1BQUksQ0FBQyxNQUFMLEVBQWE7QUFDWixXQUFPLE9BQUEsQ0FBQSxPQUFBLENBQUEsYUFBQSxDQUFDLGdCQUFELEVBQWlCLHVCQUFBO0FBQUMsTUFBQSxNQUFNLEVBQUU7QUFBVCxLQUFBLEVBQXFCLElBQXJCLENBQWpCLENBQVA7QUFDQTs7QUFFRCxTQUNDLE9BQUEsQ0FBQSxPQUFBLENBQUEsYUFBQSxDQUFDLE1BQUEsQ0FBQSxjQUFELEVBQWU7QUFDZCxJQUFBLE1BQU0sRUFBRSxNQURNO0FBRWQsSUFBQSxLQUFLLEVBQUUsTUFGTztBQUdkLElBQUEsSUFBSSxFQUFFO0FBSFEsR0FBZixFQUtDLFVBQUMsY0FBRCxFQUE0QztBQUM1QyxXQUFPLE9BQUEsQ0FBQSxPQUFBLENBQUEsYUFBQSxDQUFDLGdCQUFELEVBQWlCLHVCQUFBO0FBQUMsTUFBQSxNQUFNLEVBQUU7QUFBVCxLQUFBLEVBQTZCLElBQTdCLENBQWpCLENBQVA7QUFDQSxHQVBELENBREQ7QUFXQSxDQXBCWSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEZvcm1paywgRm9ybWlrQ29uZmlnLCBGb3JtaWtWYWx1ZXMgfSBmcm9tICdmb3JtaWsnO1xuaW1wb3J0IHsgQmx1ZUJhc2VGaWx0ZXIgfSBmcm9tICdAYmx1ZWJhc2UvY29yZSc7XG5pbXBvcnQgeyBGb3JtIH0gZnJvbSAnLi9Gb3JtJztcbmltcG9ydCB7IEZvcm1GaWVsZFByb3BzIH0gZnJvbSAnLi9GaWVsZHMnO1xuaW1wb3J0IHsgRm9ybUZpZWxkcyB9IGZyb20gJy4vRm9ybUZpZWxkcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEZvcm1Qcm9wczxWYWx1ZXMgPSBGb3JtaWtWYWx1ZXM+IGV4dGVuZHMgRm9ybWlrQ29uZmlnPFZhbHVlcz4ge1xuXHRmaWVsZHM6IEZvcm1GaWVsZFByb3BzW107XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSnNvbkZvcm1Qcm9wczxWYWx1ZXMgPSBGb3JtaWtWYWx1ZXM+IHtcblxuXHQvKiogSlNPTiBTY2hlbWEuICovXG5cdHNjaGVtYTogRm9ybVByb3BzPFZhbHVlcz47XG5cblx0LyoqIEV2ZW50IG5hbWUgdG8gZmlsdGVyIHRoaXMgc2NoZW1hLiBJZiB0aGlzIGlzIG5vdCBwcm92aWRlZCwgdGhlIHNjaGVtYSBpcyBub3QgZmlsdGVyZWQuICovXG5cdGZpbHRlcj86IHN0cmluZztcblxuXHQvKiogQXJndW1lbnRzIGZvciB0aGUgZmlsdGVyLiAqL1xuXHRhcmdzPzogeyBba2V5OiBzdHJpbmddOiBhbnkgfTtcblxuICAvKipcbiAgICogVXNlZCB0byBsb2NhdGUgdGhpcyB2aWV3IGluIGVuZC10by1lbmQgdGVzdHMuXG4gICAqL1xuXHR0ZXN0SUQ/OiBzdHJpbmcsXG59XG5cbi8qKlxuICogQSBjb21wb25lbnQgdGhhdCB0YWtlcyBhIGpzb24gc2NoZW1hIGFuZCBjb252ZXJ0cyBpdCBpbnRvIGEgZm9ybS5cbiAqIEBwYXJhbSBwcm9wc1xuICovXG5jb25zdCBKc29uRm9ybUludGVybmFsID0gKHByb3BzOiBKc29uRm9ybVByb3BzKSA9PiB7XG5cblx0Y29uc3QgeyBzY2hlbWEgfSA9IHByb3BzO1xuXHRjb25zdCB7IGZpZWxkcywgLi4ucmVzdCB9ID0gc2NoZW1hO1xuXG5cdHJldHVybiAoXG5cdFx0PEZvcm1payB7Li4ucmVzdH0+XG5cdFx0XHQ8Rm9ybT5cblx0XHRcdFx0PEZvcm1GaWVsZHMgZmllbGRzPXtmaWVsZHN9IC8+XG5cdFx0XHQ8L0Zvcm0+XG5cdFx0PC9Gb3JtaWs+XG5cdCk7XG59O1xuXG4vKipcbiAqIEEgY29tcG9uZW50IHRoYXQgdGFrZXMgYSBqc29uIHNjaGVtYSBhbmQgY29udmVydHMgaXQgaW50byBhIGZvcm0uXG4gKiBAcGFyYW0gcHJvcHNcbiAqL1xuZXhwb3J0IGNvbnN0IEpzb25Gb3JtID0gKHByb3BzOiBKc29uRm9ybVByb3BzKSA9PiB7XG5cblx0Y29uc3QgeyBhcmdzLCBmaWx0ZXIsIHNjaGVtYSB9ID0gcHJvcHM7XG5cdGNvbnN0IHsgZmllbGRzLCAuLi5yZXN0IH0gPSBzY2hlbWE7XG5cblx0aWYgKCFmaWx0ZXIpIHtcblx0XHRyZXR1cm4gPEpzb25Gb3JtSW50ZXJuYWwgc2NoZW1hPXtzY2hlbWF9IHsuLi5yZXN0fSAvPjtcblx0fVxuXG5cdHJldHVybiAoXG5cdFx0PEJsdWVCYXNlRmlsdGVyXG5cdFx0XHRmaWx0ZXI9e2ZpbHRlcn1cblx0XHRcdHZhbHVlPXtzY2hlbWF9XG5cdFx0XHRhcmdzPXthcmdzfVxuXHRcdD5cblx0XHR7KGZpbHRlcmVkU2NoZW1hOiBKc29uRm9ybVByb3BzWydzY2hlbWEnXSkgPT4ge1xuXHRcdFx0cmV0dXJuIDxKc29uRm9ybUludGVybmFsIHNjaGVtYT17ZmlsdGVyZWRTY2hlbWF9IHsuLi5yZXN0fSAvPjtcblx0XHR9fVxuXHRcdDwvQmx1ZUJhc2VGaWx0ZXI+XG5cdCk7XG59O1xuIl19
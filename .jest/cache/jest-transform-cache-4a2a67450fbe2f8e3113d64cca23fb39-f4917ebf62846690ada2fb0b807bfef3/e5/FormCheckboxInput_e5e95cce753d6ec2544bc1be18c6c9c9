80fe30ec2b56a154ba1ea15f7ec5ee83
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

var components_1 = require("@bluebase/components");

var formik_1 = require("formik");

var react_1 = tslib_1.__importDefault(require("react"));

var BaseFormField = components_1.getComponent('BaseFormField');

exports.FormCheckboxInput = function (props) {
  return react_1.default.createElement(formik_1.Field, (0, _extends2.default)({}, props), function (_ref) {
    var field = _ref.field,
        form = _ref.form;
    var name = props.name;
    var value = formik_1.getIn(form.values, name);
    console.log('abc', name);
    var inputProps = (0, _extends2.default)({}, props, {
      checked: Boolean(value),
      onValueChange: function onValueChange(_value, checked) {
        form.setFieldValue(field.name, checked);
        console.log('Funjdkjnk', props.onValueChange);
        console.log('value', value);
        value === true ? props.onValueChange ? props.onValueChange(value, checked) : null : value === false ? props.onValueChange ? props.onValueChange(value, checked) : null : null;
      }
    });
    return react_1.default.createElement(BaseFormField, (0, _extends2.default)({
      MainComponent: components_1.Checkbox
    }, inputProps));
  });
};

exports.FormCheckboxInput.defaultProps = {};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL211enphbWlsL0RvY3VtZW50cy9ibHVlYmFzZS9wbHVnaW4tanNvbi1zY2hlbWEtY29tcG9uZW50cy9zcmMvSnNvbkZvcm0vRmllbGRzL0Zvcm1DaGVja2JveElucHV0LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQSxJQUFBLFlBQUEsR0FBQSxPQUFBLENBQUEsc0JBQUEsQ0FBQTs7QUFDQSxJQUFBLFFBQUEsR0FBQSxPQUFBLENBQUEsUUFBQSxDQUFBOztBQUVBLElBQUEsT0FBQSxHQUFBLE9BQUEsQ0FBQSxlQUFBLENBQUEsT0FBQSxDQUFBLE9BQUEsQ0FBQSxDQUFBOztBQU9BLElBQU0sYUFBYSxHQUFHLFlBQUEsQ0FBQSxZQUFBLENBQWlDLGVBQWpDLENBQXRCOztBQUVhLE9BQUEsQ0FBQSxpQkFBQSxHQUFvQixVQUFDLEtBQUQsRUFBa0M7QUFFbEUsU0FDQyxPQUFBLENBQUEsT0FBQSxDQUFBLGFBQUEsQ0FBQyxRQUFBLENBQUEsS0FBRCxFQUFNLHVCQUFBLEVBQUEsRUFBSyxLQUFMLENBQU4sRUFDQyxnQkFBeUI7QUFBQSxRQUF0QixLQUFzQixRQUF0QixLQUFzQjtBQUFBLFFBQWYsSUFBZSxRQUFmLElBQWU7QUFFekIsUUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLElBQW5CO0FBQ0EsUUFBTSxLQUFLLEdBQUcsUUFBQSxDQUFBLEtBQUEsQ0FBTSxJQUFJLENBQUMsTUFBWCxFQUFtQixJQUFuQixDQUFkO0FBQ0EsSUFBQSxPQUFPLENBQUMsR0FBUixDQUFZLEtBQVosRUFBa0IsSUFBbEI7QUFDQSxRQUFNLFVBQVUsR0FBQSx1QkFBQSxFQUFBLEVBQ1osS0FEWSxFQUNQO0FBQ1IsTUFBQSxPQUFPLEVBQUUsT0FBTyxDQUFDLEtBQUQsQ0FEUjtBQUVSLE1BQUEsYUFBYSxFQUFFLHVCQUFDLE1BQUQsRUFBYyxPQUFkLEVBQWtDO0FBRWhELFFBQUEsSUFBSSxDQUFDLGFBQUwsQ0FBbUIsS0FBSyxDQUFDLElBQXpCLEVBQStCLE9BQS9CO0FBQ0EsUUFBQSxPQUFPLENBQUMsR0FBUixDQUFZLFdBQVosRUFBeUIsS0FBSyxDQUFDLGFBQS9CO0FBQ0EsUUFBQSxPQUFPLENBQUMsR0FBUixDQUFZLE9BQVosRUFBcUIsS0FBckI7QUFFRCxRQUFBLEtBQUssS0FBSyxJQUFWLEdBQ0MsS0FBSyxDQUFDLGFBQU4sR0FDRSxLQUFLLENBQUMsYUFBTixDQUFvQixLQUFwQixFQUEwQixPQUExQixDQURGLEdBQ3FDLElBRnRDLEdBR0UsS0FBSyxLQUFLLEtBQVYsR0FDRCxLQUFLLENBQUMsYUFBTixHQUNHLEtBQUssQ0FBQyxhQUFOLENBQW9CLEtBQXBCLEVBQTBCLE9BQTFCLENBREgsR0FFRyxJQUhGLEdBR08sSUFOVDtBQU9DO0FBZk8sS0FETyxDQUFoQjtBQW1CQSxXQUFRLE9BQUEsQ0FBQSxPQUFBLENBQUEsYUFBQSxDQUFDLGFBQUQsRUFBYyx1QkFBQTtBQUFDLE1BQUEsYUFBYSxFQUFFLFlBQUEsQ0FBQTtBQUFoQixLQUFBLEVBQThCLFVBQTlCLENBQWQsQ0FBUjtBQUNBLEdBMUJELENBREQ7QUE4QkEsQ0FoQ1k7O0FBa0NiLE9BQUEsQ0FBQSxpQkFBQSxDQUFrQixZQUFsQixHQUFpQyxFQUFqQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoZWNrYm94LCBDaGVja2JveFByb3BzLCBnZXRDb21wb25lbnQgfSBmcm9tICdAYmx1ZWJhc2UvY29tcG9uZW50cyc7XG5pbXBvcnQgeyBGaWVsZCwgZ2V0SW4gfSBmcm9tICdmb3JtaWsnO1xuaW1wb3J0IHsgQmFzZUZvcm1GaWVsZFByb3BzIH0gZnJvbSAnLi4vQmFzZUZvcm1GaWVsZCc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEZvcm1DaGVja2JveElucHV0UHJvcHMgZXh0ZW5kcyBDaGVja2JveFByb3BzIHtcblx0dHlwZTogJ2NoZWNrYm94Jyxcblx0bmFtZTogc3RyaW5nLFxufVxuXG5jb25zdCBCYXNlRm9ybUZpZWxkID0gZ2V0Q29tcG9uZW50PEJhc2VGb3JtRmllbGRQcm9wcz4oJ0Jhc2VGb3JtRmllbGQnKTtcblxuZXhwb3J0IGNvbnN0IEZvcm1DaGVja2JveElucHV0ID0gKHByb3BzOiBGb3JtQ2hlY2tib3hJbnB1dFByb3BzKSA9PiB7XG5cblx0cmV0dXJuIChcblx0XHQ8RmllbGQgey4uLnByb3BzfT5cblx0XHR7KHsgZmllbGQsIGZvcm0gfTogYW55KSA9PiB7XG5cblx0XHRcdGNvbnN0IG5hbWUgPSBwcm9wcy5uYW1lO1xuXHRcdFx0Y29uc3QgdmFsdWUgPSBnZXRJbihmb3JtLnZhbHVlcywgbmFtZSk7XG5cdFx0XHRjb25zb2xlLmxvZygnYWJjJyxuYW1lKTtcblx0XHRcdGNvbnN0IGlucHV0UHJvcHMgPSB7XG5cdFx0XHRcdC4uLnByb3BzLFxuXHRcdFx0XHRjaGVja2VkOiBCb29sZWFuKHZhbHVlKSxcblx0XHRcdFx0b25WYWx1ZUNoYW5nZTogKF92YWx1ZTogYW55LCBjaGVja2VkOiBib29sZWFuKSA9PiBcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGZvcm0uc2V0RmllbGRWYWx1ZShmaWVsZC5uYW1lLCBjaGVja2VkKVxuXHRcdFx0XHRcdGNvbnNvbGUubG9nKCdGdW5qZGtqbmsnLCBwcm9wcy5vblZhbHVlQ2hhbmdlKVxuXHRcdFx0XHRcdGNvbnNvbGUubG9nKCd2YWx1ZScsIHZhbHVlKVxuXG5cdFx0XHRcdHZhbHVlID09PSB0cnVlID8gXG5cdFx0XHRcdFx0cHJvcHMub25WYWx1ZUNoYW5nZSA/XG5cdFx0XHRcdFx0ICBwcm9wcy5vblZhbHVlQ2hhbmdlKHZhbHVlLGNoZWNrZWQpOm51bGxcblx0XHRcdFx0IDp2YWx1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0XHRcdHByb3BzLm9uVmFsdWVDaGFuZ2UgP1xuXHRcdFx0XHRcdCAgIHByb3BzLm9uVmFsdWVDaGFuZ2UodmFsdWUsY2hlY2tlZCkgOlxuXHRcdFx0XHRcdFx0ICBudWxsOm51bGxcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdFx0cmV0dXJuICg8QmFzZUZvcm1GaWVsZCBNYWluQ29tcG9uZW50PXtDaGVja2JveH0gey4uLmlucHV0UHJvcHN9IC8+KTtcblx0XHR9fVxuXHQ8L0ZpZWxkPlxuXHQpO1xufTtcblxuRm9ybUNoZWNrYm94SW5wdXQuZGVmYXVsdFByb3BzID0ge1xufTtcbiJdfQ==
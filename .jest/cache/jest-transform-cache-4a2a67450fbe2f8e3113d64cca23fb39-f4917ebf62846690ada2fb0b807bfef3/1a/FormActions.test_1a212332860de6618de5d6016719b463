a187837fa346e7c66dd496a630afa634
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

var core_1 = require("@bluebase/core");

var formik_1 = require("formik");

var plugin_material_ui_1 = tslib_1.__importDefault(require("@bluebase/plugin-material-ui"));

var index_1 = tslib_1.__importDefault(require("../../../index"));

var react_1 = tslib_1.__importDefault(require("react"));

var enzyme_1 = require("enzyme");

var enzyme_async_helpers_1 = require("enzyme-async-helpers");

var components_1 = require("@bluebase/components");

var deepmerge_1 = tslib_1.__importDefault(require("deepmerge"));

var fieldProps = {
  name: 'form-actions',
  type: 'actions',
  fields: [{
    name: 'reset',
    type: 'reset',
    nested: true
  }, {
    name: 'submit',
    title: 'Login',
    type: 'submit'
  }]
};
var initialValues = {};
describe('FormActions', function () {
  it('should render all form fields in the schema with direction right', function _callee() {
    var onSubmit, FormActions, component, root, rootStyles, childStyles;
    return _regenerator.default.async(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            onSubmit = jest.fn();
            FormActions = components_1.getComponent('FormActions');
            component = enzyme_1.mount(react_1.default.createElement(core_1.BlueBaseApp, {
              plugins: [index_1.default, plugin_material_ui_1.default]
            }, react_1.default.createElement(formik_1.Formik, {
              initialValues: initialValues,
              onSubmit: onSubmit
            }, react_1.default.createElement(FormActions, (0, _extends2.default)({}, fieldProps, {
              direction: 'right'
            })))));
            _context.next = 5;
            return _regenerator.default.awrap(enzyme_async_helpers_1.waitForElement(component, FormActions));

          case 5:
            root = component.find('[testID="form-actions"]').first().prop('style');
            rootStyles = deepmerge_1.default.all(root.filter(function (x) {
              return !!x;
            }));
            childStyles = component.find('FieldWrapper View').first().prop('style');
            expect(rootStyles.justifyContent).toBe('flex-end');
            expect(childStyles.marginRight).toBe(16);

          case 10:
          case "end":
            return _context.stop();
        }
      }
    });
  });
  it('should render all form fields in the schema with direction left', function _callee2() {
    var onSubmit, FormActions, component, root, rootStyles, childStyles;
    return _regenerator.default.async(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            onSubmit = jest.fn();
            FormActions = components_1.getComponent('FormActions');
            component = enzyme_1.mount(react_1.default.createElement(core_1.BlueBaseApp, {
              plugins: [index_1.default, plugin_material_ui_1.default]
            }, react_1.default.createElement(formik_1.Formik, {
              initialValues: initialValues,
              onSubmit: onSubmit
            }, react_1.default.createElement(FormActions, (0, _extends2.default)({}, fieldProps, {
              direction: "left"
            })))));
            _context2.next = 5;
            return _regenerator.default.awrap(enzyme_async_helpers_1.waitForElement(component, FormActions));

          case 5:
            root = component.find('[testID="form-actions"]').first().prop('style');
            rootStyles = deepmerge_1.default.all(root.filter(function (x) {
              return !!x;
            }));
            childStyles = component.find('FieldWrapper View').first().prop('style');
            expect(rootStyles.justifyContent).toBe('flex-start');
            expect(childStyles.marginLeft).toBe(16);

          case 10:
          case "end":
            return _context2.stop();
        }
      }
    });
  });
  it('should render all form fields in the schema with space between', function _callee3() {
    var onSubmit, FormActions, component, root, rootStyles;
    return _regenerator.default.async(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            onSubmit = jest.fn();
            FormActions = components_1.getComponent('FormActions');
            component = enzyme_1.mount(react_1.default.createElement(core_1.BlueBaseApp, {
              plugins: [index_1.default, plugin_material_ui_1.default]
            }, react_1.default.createElement(formik_1.Formik, {
              initialValues: initialValues,
              onSubmit: onSubmit
            }, react_1.default.createElement(FormActions, (0, _extends2.default)({
              style: {}
            }, fieldProps, {
              direction: "space-between"
            })))));
            _context3.next = 5;
            return _regenerator.default.awrap(enzyme_async_helpers_1.waitForElement(component, FormActions));

          case 5:
            root = component.find('[testID="form-actions"]').first().prop('style');
            rootStyles = deepmerge_1.default.all(root.filter(function (x) {
              return !!x;
            }));
            expect(rootStyles.justifyContent).toBe('space-between');

          case 8:
          case "end":
            return _context3.stop();
        }
      }
    });
  });
  it('should render all form fields in the schema with space between', function _callee4() {
    var onSubmit, FormActions, component, root, rootStyles;
    return _regenerator.default.async(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            onSubmit = jest.fn();
            FormActions = components_1.getComponent('FormActions');
            component = enzyme_1.mount(react_1.default.createElement(core_1.BlueBaseApp, {
              plugins: [index_1.default, plugin_material_ui_1.default]
            }, react_1.default.createElement(formik_1.Formik, {
              initialValues: initialValues,
              onSubmit: onSubmit
            }, react_1.default.createElement(FormActions, (0, _extends2.default)({
              style: {}
            }, fieldProps)))));
            _context4.next = 5;
            return _regenerator.default.awrap(enzyme_async_helpers_1.waitForElement(component, FormActions));

          case 5:
            root = component.find('[testID="form-actions"]').first().prop('style');
            rootStyles = deepmerge_1.default.all(root.filter(function (x) {
              return !!x;
            }));
            expect(rootStyles.justifyContent).toBe('');

          case 8:
          case "end":
            return _context4.stop();
        }
      }
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
1aeef9b058f7b64be9e8577cc9daee48
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

var FormFields_1 = require("../FormFields");

var react_1 = tslib_1.__importDefault(require("react"));

var components_1 = require("@bluebase/components");

var FieldWrapper = function FieldWrapper(_ref) {
  var field = _ref.field,
      parent = _ref.parent,
      children = _ref.children;
  var direction = parent.direction,
      styles = parent.styles,
      style = parent.style,
      textAlignment = parent.textAlignment;
  debugger;
  return react_1.default.createElement(components_1.View, {
    key: field.name,
    style: [direction === 'left' ? styles.fieldContainerLeft : null || direction === 'right' ? styles.fieldContainerRight : null || direction === 'space-between' ? styles.fieldContainerBetween : null || textAlignment === 'left' ? styles.textContainerLeft : null || textAlignment === 'right' ? styles.textContainerRight : null, style]
  }, children);
};

exports.FormActions = function (props) {
  var direction = props.direction,
      style = props.style,
      _styles = props.styles;
  var styles = _styles;
  return react_1.default.createElement(components_1.View, {
    style: [styles.root, direction === 'left' ? styles.rootLeft : null || direction === 'right' ? styles.rootRight : null || direction === 'space-between' ? styles.rootSpaceBetween : null, style],
    testID: "form-actions"
  }, react_1.default.createElement(FormFields_1.FormFields, (0, _extends2.default)({
    FieldWrapper: FieldWrapper
  }, props)));
};

exports.FormActions.defaultProps = {
  direction: 'right'
};

exports.FormActions.defaultStyles = function (theme) {
  return {
    fieldContainerLeft: {
      marginLeft: theme.spacing.unit * 0
    },
    fieldContainerRight: {
      marginRight: theme.spacing.unit * 0
    },
    textContainerRight: {
      marginRight: theme.spacing.unit * 2
    },
    textContainerLeft: {
      marginLeft: theme.spacing.unit * 2
    },
    fieldContainerBetween: {
      marginLeft: theme.spacing.unit * 0,
      marginRight: theme.spacing.unit * 0
    },
    root: {
      flexDirection: 'row',
      paddingVertical: theme.spacing.unit * 2
    },
    rootLeft: {
      justifyContent: 'flex-start'
    },
    rootRight: {
      justifyContent: 'flex-end'
    },
    rootSpaceBetween: {
      justifyContent: 'space-between'
    }
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL211enphbWlsL0RvY3VtZW50cy9ibHVlYmFzZS9wbHVnaW4tanNvbi1zY2hlbWEtY29tcG9uZW50cy9zcmMvSnNvbkZvcm0vRmllbGRzL0Zvcm1BY3Rpb25zLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQSxJQUFBLFlBQUEsR0FBQSxPQUFBLENBQUEsZUFBQSxDQUFBOztBQUdBLElBQUEsT0FBQSxHQUFBLE9BQUEsQ0FBQSxlQUFBLENBQUEsT0FBQSxDQUFBLE9BQUEsQ0FBQSxDQUFBOztBQUVBLElBQUEsWUFBQSxHQUFBLE9BQUEsQ0FBQSxzQkFBQSxDQUFBOztBQXlCQSxJQUFNLFlBQVksR0FBRyxTQUFmLFlBQWUsT0FBa0Q7QUFBQSxNQUEvQyxLQUErQyxRQUEvQyxLQUErQztBQUFBLE1BQXhDLE1BQXdDLFFBQXhDLE1BQXdDO0FBQUEsTUFBakMsUUFBaUMsUUFBakMsUUFBaUM7QUFBQSxNQUU5RCxTQUY4RCxHQUVsQixNQUZrQixDQUU5RCxTQUY4RDtBQUFBLE1BRW5ELE1BRm1ELEdBRWxCLE1BRmtCLENBRW5ELE1BRm1EO0FBQUEsTUFFM0MsS0FGMkMsR0FFbEIsTUFGa0IsQ0FFM0MsS0FGMkM7QUFBQSxNQUVwQyxhQUZvQyxHQUVsQixNQUZrQixDQUVwQyxhQUZvQztBQUd0RTtBQUVBLFNBQ0MsT0FBQSxDQUFBLE9BQUEsQ0FBQSxhQUFBLENBQUMsWUFBQSxDQUFBLElBQUQsRUFBSztBQUNKLElBQUEsR0FBRyxFQUFFLEtBQUssQ0FBQyxJQURQO0FBRUosSUFBQSxLQUFLLEVBQUUsQ0FBQyxTQUFTLEtBQUssTUFBZCxHQUF1QixNQUFNLENBQUMsa0JBQTlCLEdBQW1ELFFBQ3hELFNBQVMsS0FBSSxPQUQyQyxHQUNqQyxNQUFNLENBQUMsbUJBRDBCLEdBQ0wsUUFDbkQsU0FBUyxLQUFLLGVBRHFDLEdBQ25CLE1BQU0sQ0FBQyxxQkFEWSxHQUNZLFFBQy9ELGFBQWEsS0FBSyxNQUQ2QyxHQUNwQyxNQUFNLENBQUMsaUJBRDZCLEdBQ1YsUUFDckQsYUFBYSxLQUFLLE9BRG1DLEdBQ3pCLE1BQU0sQ0FBQyxrQkFEa0IsR0FDQyxJQUpsRCxFQUl3RCxLQUp4RDtBQUZILEdBQUwsRUFRQyxRQVJELENBREQ7QUFZQSxDQWpCRDs7QUF1QmEsT0FBQSxDQUFBLFdBQUEsR0FBYyxVQUFDLEtBQUQsRUFBNEI7QUFBQSxNQUU5QyxTQUY4QyxHQUVSLEtBRlEsQ0FFOUMsU0FGOEM7QUFBQSxNQUVuQyxLQUZtQyxHQUVSLEtBRlEsQ0FFbkMsS0FGbUM7QUFBQSxNQUVwQixPQUZvQixHQUVSLEtBRlEsQ0FFNUIsTUFGNEI7QUFHdEQsTUFBTSxNQUFNLEdBQUcsT0FBZjtBQUNBLFNBRUMsT0FBQSxDQUFBLE9BQUEsQ0FBQSxhQUFBLENBQUMsWUFBQSxDQUFBLElBQUQsRUFBSztBQUFDLElBQUEsS0FBSyxFQUFFLENBQUMsTUFBTSxDQUFDLElBQVIsRUFBYyxTQUFTLEtBQUssTUFBZCxHQUF1QixNQUFNLENBQUMsUUFBOUIsR0FBeUMsUUFDaEUsU0FBUyxLQUFLLE9BRGtELEdBQ3hDLE1BQU0sQ0FBQyxTQURpQyxHQUN0QixRQUMzQyxTQUFTLEtBQUssZUFENkIsR0FDWCxNQUFNLENBQUMsZ0JBREksR0FDZSxJQUZoRCxFQUVzRCxLQUZ0RCxDQUFSO0FBRXNFLElBQUEsTUFBTSxFQUFDO0FBRjdFLEdBQUwsRUFHQyxPQUFBLENBQUEsT0FBQSxDQUFBLGFBQUEsQ0FBQyxZQUFBLENBQUEsVUFBRCxFQUFXLHVCQUFBO0FBQUMsSUFBQSxZQUFZLEVBQUU7QUFBZixHQUFBLEVBQWlDLEtBQWpDLENBQVgsQ0FIRCxDQUZEO0FBUUEsQ0FaWTs7QUFjYixPQUFBLENBQUEsV0FBQSxDQUFZLFlBQVosR0FBMkI7QUFDMUIsRUFBQSxTQUFTLEVBQUU7QUFEZSxDQUEzQjs7QUFJQSxPQUFBLENBQUEsV0FBQSxDQUFZLGFBQVosR0FBNEIsVUFBQyxLQUFEO0FBQUEsU0FBc0M7QUFDakUsSUFBQSxrQkFBa0IsRUFBRTtBQUNuQixNQUFBLFVBQVUsRUFBRSxLQUFLLENBQUMsT0FBTixDQUFjLElBQWQsR0FBcUI7QUFEZCxLQUQ2QztBQUlqRSxJQUFBLG1CQUFtQixFQUFFO0FBQ3BCLE1BQUEsV0FBVyxFQUFFLEtBQUssQ0FBQyxPQUFOLENBQWMsSUFBZCxHQUFxQjtBQURkLEtBSjRDO0FBT2pFLElBQUEsa0JBQWtCLEVBQUU7QUFDbkIsTUFBQSxXQUFXLEVBQUUsS0FBSyxDQUFDLE9BQU4sQ0FBYyxJQUFkLEdBQXFCO0FBRGYsS0FQNkM7QUFVakUsSUFBQSxpQkFBaUIsRUFBRTtBQUNsQixNQUFBLFVBQVUsRUFBRSxLQUFLLENBQUMsT0FBTixDQUFjLElBQWQsR0FBcUI7QUFEZixLQVY4QztBQWFqRSxJQUFBLHFCQUFxQixFQUFFO0FBQ3RCLE1BQUEsVUFBVSxFQUFFLEtBQUssQ0FBQyxPQUFOLENBQWMsSUFBZCxHQUFxQixDQURYO0FBRXRCLE1BQUEsV0FBVyxFQUFFLEtBQUssQ0FBQyxPQUFOLENBQWMsSUFBZCxHQUFxQjtBQUZaLEtBYjBDO0FBaUJqRSxJQUFBLElBQUksRUFBRTtBQUNMLE1BQUEsYUFBYSxFQUFFLEtBRFY7QUFFSixNQUFBLGVBQWUsRUFBRSxLQUFLLENBQUMsT0FBTixDQUFjLElBQWQsR0FBcUI7QUFGbEMsS0FqQjJEO0FBcUJqRSxJQUFBLFFBQVEsRUFBRTtBQUNULE1BQUEsY0FBYyxFQUFFO0FBRFAsS0FyQnVEO0FBeUJqRSxJQUFBLFNBQVMsRUFBRTtBQUNWLE1BQUEsY0FBYyxFQUFFO0FBRE4sS0F6QnNEO0FBNEJqRSxJQUFBLGdCQUFnQixFQUFFO0FBQ2pCLE1BQUEsY0FBYyxFQUFFO0FBREM7QUE1QitDLEdBQXRDO0FBQUEsQ0FBNUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBGaWVsZFdyYXBwZXJQcm9wcywgRm9ybUZpZWxkcyB9IGZyb20gJy4uL0Zvcm1GaWVsZHMnO1xuaW1wb3J0IHsgU3R5bGVQcm9wLCBWaWV3U3R5bGUgfSBmcm9tICdyZWFjdC1uYXRpdmUnO1xuaW1wb3J0IHsgRm9ybUZpZWxkUHJvcHMgfSBmcm9tICcuL0Zvcm1GaWVsZFByb3BzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBUaGVtZSB9IGZyb20gJ0BibHVlYmFzZS9jb3JlJztcbmltcG9ydCB7IFZpZXcgfSBmcm9tICdAYmx1ZWJhc2UvY29tcG9uZW50cyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRm9ybUFjdGlvbnNTdHlsZXMge1xuXHRmaWVsZENvbnRhaW5lckxlZnQ6IFN0eWxlUHJvcDxWaWV3U3R5bGU+O1xuXHRmaWVsZENvbnRhaW5lclJpZ2h0OiBTdHlsZVByb3A8Vmlld1N0eWxlPjtcblx0ZmllbGRDb250YWluZXJCZXR3ZWVuIDpTdHlsZVByb3A8Vmlld1N0eWxlPjtcblx0dGV4dENvbnRhaW5lclJpZ2h0IDogU3R5bGVQcm9wPFZpZXdTdHlsZT47XG5cdHRleHRDb250YWluZXJMZWZ0IDogU3R5bGVQcm9wPFZpZXdTdHlsZT47XG5cdHJvb3RTcGFjZUJldHdlZW4gOiBTdHlsZVByb3A8Vmlld1N0eWxlPjtcblx0cm9vdDogU3R5bGVQcm9wPFZpZXdTdHlsZT47XG5cdHJvb3RMZWZ0OiBTdHlsZVByb3A8Vmlld1N0eWxlPjtcblx0cm9vdFJpZ2h0OiBTdHlsZVByb3A8Vmlld1N0eWxlPjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBGb3JtQWN0aW9uc1Byb3BzIHtcblx0dHlwZTogJ2FjdGlvbnMnO1xuXHRuYW1lOiBzdHJpbmc7XG5cdHRleHRBbGlnbm1lbnQgOiAnbGVmdCcgfCAncmlnaHQnIDtcblx0ZGlyZWN0aW9uOiAnbGVmdCcgfCAncmlnaHQnIHwgJ3NwYWNlLWJldHdlZW4nO1xuXHRmaWVsZHM6IEZvcm1GaWVsZFByb3BzW107XG5cdHN0eWxlPzogU3R5bGVQcm9wPFZpZXdTdHlsZT47XG5cdHN0eWxlcz86IFBhcnRpYWw8Rm9ybUFjdGlvbnNTdHlsZXM+O1xufVxuXG5cbmNvbnN0IEZpZWxkV3JhcHBlciA9ICh7IGZpZWxkLCBwYXJlbnQsY2hpbGRyZW4gfTogRmllbGRXcmFwcGVyUHJvcHMpID0+IHtcblxuXHRjb25zdCB7IGRpcmVjdGlvbiwgc3R5bGVzLCBzdHlsZSwgdGV4dEFsaWdubWVudCB9ID0gcGFyZW50O1xuXHRkZWJ1Z2dlcjtcblxuXHRyZXR1cm4gKFxuXHRcdDxWaWV3XG5cdFx0XHRrZXk9e2ZpZWxkLm5hbWV9XG5cdFx0XHRzdHlsZT17W2RpcmVjdGlvbiA9PT0gJ2xlZnQnID8gc3R5bGVzLmZpZWxkQ29udGFpbmVyTGVmdCA6IG51bGwgXG5cdFx0XHR8fCBkaXJlY3Rpb24gPT09J3JpZ2h0JyA/IHN0eWxlcy5maWVsZENvbnRhaW5lclJpZ2h0IDpudWxsXG5cdFx0XHR8fCBkaXJlY3Rpb24gPT09ICdzcGFjZS1iZXR3ZWVuJyA/IHN0eWxlcy5maWVsZENvbnRhaW5lckJldHdlZW4gOiBudWxsXG5cdFx0XHR8fCB0ZXh0QWxpZ25tZW50ID09PSAnbGVmdCcgPyBzdHlsZXMudGV4dENvbnRhaW5lckxlZnQgOm51bGxcblx0XHRcdHx8IHRleHRBbGlnbm1lbnQgPT09ICdyaWdodCcgPyBzdHlsZXMudGV4dENvbnRhaW5lclJpZ2h0Om51bGwsIHN0eWxlIF19XG5cdFx0PlxuXHRcdHtjaGlsZHJlbn1cblx0XHQ8L1ZpZXc+XG5cdCk7XG59O1xuXG4vKipcbiAqIEEgY29tcG9uZW50IHRoYXQgcmVuZGVycyBmb3JtIGFjdGlvbnMsIGkuZS4gc3VibWl0IG9yIHJlc2V0IGJ1dHRvbnNcbiAqIEBwYXJhbSBwcm9wc1xuICovXG5leHBvcnQgY29uc3QgRm9ybUFjdGlvbnMgPSAocHJvcHM6IEZvcm1BY3Rpb25zUHJvcHMpID0+IHtcblxuXHRjb25zdCB7IGRpcmVjdGlvbiwgc3R5bGUsIHN0eWxlczogX3N0eWxlcyB9ID0gcHJvcHM7XG5cdGNvbnN0IHN0eWxlcyA9IF9zdHlsZXMgYXMgRm9ybUFjdGlvbnNTdHlsZXM7XG5cdHJldHVybiAoXG5cdFx0XG5cdFx0PFZpZXcgc3R5bGU9e1tzdHlsZXMucm9vdCwgZGlyZWN0aW9uID09PSAnbGVmdCcgPyBzdHlsZXMucm9vdExlZnQgOiBudWxsIFxuXHRcdHx8ICBkaXJlY3Rpb24gPT09ICdyaWdodCcgPyBzdHlsZXMucm9vdFJpZ2h0IDpudWxsIFxuXHRcdHx8IGRpcmVjdGlvbiA9PT0gJ3NwYWNlLWJldHdlZW4nID8gc3R5bGVzLnJvb3RTcGFjZUJldHdlZW4gOiBudWxsLCBzdHlsZV19IHRlc3RJRD1cImZvcm0tYWN0aW9uc1wiPlxuXHRcdFx0PEZvcm1GaWVsZHMgRmllbGRXcmFwcGVyPXtGaWVsZFdyYXBwZXJ9IHsuLi5wcm9wc30gIC8+XG5cdFx0PC9WaWV3PlxuXHQpO1xufTtcblxuRm9ybUFjdGlvbnMuZGVmYXVsdFByb3BzID0ge1xuXHRkaXJlY3Rpb246ICdyaWdodCdcbn07XG5cbkZvcm1BY3Rpb25zLmRlZmF1bHRTdHlsZXMgPSAodGhlbWU6IFRoZW1lKTogRm9ybUFjdGlvbnNTdHlsZXMgPT4gKHtcblx0ZmllbGRDb250YWluZXJMZWZ0OiB7XG5cdFx0bWFyZ2luTGVmdDogdGhlbWUuc3BhY2luZy51bml0ICogMCxcblx0fSxcblx0ZmllbGRDb250YWluZXJSaWdodDoge1xuXHRcdG1hcmdpblJpZ2h0OiB0aGVtZS5zcGFjaW5nLnVuaXQgKiAwLFxuXHR9LFxuXHR0ZXh0Q29udGFpbmVyUmlnaHQ6IHtcblx0XHRtYXJnaW5SaWdodDogdGhlbWUuc3BhY2luZy51bml0ICogMixcblx0fSxcblx0dGV4dENvbnRhaW5lckxlZnQ6IHtcblx0XHRtYXJnaW5MZWZ0OiB0aGVtZS5zcGFjaW5nLnVuaXQgKiAyLFxuXHR9LFxuXHRmaWVsZENvbnRhaW5lckJldHdlZW4gOntcblx0XHRtYXJnaW5MZWZ0OiB0aGVtZS5zcGFjaW5nLnVuaXQgKiAwLFxuXHRcdG1hcmdpblJpZ2h0OiB0aGVtZS5zcGFjaW5nLnVuaXQgKiAwLFxuXHR9LFxuXHRyb290OiB7XG5cdFx0ZmxleERpcmVjdGlvbjogJ3JvdycsXG5cdFx0IHBhZGRpbmdWZXJ0aWNhbDogdGhlbWUuc3BhY2luZy51bml0ICogMixcblx0fSxcblx0cm9vdExlZnQ6IHtcblx0XHRqdXN0aWZ5Q29udGVudDogJ2ZsZXgtc3RhcnQnLFxuXHRcdFxuXHR9LFxuXHRyb290UmlnaHQ6IHtcblx0XHRqdXN0aWZ5Q29udGVudDogJ2ZsZXgtZW5kJyxcblx0fSxcblx0cm9vdFNwYWNlQmV0d2Vlbjoge1xuXHRcdGp1c3RpZnlDb250ZW50OiAnc3BhY2UtYmV0d2VlbicsXG5cdH1cbn0pOyJdfQ==
c57bc80dee7e5b5895f0abd93bcb1f79
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

var core_1 = require("@bluebase/core");

var formik_1 = require("formik");

var plugin_material_ui_1 = tslib_1.__importDefault(require("@bluebase/plugin-material-ui"));

var index_1 = tslib_1.__importDefault(require("../../../index"));

var react_1 = tslib_1.__importDefault(require("react"));

var enzyme_1 = require("enzyme");

var enzyme_async_helpers_1 = require("enzyme-async-helpers");

var components_1 = require("@bluebase/components");

var deepmerge_1 = tslib_1.__importDefault(require("deepmerge"));

var fieldProps = {
  direction: 'right',
  name: 'form-actions',
  type: 'actions',
  fields: [{
    name: 'reset',
    type: 'reset',
    title: 'babajee',
    nested: true
  }, {
    name: 'submit',
    title: 'Login',
    type: 'submit'
  }]
};
var initialValues = {};
describe('FormActions', function () {
  it('should render all form fields in the schema', function _callee() {
    var onSubmit, FormActions, component, root, rootStyles, childStyles;
    return _regenerator.default.async(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            onSubmit = jest.fn();
            FormActions = components_1.getComponent('FormActions');
            component = enzyme_1.mount(react_1.default.createElement(core_1.BlueBaseApp, {
              plugins: [index_1.default, plugin_material_ui_1.default]
            }, react_1.default.createElement(formik_1.Formik, {
              initialValues: initialValues,
              onSubmit: onSubmit
            }, react_1.default.createElement(FormActions, (0, _extends2.default)({}, fieldProps)))));
            _context.next = 5;
            return _regenerator.default.awrap(enzyme_async_helpers_1.waitForElement(component, FormActions));

          case 5:
            root = component.find('[testID="form-actions"]').first().prop('style');
            rootStyles = deepmerge_1.default.all(root.filter(function (x) {
              return !!x;
            }));
            childStyles = component.find('FieldWrapper View').first().prop('style');
            expect(rootStyles.justifyContent).toBe('flex-end');
            expect(childStyles.marginRight).toBe(16);

          case 10:
          case "end":
            return _context.stop();
        }
      }
    });
  });
  it('should render all form fields in the schema', function _callee2() {
    var onSubmit, FormActions, component, root, rootStyles, childStyles;
    return _regenerator.default.async(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            onSubmit = jest.fn();
            FormActions = components_1.getComponent('FormActions');
            component = enzyme_1.mount(react_1.default.createElement(core_1.BlueBaseApp, {
              plugins: [index_1.default, plugin_material_ui_1.default]
            }, react_1.default.createElement(formik_1.Formik, {
              initialValues: initialValues,
              onSubmit: onSubmit
            }, react_1.default.createElement(FormActions, (0, _extends2.default)({}, fieldProps, {
              direction: "left"
            })))));
            _context2.next = 5;
            return _regenerator.default.awrap(enzyme_async_helpers_1.waitForElement(component, FormActions));

          case 5:
            root = component.find('[testID="form-actions"]').first().prop('style');
            rootStyles = deepmerge_1.default.all(root.filter(function (x) {
              return !!x;
            }));
            childStyles = component.find('FieldWrapper View').first().prop('style');
            expect(rootStyles.justifyContent).toBe('flex-start');
            expect(childStyles.marginLeft).toBe(16);

          case 10:
          case "end":
            return _context2.stop();
        }
      }
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL211enphbWlsL0RvY3VtZW50cy9ibHVlYmFzZS9wbHVnaW4tanNvbi1zY2hlbWEtY29tcG9uZW50cy9zcmMvSnNvbkZvcm0vRmllbGRzL19fdGVzdHNfXy9Gb3JtQWN0aW9ucy50ZXN0LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFBLElBQUEsTUFBQSxHQUFBLE9BQUEsQ0FBQSxnQkFBQSxDQUFBOztBQUNBLElBQUEsUUFBQSxHQUFBLE9BQUEsQ0FBQSxRQUFBLENBQUE7O0FBQ0EsSUFBQSxvQkFBQSxHQUFBLE9BQUEsQ0FBQSxlQUFBLENBQUEsT0FBQSxDQUFBLDhCQUFBLENBQUEsQ0FBQTs7QUFDQSxJQUFBLE9BQUEsR0FBQSxPQUFBLENBQUEsZUFBQSxDQUFBLE9BQUEsQ0FBQSxnQkFBQSxDQUFBLENBQUE7O0FBQ0EsSUFBQSxPQUFBLEdBQUEsT0FBQSxDQUFBLGVBQUEsQ0FBQSxPQUFBLENBQUEsT0FBQSxDQUFBLENBQUE7O0FBQ0EsSUFBQSxRQUFBLEdBQUEsT0FBQSxDQUFBLFFBQUEsQ0FBQTs7QUFDQSxJQUFBLHNCQUFBLEdBQUEsT0FBQSxDQUFBLHNCQUFBLENBQUE7O0FBQ0EsSUFBQSxZQUFBLEdBQUEsT0FBQSxDQUFBLHNCQUFBLENBQUE7O0FBQ0EsSUFBQSxXQUFBLEdBQUEsT0FBQSxDQUFBLGVBQUEsQ0FBQSxPQUFBLENBQUEsV0FBQSxDQUFBLENBQUE7O0FBR0EsSUFBTSxVQUFVLEdBQUc7QUFDbEIsRUFBQSxTQUFTLEVBQUUsT0FETztBQUVsQixFQUFBLElBQUksRUFBRSxjQUZZO0FBR2xCLEVBQUEsSUFBSSxFQUFFLFNBSFk7QUFLbEIsRUFBQSxNQUFNLEVBQUUsQ0FBQztBQUNSLElBQUEsSUFBSSxFQUFFLE9BREU7QUFFUixJQUFBLElBQUksRUFBRSxPQUZFO0FBR1IsSUFBQSxLQUFLLEVBQUMsU0FIRTtBQUlSLElBQUEsTUFBTSxFQUFHO0FBSkQsR0FBRCxFQU9QO0FBQ0EsSUFBQSxJ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QUFBO0FBQUEsOENBYTNDLHNCQUFBLENBQUEsY0FBQSxDQUFlLFNBQWYsRUFBaUMsV0FBakMsQ0FiMkM7O0FBQUE7QUFpQjNDLFlBQUEsSUFqQjJDLEdBaUIvQixTQUFTLENBQUMsSUFBVixDQUFlLHlCQUFmLEVBQTBDLEtBQTFDLEdBQWtELElBQWxELENBQXVELE9BQXZELENBakIrQjtBQWtCM0MsWUFBQSxVQWxCMkMsR0FrQnpCLFdBQUEsQ0FBQSxPQUFBLENBQVUsR0FBVixDQUFjLElBQUksQ0FBQyxNQUFMLENBQVksVUFBQyxDQUFEO0FBQUEscUJBQVksQ0FBQyxDQUFDLENBQWQ7QUFBQSxhQUFaLENBQWQsQ0FsQnlCO0FBbUIzQyxZQUFBLFdBbkIyQyxHQW1CeEIsU0FBUyxDQUFDLElBQVYsQ0FBZSxtQkFBZixFQUFvQyxLQUFwQyxHQUE0QyxJQUE1QyxDQUFpRCxPQUFqRCxDQW5Cd0I7QUFzQmpELFlBQUEsTUFBTSxDQUFDLFVBQVUsQ0FBQyxjQUFaLENBQU4sQ0FBa0MsSUFBbEMsQ0FBdUMsWUFBdkM7QUFDQSxZQUFBLE1BQU0sQ0FBQyxXQUFXLENBQUMsVUFBYixDQUFOLENBQStCLElBQS9CLENBQW9DLEVBQXBDOztBQXZCaUQ7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsR0FBaEQsQ0FBRjtBQXlCQSxDQXZETyxDQUFSIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmx1ZUJhc2VBcHAgfSBmcm9tICdAYmx1ZWJhc2UvY29yZSc7XG5pbXBvcnQgeyBGb3JtaWsgfSBmcm9tICdmb3JtaWsnO1xuaW1wb3J0IE1hdGVyaWFsVUlQbHVnaW4gZnJvbSAnQGJsdWViYXNlL3BsdWdpbi1tYXRlcmlhbC11aSc7XG5pbXBvcnQgUGx1Z2luIGZyb20gJy4uLy4uLy4uL2luZGV4JztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBtb3VudCB9IGZyb20gJ2VuenltZSc7XG5pbXBvcnQgeyB3YWl0Rm9yRWxlbWVudCB9IGZyb20gJ2VuenltZS1hc3luYy1oZWxwZXJzJztcbmltcG9ydCB7IGdldENvbXBvbmVudCB9IGZyb20gJ0BibHVlYmFzZS9jb21wb25lbnRzJztcbmltcG9ydCBkZWVwbWVyZ2UgZnJvbSAnZGVlcG1lcmdlJztcblxuXG5jb25zdCBmaWVsZFByb3BzID0ge1xuXHRkaXJlY3Rpb246ICdyaWdodCcsXG5cdG5hbWU6ICdmb3JtLWFjdGlvbnMnLFxuXHR0eXBlOiAnYWN0aW9ucycsXG5cblx0ZmllbGRzOiBbe1xuXHRcdG5hbWU6ICdyZXNldCcsXG5cdFx0dHlwZTogJ3Jlc2V0Jyxcblx0XHR0aXRsZTonYmFiYWplZScsXG5cdFx0bmVzdGVkIDogdHJ1ZSxcblxuXHR9LFxuXHQge1xuXHRcdG5hbWU6ICdzdWJtaXQnLFxuXHRcdHRpdGxlOiAnTG9naW4nLFxuXHRcdHR5cGU6ICdzdWJtaXQnLFxuXHR9XG5dXG59O1xuXG5jb25zdCBpbml0aWFsVmFsdWVzID0ge1xufTtcblxuXG5kZXNjcmliZSgnRm9ybUFjdGlvbnMnLCAoKSA9PiB7XG5cblx0aXQoJ3Nob3VsZCByZW5kZXIgYWxsIGZvcm0gZmllbGRzIGluIHRoZSBzY2hlbWEnLCBhc3luYyAoKSA9PiB7XG5cblx0XHRjb25zdCBvblN1Ym1pdCA9IGplc3QuZm4oKTtcblxuXHRcdGNvbnN0IEZvcm1BY3Rpb25zID0gZ2V0Q29tcG9uZW50KCdGb3JtQWN0aW9ucycpO1xuXG5cdFx0Y29uc3QgY29tcG9uZW50ID0gbW91bnQoXG5cdFx0XHQ8Qmx1ZUJhc2VBcHAgcGx1Z2lucz17W1BsdWdpbiwgTWF0ZXJpYWxVSVBsdWdpbl19PlxuXHRcdFx0XHQ8Rm9ybWlrIGluaXRpYWxWYWx1ZXM9e2luaXRpYWxWYWx1ZXN9IG9uU3VibWl0PXtvblN1Ym1pdH0+XG5cdFx0XHRcdFx0PEZvcm1BY3Rpb25zIHsuLi5maWVsZFByb3BzIGFzIGFueX0gLz5cblx0XHRcdFx0PC9Gb3JtaWs+XG5cdFx0XHQ8L0JsdWVCYXNlQXBwPlxuXHRcdCk7XG5cblx0XHRhd2FpdCB3YWl0Rm9yRWxlbWVudChjb21wb25lbnQgYXMgYW55LCBGb3JtQWN0aW9ucyk7XG5cblx0XHQvLyBleHBlY3QoY29tcG9uZW50KS50b01hdGNoU25hcHNob3QoKTtcblxuXHRcdGNvbnN0IHJvb3Q6IGFueSA9IGNvbXBvbmVudC5maW5kKCdbdGVzdElEPVwiZm9ybS1hY3Rpb25zXCJdJykuZmlyc3QoKS5wcm9wKCdzdHlsZScpO1xuXHRcdGNvbnN0IHJvb3RTdHlsZXM6IGFueSA9IGRlZXBtZXJnZS5hbGwocm9vdC5maWx0ZXIoKHg6IGFueSkgPT4gISF4KSk7XG5cdFx0IGNvbnN0IGNoaWxkU3R5bGVzOiBhbnkgPSBjb21wb25lbnQuZmluZCgnRmllbGRXcmFwcGVyIFZpZXcnKS5maXJzdCgpLnByb3AoJ3N0eWxlJyk7XG5cdFx0Ly8gQ2hlY2sgZmllbGRzXG5cdFx0ZXhwZWN0KHJvb3RTdHlsZXMuanVzdGlmeUNvbnRlbnQpLnRvQmUoJ2ZsZXgtZW5kJyk7XG5cdFx0IGV4cGVjdChjaGlsZFN0eWxlcy5tYXJnaW5SaWdodCkudG9CZSgxNik7XG5cdFx0XG5cdH0pO1xuXG5cblx0aXQoJ3Nob3VsZCByZW5kZXIgYWxsIGZvcm0gZmllbGRzIGluIHRoZSBzY2hlbWEnLCBhc3luYyAoKSA9PiB7XG5cblx0XHRjb25zdCBvblN1Ym1pdCA9IGplc3QuZm4oKTtcblx0XHRjb25zdCBGb3JtQWN0aW9ucyA9IGdldENvbXBvbmVudCgnRm9ybUFjdGlvbnMnKTtcblxuXHRcdGNvbnN0IGNvbXBvbmVudCA9IG1vdW50KFxuXHRcdFx0PEJsdWVCYXNlQXBwIHBsdWdpbnM9e1tQbHVnaW4sIE1hdGVyaWFsVUlQbHVnaW5dfT5cblx0XHRcdFx0PEZvcm1payBpbml0aWFsVmFsdWVzPXtpbml0aWFsVmFsdWVzfSBvblN1Ym1pdD17b25TdWJtaXR9PlxuXHRcdFx0XHRcdDxGb3JtQWN0aW9ucyB7Li4uZmllbGRQcm9wcyBhcyBhbnl9IGRpcmVjdGlvbj1cImxlZnRcIiAvPlxuXHRcdFx0XHQ8L0Zvcm1paz5cblx0XHRcdDwvQmx1ZUJhc2VBcHA+XG5cdFx0KTtcblxuXHRcdGF3YWl0IHdhaXRGb3JFbGVtZW50KGNvbXBvbmVudCBhcyBhbnksIEZvcm1BY3Rpb25zKTtcblxuXHRcdCAvL2V4cGVjdChjb21wb25lbnQpLnRvTWF0Y2hTbmFwc2hvdCgpO1xuXG5cdFx0Y29uc3Qgcm9vdDogYW55ID0gY29tcG9uZW50LmZpbmQoJ1t0ZXN0SUQ9XCJmb3JtLWFjdGlvbnNcIl0nKS5maXJzdCgpLnByb3AoJ3N0eWxlJyk7XG5cdFx0Y29uc3Qgcm9vdFN0eWxlczogYW55ID0gZGVlcG1lcmdlLmFsbChyb290LmZpbHRlcigoeDogYW55KSA9PiAhIXgpKTtcblx0XHRjb25zdCBjaGlsZFN0eWxlczogYW55ID0gY29tcG9uZW50LmZpbmQoJ0ZpZWxkV3JhcHBlciBWaWV3JykuZmlyc3QoKS5wcm9wKCdzdHlsZScpO1xuXG5cdFx0Ly8gQ2hlY2sgZmllbGRzXG5cdFx0ZXhwZWN0KHJvb3RTdHlsZXMuanVzdGlmeUNvbnRlbnQpLnRvQmUoJ2ZsZXgtc3RhcnQnKTtcblx0XHRleHBlY3QoY2hpbGRTdHlsZXMubWFyZ2luTGVmdCkudG9CZSgxNik7XG5cdH0pO1xufSk7XG4iXX0=
0cf2e2b9a6315d50cde63ecb536b1006
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

var core_1 = require("@bluebase/core");

var FormRangeInput_1 = require("../FormRangeInput");

var formik_1 = require("formik");

var index_1 = tslib_1.__importDefault(require("../../../index"));

var react_1 = tslib_1.__importDefault(require("react"));

var enzyme_1 = require("enzyme");

var enzyme_async_helpers_1 = require("enzyme-async-helpers");

var fieldProps = {
  label: 'Temp',
  max: 32,
  min: 16,
  name: 'temp',
  step: 1,
  type: 'range'
};
var initialValues = {
  'temp': 26
};
describe('FormRangeInput', function () {
  it('should render a slider with value 26', function _callee() {
    var onSubmit, component;
    return _regenerator.default.async(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            onSubmit = jest.fn();
            component = enzyme_1.mount(react_1.default.createElement(core_1.BlueBaseApp, {
              plugins: [index_1.default]
            }, react_1.default.createElement(formik_1.Formik, {
              initialValues: initialValues,
              onSubmit: onSubmit
            }, react_1.default.createElement(FormRangeInput_1.FormRangeInput, (0, _extends2.default)({}, fieldProps)))));
            _context.next = 4;
            return _regenerator.default.awrap(enzyme_async_helpers_1.waitForElement(component, FormRangeInput_1.FormRangeInput));

          case 4:
            expect(component.find('Slider').last().prop('name')).toBe('temp');
            expect(component.find('Slider').last().prop('value')).toBe(26);

          case 6:
          case "end":
            return _context.stop();
        }
      }
    });
  });
  it('should update slider value from onValueChange callback with null', function _callee2() {
    var onSubmit, component, SliderComponent, onValueChange;
    return _regenerator.default.async(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            onSubmit = jest.fn();
            component = enzyme_1.mount(react_1.default.createElement(core_1.BlueBaseApp, {
              plugins: [index_1.default]
            }, react_1.default.createElement(formik_1.Formik, {
              initialValues: initialValues,
              onSubmit: onSubmit
            }, react_1.default.createElement(FormRangeInput_1.FormRangeInput, (0, _extends2.default)({}, fieldProps)))));
            _context2.next = 4;
            return _regenerator.default.awrap(enzyme_async_helpers_1.waitForElement(component, FormRangeInput_1.FormRangeInput));

          case 4:
            SliderComponent = component.find('Slider').last();
            expect(SliderComponent.prop('name')).toBe('temp');
            expect(SliderComponent.prop('value')).toBe(26);
            onValueChange = SliderComponent.prop('onValueChange');
            onValueChange(null);
            component.update();
            SliderComponent = component.find('Slider').first();
            expect(SliderComponent.prop('name')).toBe('temp');
            expect(SliderComponent.prop('value')).toBe(null);

          case 13:
          case "end":
            return _context2.stop();
        }
      }
    });
  });
  it('should update slider value from onValueChange callback with value', function _callee3() {
    var onSubmit, component, SliderComponent, onValueChange;
    return _regenerator.default.async(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            onSubmit = jest.fn();
            component = enzyme_1.mount(react_1.default.createElement(core_1.BlueBaseApp, {
              plugins: [index_1.default]
            }, react_1.default.createElement(formik_1.Formik, {
              initialValues: initialValues,
              onSubmit: onSubmit
            }, react_1.default.createElement(FormRangeInput_1.FormRangeInput, (0, _extends2.default)({
              onValueChange: function onValueChange() {}
            }, fieldProps)))));
            _context3.next = 4;
            return _regenerator.default.awrap(enzyme_async_helpers_1.waitForElement(component, FormRangeInput_1.FormRangeInput));

          case 4:
            SliderComponent = component.find('Slider').last();
            expect(SliderComponent.prop('name')).toBe('temp');
            expect(SliderComponent.prop('value')).toBe(26);
            onValueChange = SliderComponent.prop('onValueChange');
            onValueChange(20);
            component.update();
            SliderComponent = component.find('Slider').first();
            expect(SliderComponent.prop('name')).toBe('temp');
            expect(SliderComponent.prop('value')).toBe(20);

          case 13:
          case "end":
            return _context3.stop();
        }
      }
    });
  });
  it('should update slider value from onValueChange callback with null', function _callee4() {
    var onSubmit, component, SliderComponent, onValueChange;
    return _regenerator.default.async(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            onSubmit = jest.fn();
            component = enzyme_1.mount(react_1.default.createElement(core_1.BlueBaseApp, {
              plugins: [index_1.default]
            }, react_1.default.createElement(formik_1.Formik, {
              initialValues: initialValues,
              onSubmit: onSubmit
            }, react_1.default.createElement(FormRangeInput_1.FormRangeInput, (0, _extends2.default)({
              onValueChange: function onValueChange() {
                return null;
              }
            }, fieldProps)))));
            _context4.next = 4;
            return _regenerator.default.awrap(enzyme_async_helpers_1.waitForElement(component, FormRangeInput_1.FormRangeInput));

          case 4:
            SliderComponent = component.find('Slider').last();
            expect(SliderComponent.prop('name')).toBe('temp');
            expect(SliderComponent.prop('value')).toBe(26);
            onValueChange = SliderComponent.prop('onValueChange');
            onValueChange(20);
            component.update();
            SliderComponent = component.find('Slider').first();
            expect(SliderComponent.prop('name')).toBe('temp');
            expect(SliderComponent.prop('value')).toBe(20);

          case 13:
          case "end":
            return _context4.stop();
        }
      }
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
8f1a15f50a6c1eaea0278d996df05456
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

var core_1 = require("@bluebase/core");

var formik_1 = require("formik");

var plugin_material_ui_1 = tslib_1.__importDefault(require("@bluebase/plugin-material-ui"));

var index_1 = tslib_1.__importDefault(require("../../../index"));

var react_1 = tslib_1.__importDefault(require("react"));

var enzyme_1 = require("enzyme");

var enzyme_async_helpers_1 = require("enzyme-async-helpers");

var components_1 = require("@bluebase/components");

var deepmerge_1 = tslib_1.__importDefault(require("deepmerge"));

var fieldProps = {
  direction: 'right',
  name: 'form-actions',
  type: 'actions',
  style: {
    flex: 1
  },
  fields: [{
    name: 'reset',
    type: 'reset',
    title: 'babajee',
    nested: true
  }]
};
var initialValues = {};
describe('FormActions', function () {
  it('should render all form fields in the schema', function _callee() {
    var onSubmit, FormActions, component, root, rootStyles, childStyles;
    return _regenerator.default.async(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            onSubmit = jest.fn();
            FormActions = components_1.getComponent('FormActions');
            component = enzyme_1.mount(react_1.default.createElement(core_1.BlueBaseApp, {
              plugins: [index_1.default, plugin_material_ui_1.default]
            }, react_1.default.createElement(formik_1.Formik, {
              initialValues: initialValues,
              onSubmit: onSubmit
            }, react_1.default.createElement(FormActions, (0, _extends2.default)({}, fieldProps)))));
            _context.next = 5;
            return _regenerator.default.awrap(enzyme_async_helpers_1.waitForElement(component, FormActions));

          case 5:
            root = component.find('[testID="form-actions"]').first().prop('style');
            rootStyles = deepmerge_1.default.all(root.filter(function (x) {
              return !!x;
            }));
            childStyles = component.find('FieldWrapper View').first().prop('style');
            expect(rootStyles.justifyContent).toBe('flex-end');
            expect(childStyles.marginRight).toBe(16);

          case 10:
          case "end":
            return _context.stop();
        }
      }
    });
  });
  it('should render all form fields in the schema', function _callee2() {
    var onSubmit, FormActions, component, root, rootStyles, childStyles;
    return _regenerator.default.async(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            onSubmit = jest.fn();
            FormActions = components_1.getComponent('FormActions');
            component = enzyme_1.mount(react_1.default.createElement(core_1.BlueBaseApp, {
              plugins: [index_1.default, plugin_material_ui_1.default]
            }, react_1.default.createElement(formik_1.Formik, {
              initialValues: initialValues,
              onSubmit: onSubmit
            }, react_1.default.createElement(FormActions, (0, _extends2.default)({}, fieldProps, {
              direction: "left"
            })))));
            _context2.next = 5;
            return _regenerator.default.awrap(enzyme_async_helpers_1.waitForElement(component, FormActions));

          case 5:
            root = component.find('[testID="form-actions"]').first().prop('style');
            rootStyles = deepmerge_1.default.all(root.filter(function (x) {
              return !!x;
            }));
            childStyles = component.find('FieldWrapper View').first().prop('style');
            expect(rootStyles.justifyContent).toBe('flex-start');
            expect(childStyles.marginLeft).toBe(16);

          case 10:
          case "end":
            return _context2.stop();
        }
      }
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL211enphbWlsL0RvY3VtZW50cy9ibHVlYmFzZS9wbHVnaW4tanNvbi1zY2hlbWEtY29tcG9uZW50cy9zcmMvSnNvbkZvcm0vRmllbGRzL19fdGVzdHNfXy9Gb3JtQWN0aW9ucy50ZXN0LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFBLElBQUEsTUFBQSxHQUFBLE9BQUEsQ0FBQSxnQkFBQSxDQUFBOztBQUNBLElBQUEsUUFBQSxHQUFBLE9BQUEsQ0FBQSxRQUFBLENBQUE7O0FBQ0EsSUFBQSxvQkFBQSxHQUFBLE9BQUEsQ0FBQSxlQUFBLENBQUEsT0FBQSxDQUFBLDhCQUFBLENBQUEsQ0FBQTs7QUFDQSxJQUFBLE9BQUEsR0FBQSxPQUFBLENBQUEsZUFBQSxDQUFBLE9BQUEsQ0FBQSxnQkFBQSxDQUFBLENBQUE7O0FBQ0EsSUFBQSxPQUFBLEdBQUEsT0FBQSxDQUFBLGVBQUEsQ0FBQSxPQUFBLENBQUEsT0FBQSxDQUFBLENBQUE7O0FBQ0EsSUFBQSxRQUFBLEdBQUEsT0FBQSxDQUFBLFFBQUEsQ0FBQTs7QUFDQSxJQUFBLHNCQUFBLEdBQUEsT0FBQSxDQUFBLHNCQUFBLENBQUE7O0FBQ0EsSUFBQSxZQUFBLEdBQUEsT0FBQSxDQUFBLHNCQUFBLENBQUE7O0FBQ0EsSUFBQSxXQUFBLEdBQUEsT0FBQSxDQUFBLGVBQUEsQ0FBQSxPQUFBLENBQUEsV0FBQSxDQUFBLENBQUE7O0FBR0EsSUFBTSxVQUFVLEdBQUc7QUFDbEIsRUFBQSxTQUFTLEVBQUUsT0FETztBQUVsQixFQUFBLElBQUksRUFBRSxjQUZZO0FBR2xCLEVBQUEsSUFBSSxFQUFFLFNBSFk7QUFJbEIsRUFBQSxLQUFLLEVBQUc7QUFBQyxJQUFBLElBQUksRUFBQztBQUFOLEdBSlU7QUFNbEIsRUFBQSxNQUFNLEVBQUUsQ0FBQztBQUNSLElBQUEsSUFBSSxFQUFFLE9BREU7QUFFUixJQUFBLElBQUksRUFBRSxPQUZFO0FBR1IsSUFBQSxLQUFLLEVBQUMs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QWUsU0FBZixFQUFpQyxXQUFqQyxDQWIyQzs7QUFBQTtBQWlCM0MsWUFBQSxJQWpCMkMsR0FpQi9CLFNBQVMsQ0FBQyxJQUFWLENBQWUseUJBQWYsRUFBMEMsS0FBMUMsR0FBa0QsSUFBbEQsQ0FBdUQsT0FBdkQsQ0FqQitCO0FBa0IzQyxZQUFBLFVBbEIyQyxHQWtCekIsV0FBQSxDQUFBLE9BQUEsQ0FBVSxHQUFWLENBQWMsSUFBSSxDQUFDLE1BQUwsQ0FBWSxVQUFDLENBQUQ7QUFBQSxxQkFBWSxDQUFDLENBQUMsQ0FBZDtBQUFBLGFBQVosQ0FBZCxDQWxCeUI7QUFtQjNDLFlBQUEsV0FuQjJDLEdBbUJ4QixTQUFTLENBQUMsSUFBVixDQUFlLG1CQUFmLEVBQW9DLEtBQXBDLEdBQTRDLElBQTVDLENBQWlELE9BQWpELENBbkJ3QjtBQXNCakQsWUFBQSxNQUFNLENBQUMsVUFBVSxDQUFDLGNBQVosQ0FBTixDQUFrQyxJQUFsQyxDQUF1QyxZQUF2QztBQUNBLFlBQUEsTUFBTSxDQUFDLFdBQVcsQ0FBQyxVQUFiLENBQU4sQ0FBK0IsSUFBL0IsQ0FBb0MsRUFBcEM7O0FBdkJpRDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxHQUFoRCxDQUFGO0FBeUJBLENBdkRPLENBQVIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCbHVlQmFzZUFwcCB9IGZyb20gJ0BibHVlYmFzZS9jb3JlJztcbmltcG9ydCB7IEZvcm1payB9IGZyb20gJ2Zvcm1payc7XG5pbXBvcnQgTWF0ZXJpYWxVSVBsdWdpbiBmcm9tICdAYmx1ZWJhc2UvcGx1Z2luLW1hdGVyaWFsLXVpJztcbmltcG9ydCBQbHVnaW4gZnJvbSAnLi4vLi4vLi4vaW5kZXgnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IG1vdW50IH0gZnJvbSAnZW56eW1lJztcbmltcG9ydCB7IHdhaXRGb3JFbGVtZW50IH0gZnJvbSAnZW56eW1lLWFzeW5jLWhlbHBlcnMnO1xuaW1wb3J0IHsgZ2V0Q29tcG9uZW50IH0gZnJvbSAnQGJsdWViYXNlL2NvbXBvbmVudHMnO1xuaW1wb3J0IGRlZXBtZXJnZSBmcm9tICdkZWVwbWVyZ2UnO1xuXG5cbmNvbnN0IGZpZWxkUHJvcHMgPSB7XG5cdGRpcmVjdGlvbjogJ3JpZ2h0Jyxcblx0bmFtZTogJ2Zvcm0tYWN0aW9ucycsXG5cdHR5cGU6ICdhY3Rpb25zJyxcblx0c3R5bGUgOiB7ZmxleDoxfSxcblxuXHRmaWVsZHM6IFt7XG5cdFx0bmFtZTogJ3Jlc2V0Jyxcblx0XHR0eXBlOiAncmVzZXQnLFxuXHRcdHRpdGxlOidiYWJhamVlJyxcblx0XHRuZXN0ZWQgOiB0cnVlLFxuXG5cdH0sXG5cdC8vICB7XG5cdC8vIFx0bmFtZTogJ3N1Ym1pdCcsXG5cdC8vIFx0dGl0bGU6ICdMb2dpbicsXG5cdC8vIFx0dHlwZTogJ3N1Ym1pdCcsXG5cdC8vIH1cbl1cbn07XG5cbmNvbnN0IGluaXRpYWxWYWx1ZXMgPSB7XG59O1xuXG5cbmRlc2NyaWJlKCdGb3JtQWN0aW9ucycsICgpID0+IHtcblxuXHRpdCgnc2hvdWxkIHJlbmRlciBhbGwgZm9ybSBmaWVsZHMgaW4gdGhlIHNjaGVtYScsIGFzeW5jICgpID0+IHtcblxuXHRcdGNvbnN0IG9uU3VibWl0ID0gamVzdC5mbigpO1xuXG5cdFx0Y29uc3QgRm9ybUFjdGlvbnMgPSBnZXRDb21wb25lbnQoJ0Zvcm1BY3Rpb25zJyk7XG5cblx0XHRjb25zdCBjb21wb25lbnQgPSBtb3VudChcblx0XHRcdDxCbHVlQmFzZUFwcCBwbHVnaW5zPXtbUGx1Z2luLCBNYXRlcmlhbFVJUGx1Z2luXX0+XG5cdFx0XHRcdDxGb3JtaWsgaW5pdGlhbFZhbHVlcz17aW5pdGlhbFZhbHVlc30gb25TdWJtaXQ9e29uU3VibWl0fT5cblx0XHRcdFx0XHQ8Rm9ybUFjdGlvbnMgey4uLmZpZWxkUHJvcHMgYXMgYW55fSAvPlxuXHRcdFx0XHQ8L0Zvcm1paz5cblx0XHRcdDwvQmx1ZUJhc2VBcHA+XG5cdFx0KTtcblxuXHRcdGF3YWl0IHdhaXRGb3JFbGVtZW50KGNvbXBvbmVudCBhcyBhbnksIEZvcm1BY3Rpb25zKTtcblxuXHRcdC8vIGV4cGVjdChjb21wb25lbnQpLnRvTWF0Y2hTbmFwc2hvdCgpO1xuXG5cdFx0Y29uc3Qgcm9vdDogYW55ID0gY29tcG9uZW50LmZpbmQoJ1t0ZXN0SUQ9XCJmb3JtLWFjdGlvbnNcIl0nKS5maXJzdCgpLnByb3AoJ3N0eWxlJyk7XG5cdFx0Y29uc3Qgcm9vdFN0eWxlczogYW55ID0gZGVlcG1lcmdlLmFsbChyb290LmZpbHRlcigoeDogYW55KSA9PiAhIXgpKTtcblx0XHQgY29uc3QgY2hpbGRTdHlsZXM6IGFueSA9IGNvbXBvbmVudC5maW5kKCdGaWVsZFdyYXBwZXIgVmlldycpLmZpcnN0KCkucHJvcCgnc3R5bGUnKTtcblx0XHQvLyBDaGVjayBmaWVsZHNcblx0XHRleHBlY3Qocm9vdFN0eWxlcy5qdXN0aWZ5Q29udGVudCkudG9CZSgnZmxleC1lbmQnKTtcblx0XHQgZXhwZWN0KGNoaWxkU3R5bGVzLm1hcmdpblJpZ2h0KS50b0JlKDE2KTtcblx0XHRcblx0fSk7XG5cblxuXHRpdCgnc2hvdWxkIHJlbmRlciBhbGwgZm9ybSBmaWVsZHMgaW4gdGhlIHNjaGVtYScsIGFzeW5jICgpID0+IHtcblxuXHRcdGNvbnN0IG9uU3VibWl0ID0gamVzdC5mbigpO1xuXHRcdGNvbnN0IEZvcm1BY3Rpb25zID0gZ2V0Q29tcG9uZW50KCdGb3JtQWN0aW9ucycpO1xuXG5cdFx0Y29uc3QgY29tcG9uZW50ID0gbW91bnQoXG5cdFx0XHQ8Qmx1ZUJhc2VBcHAgcGx1Z2lucz17W1BsdWdpbiwgTWF0ZXJpYWxVSVBsdWdpbl19PlxuXHRcdFx0XHQ8Rm9ybWlrIGluaXRpYWxWYWx1ZXM9e2luaXRpYWxWYWx1ZXN9IG9uU3VibWl0PXtvblN1Ym1pdH0+XG5cdFx0XHRcdFx0PEZvcm1BY3Rpb25zIHsuLi5maWVsZFByb3BzIGFzIGFueX0gZGlyZWN0aW9uPVwibGVmdFwiIC8+XG5cdFx0XHRcdDwvRm9ybWlrPlxuXHRcdFx0PC9CbHVlQmFzZUFwcD5cblx0XHQpO1xuXG5cdFx0YXdhaXQgd2FpdEZvckVsZW1lbnQoY29tcG9uZW50IGFzIGFueSwgRm9ybUFjdGlvbnMpO1xuXG5cdFx0IC8vZXhwZWN0KGNvbXBvbmVudCkudG9NYXRjaFNuYXBzaG90KCk7XG5cblx0XHRjb25zdCByb290OiBhbnkgPSBjb21wb25lbnQuZmluZCgnW3Rlc3RJRD1cImZvcm0tYWN0aW9uc1wiXScpLmZpcnN0KCkucHJvcCgnc3R5bGUnKTtcblx0XHRjb25zdCByb290U3R5bGVzOiBhbnkgPSBkZWVwbWVyZ2UuYWxsKHJvb3QuZmlsdGVyKCh4OiBhbnkpID0+ICEheCkpO1xuXHRcdGNvbnN0IGNoaWxkU3R5bGVzOiBhbnkgPSBjb21wb25lbnQuZmluZCgnRmllbGRXcmFwcGVyIFZpZXcnKS5maXJzdCgpLnByb3AoJ3N0eWxlJyk7XG5cblx0XHQvLyBDaGVjayBmaWVsZHNcblx0XHRleHBlY3Qocm9vdFN0eWxlcy5qdXN0aWZ5Q29udGVudCkudG9CZSgnZmxleC1zdGFydCcpO1xuXHRcdGV4cGVjdChjaGlsZFN0eWxlcy5tYXJnaW5MZWZ0KS50b0JlKDE2KTtcblx0fSk7XG59KTtcbiJdfQ==
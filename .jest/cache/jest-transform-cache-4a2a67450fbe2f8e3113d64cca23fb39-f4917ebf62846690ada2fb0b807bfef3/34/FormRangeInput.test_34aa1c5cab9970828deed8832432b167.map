{"version":3,"sources":["/home/muzzamil/Documents/bluebase/plugin-json-schema-components/src/JsonForm/Fields/__tests__/FormRangeInput.test.tsx"],"names":[],"mappings":"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","sourcesContent":["import { BlueBaseApp } from '@bluebase/core';\nimport { FormRangeInput } from '../FormRangeInput';\nimport { Formik } from 'formik';\nimport Plugin from '../../../index';\nimport React from 'react';\nimport { mount } from 'enzyme';\nimport { waitForElement } from 'enzyme-async-helpers';\n\nconst fieldProps = {\n\tlabel: 'Temp',\n\tmax: 32,\n\tmin: 16,\n\tname: 'temp',\n\tstep: 1,\n\ttype: 'range',\n};\n\nconst initialValues = {\n\t'temp': 26,\n};\n\n\ndescribe('FormRangeInput', () => {\n\n\n\tit('should render a slider with value 26', async () => {\n\n\t\tconst onSubmit = jest.fn();\n\n\t\tconst component = mount(\n\t\t\t<BlueBaseApp plugins={[Plugin]}>\n\t\t\t\t<Formik initialValues={initialValues} onSubmit={onSubmit}>\n\t\t\t\t\t<FormRangeInput {...fieldProps as any} />\n\t\t\t\t</Formik>\n\t\t\t</BlueBaseApp>\n\t\t);\n\n\t\tawait waitForElement(component as any, FormRangeInput);\n\n\t\t// expect(component).toMatchSnapshot();\n\n\t\t// Check fields\n\t\texpect(component.find('Slider').last().prop('name')).toBe('temp');\n\t\texpect(component.find('Slider').last().prop('value')).toBe(26);\n\t});\n\t\n\tit('should update slider value from onValueChange callback with no as prop', async () => {\n\n\t\tconst onSubmit = jest.fn();\n\n\t\tconst component = mount(\n\t\t\t<BlueBaseApp plugins={[Plugin]}>\n\t\t\t\t<Formik initialValues={initialValues} onSubmit={onSubmit}>\n\t\t\t\t\t<FormRangeInput {...fieldProps as any} />\n\t\t\t\t</Formik>\n\t\t\t</BlueBaseApp>\n\t\t);\n\n\t\tawait waitForElement(component as any, FormRangeInput);\n\n\t\t// Initial state should be false\n\t\tlet SliderComponent = component.find('Slider').last();\n\n\t\t// Check fields\n\t\texpect(SliderComponent.prop('name')).toBe('temp');\n\t\texpect(SliderComponent.prop('value')).toBe(26);\n\n\t\t// Update State\n\t\tconst onValueChange: any = SliderComponent.prop('onValueChange');\n\n\t\tonValueChange(null);\n\t\tcomponent.update();\n\t\t// expect(component).toMatchSnapshot();\n\n\t\t// New state should be true\n\t\tSliderComponent = component.find('Slider').first();\n\t\texpect(SliderComponent.prop('name')).toBe('temp');\n\t\texpect(SliderComponent.prop('value')).toBe(null);\n\t});\n\n\tit('should update slider value from onValueChange callback as prop', async () => {\n\n\t\tconst onSubmit = jest.fn();\n\n\t\tconst component = mount(\n\t\t\t<BlueBaseApp plugins={[Plugin]}>\n\t\t\t\t<Formik initialValues={initialValues} onSubmit={onSubmit}>\n\t\t\t\t\t<FormRangeInput onValueChange={()=>null} {...fieldProps as any} />\n\t\t\t\t</Formik>\n\t\t\t</BlueBaseApp>\n\t\t);\n\n\t\tawait waitForElement(component as any, FormRangeInput);\n\n\t\t// Initial state should be false\n\t\tlet SliderComponent = component.find('Slider').last();\n\n\t\t// Check fields\n\t\texpect(SliderComponent.prop('name')).toBe('temp');\n\t\texpect(SliderComponent.prop('value')).toBe(26);\n\n\t\t// Update State\n\t\tconst onValueChange: any = SliderComponent.prop('onValueChange');\n\n\t\tonValueChange(20);\n\t\tcomponent.update();\n\t\t// expect(component).toMatchSnapshot();\n\n\t\t// New state should be true\n\t\tSliderComponent = component.find('Slider').first();\n\t\texpect(SliderComponent.prop('name')).toBe('temp');\n\t\texpect(SliderComponent.prop('value')).toBe(20);\n\t});\n\n});\n"]}
7b2cbfb6a9d7c716155430a4650ce638
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

var core_1 = require("@bluebase/core");

var JsonForm_1 = require("../JsonForm");

var index_1 = tslib_1.__importDefault(require("../../index"));

var react_1 = tslib_1.__importDefault(require("react"));

var enzyme_1 = require("enzyme");

var enzyme_async_helpers_1 = require("enzyme-async-helpers");

var fields = [{
  label: 'Username',
  name: 'username',
  required: true,
  type: 'text'
}, {
  schema: {
    component: 'Text',
    text: 'Text Component'
  },
  type: 'component'
}, {
  label: 'Temp',
  max: 32,
  min: 16,
  name: 'temp',
  step: 1,
  type: 'range'
}];
var initialValues = {
  temp: 26,
  username: ''
};
describe('FormFields', function () {
  it('should render all form fields in the schema', function _callee() {
    var onSubmit, component;
    return _regenerator.default.async(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            onSubmit = jest.fn();
            component = enzyme_1.mount(react_1.default.createElement(core_1.BlueBaseApp, {
              plugins: [index_1.default]
            }, react_1.default.createElement(JsonForm_1.JsonForm, {
              schema: {
                fields: fields,
                initialValues: initialValues,
                onSubmit: onSubmit
              }
            })));
            _context.next = 4;
            return _regenerator.default.awrap(enzyme_async_helpers_1.waitForElement(component, JsonForm_1.JsonForm));

          case 4:
            expect(component.find('FormFields').children()).toHaveLength(3);
            expect(component.find('FormFields').childAt(0).prop('name')).toBe('username');
            expect(component.find('FormFields').childAt(1).prop('name')).toBe('1-component');
            expect(component.find('FormFields').childAt(2).prop('name')).toBe('temp');

          case 8:
          case "end":
            return _context.stop();
        }
      }
    });
  });
  it('should hook into the form to modify the schema', function _callee2() {
    var onSubmit, filter, component;
    return _regenerator.default.async(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            onSubmit = jest.fn();

            filter = function filter(schema) {
              schema.fields.push({
                schema: {
                  component: 'Text',
                  text: 'New Injected Text Component'
                },
                type: 'component'
              });
              return schema;
            };

            component = enzyme_1.mount(react_1.default.createElement(core_1.BlueBaseApp, {
              plugins: [index_1.default],
              filters: {
                'pluggable-form': filter
              }
            }, react_1.default.createElement(JsonForm_1.JsonForm, {
              schema: {
                fields: fields,
                initialValues: initialValues,
                onSubmit: onSubmit
              },
              filter: "pluggable-form"
            })));
            _context2.next = 5;
            return _regenerator.default.awrap(enzyme_async_helpers_1.waitForElement(component, JsonForm_1.JsonForm));

          case 5:
            expect(component.find('FormFields').children()).toHaveLength(4);
            expect(component.find('FormFields').childAt(0).prop('name')).toBe('username');
            expect(component.find('FormFields').childAt(1).prop('name')).toBe('1-component');
            expect(component.find('FormFields').childAt(2).prop('name')).toBe('temp');
            expect(component.find('FormFields').childAt(3).prop('name')).toBe('3-component');

          case 10:
          case "end":
            return _context2.stop();
        }
      }
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
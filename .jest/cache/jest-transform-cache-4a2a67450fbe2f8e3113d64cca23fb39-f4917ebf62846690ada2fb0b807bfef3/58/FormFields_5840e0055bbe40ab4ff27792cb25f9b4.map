{"version":3,"sources":["/home/muzzamil/Documents/bluebase/plugin-json-schema-components/src/JsonForm/FormFields.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AACA,IAAA,OAAA,GAAA,OAAA,CAAA,eAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,IAAA,cAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;;IAyBa,U;;;AAMZ,sBAAY,KAAZ,EAAkC;AAAA;;AAAA;AACjC,gHAAM,KAAN;AALO,UAAA,MAAA,GAEJ,EAFI;AAQP,UAAK,WAAL,GAAmB,MAAK,WAAL,CAAiB,IAAjB,6CAAnB;AAJiC;AAKjC;;;;yCAIiB;AAAA;;AAEjB,UAAM,MAAM,GAAG,KAAK,KAAL,CAAW,MAAX,IAAqB,EAApC;AASA,MAAA,MAAM,CAAC,OAAP,CAAe,UAAA,KAAK,EAAG;AACtB,YAAM,IAAI,GAAG,KAAK,CAAC,IAAnB;AACA,QAAA,MAAI,CAAC,MAAL,CAAY,IAAZ,IAAoB,cAAA,CAAA,YAAA,CAAa,IAAb,CAApB;AACA,OAHD;AAKA;;;6BAEK;AAAA;;AAAA,wBAE6B,KAAK,KAFlC;AAAA,UAEG,QAFH,eAEG,QAFH;AAAA,2CAEa,MAFb;AAAA,UAEa,MAFb,mCAEsB,EAFtB;;AAIL,UAAI,QAAJ,EAAc;AACb,eAAO,QAAQ,CAAC,KAAK,WAAN,CAAf;AACA;;AAED,aAAO,MAAM,CAAC,GAAP,CAAW,UAAC,KAAD,EAAQ,KAAR;AAAA,eAAkB,MAAI,CAAC,WAAL,CAAiB,KAAjB,EAAwB,KAAxB,EAA+B,MAAI,CAAC,KAApC,CAAlB;AAAA,OAAX,CAAP;AACA;;;gCAMmB,K,EAAuB,K,EAAe,M,EAAuB;AAAA,UACxE,YADwE,GACvD,KAAK,KADkD,CACxE,YADwE;AAGhF,MAAA,KAAK,CAAC,IAAN,GAAa,KAAK,CAAC,IAAN,IAAiB,KAAjB,SAA0B,KAAK,CAAC,IAA7C;AACA,UAAM,GAAG,GAAG,KAAK,CAAC,IAAlB;AAEA,UAAM,SAAS,GAAG,KAAK,MAAL,CAAY,KAAK,CAAC,IAAlB,CAAlB;AACA,UAAM,SAAS,GAAI,OAAA,CAAA,OAAA,CAAA,aAAA,CAAC,SAAD,EAAU,uBAAA;AAAC,QAAA,GAAG,EAAE;AAAN,OAAA,EAAe,KAAf,CAAV,CAAnB;AAEA,aAAO,YAAY,GACjB,OAAA,CAAA,OAAA,CAAA,aAAA,CAAC,YAAD,EAAa;AAAC,QAAA,GAAG,EAAE,GAAN;AAAW,QAAA,KAAK,EAAE,KAAlB;AAAyB,QAAA,MAAM,EAAE;AAAjC,OAAb,EAAuD,SAAvD,CADiB,GAEjB,SAFF;AAGA;;;EA5D8B,OAAA,CAAA,OAAA,CAAM,S;;AAAtC,OAAA,CAAA,UAAA,GAAA,UAAA","sourcesContent":["import { FormFieldProps } from './Fields';\nimport React from 'react';\nimport { getFormField } from './getFormField';\n\nexport type renderFieldFn = (field: FormFieldProps, index: number, parent: FormFieldsProps) => React.ReactNode;\n\nexport type FieldWrapperProps<T = {}> = {\n\tfield: FormFieldProps;\n\tparent: any;\n\tchildren: React.ReactNode;\n} & T;\n\nexport type FormFieldsProps<T = {}> = {\n\tfields: FormFieldProps[];\n\n\t/** Wrap each field in this component */\n\tFieldWrapper?: React.ComponentType<FieldWrapperProps>;\n\n\t/** If children prop if given, internal rendering mechanism will be ignored. */\n\tchildren?: (renderField: renderFieldFn) => React.ReactNode\n} & T;\n\n/**\n * A component that takes care of field resolution and rendering logic.\n * This component follows the render prop pattern and gives a renderField\n * function as a param.\n */\nexport class FormFields extends React.Component<FormFieldsProps> {\n\n\tprivate fields: {\n\t\t[key: string]: React.ComponentType<any>\n\t} = {};\n\n\tconstructor(props: FormFieldsProps) {\n\t\tsuper(props);\n\n    // This binding is necessary to make `this` work in the callback\n\t\tthis.renderField = this.renderField.bind(this);\n\t}\n\n\t// Before mounting, resolve all components and store them.\n\t// So we don't end up creating a new component during every render\n\tcomponentWillMount() {\n\n\t\tconst fields = this.props.fields || [];\n\n\t\t// // If field map is already created, skip this op\n\t\t// // I wonder, if we could do without this check ðŸ¤”\n\t\t// if (Object.keys(this.fields).length > 0) {\n\t\t// \treturn;\n\t\t// }\n\n\t\t// Resolve fields\n\t\tfields.forEach(field => {\n\t\t\tconst type = field.type;\n\t\t\tthis.fields[type] = getFormField(type);\n\t\t});\n\n\t}\n\n\trender() {\n\n\t\tconst { children, fields = [] } = this.props;\n\n\t\tif (children) {\n\t\t\treturn children(this.renderField);\n\t\t}\n\n\t\treturn fields.map((field, index) => this.renderField(field, index, this.props));\n\t}\n\n\t/**\n\t * Render a single field\n\t * @param field\n\t */\n\tprivate renderField(field: FormFieldProps, index: number, parent: FormFieldsProps) {\n\t\tconst { FieldWrapper } = this.props;\n\n\t\tfield.name = field.name || `${index}-${field.type}`;\n\t\tconst key = field.name;\n\n\t\tconst Component = this.fields[field.type];\n\t\tconst fieldNode =  <Component key={key} {...field} />;\n\n\t\treturn FieldWrapper\n\t\t? <FieldWrapper key={key} field={field} parent={parent}>{fieldNode}</FieldWrapper>\n\t\t: fieldNode;\n\t}\n}"]}
{"version":3,"sources":["/home/muzzamil/Documents/bluebase/plugin-json-schema-components/src/JsonForm/Fields/__tests__/FormSwitchInput.test.tsx"],"names":[],"mappings":"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","sourcesContent":["import { BlueBaseApp } from '@bluebase/core';\nimport { FormSwitchInput } from '../FormSwitchInput';\nimport { Formik  } from 'formik';\nimport Plugin from '../../../index';\nimport React from 'react';\nimport { mount } from 'enzyme';\nimport { waitForElement } from 'enzyme-async-helpers';\n\nconst fieldProps = [{\n\tlabel: 'Auto Login',\n\tname: 'muzamil',\n\ttype: 'switch',\n\tvalue : false,\n\tchecked : true,\n},\n{\n\tlabel: 'Auto Login',\n\tname: 'auto-login',\n\ttype: 'switch',\n\tvalue : true,\n\tchecked : false\n}];\n\ndescribe('FormSwitchInput', () => {\n\n\n\t// it('should a switch with value true', async () => {\n\n\t// \tconst onSubmit = jest.fn();\n\n\t// \tconst component = mount(\n\t// \t\t<BlueBaseApp plugins={[Plugin]}>\n\t// \t\t\t<Formik initialValues={{ 'auto-login': true}} onSubmit={onSubmit} >\n\n\t// \t\t\t\t<FormSwitchInput {...fieldProps[0] as any} />\n\t\t\t\t\t\n\t// \t\t\t</Formik>\n\t// \t\t</BlueBaseApp>\n\t// \t);\n\n\t// \tawait waitForElement(component as any, FormSwitchInput);\n\n\t// \t// expect(component).toMatchSnapshot();\n\n\t// \t// Check fields\n\t// \texpect(component.find('Switch').last().prop('name')).toBe('muzamil');\n\t// \texpect(component.find('Switch').last().prop('checked')).toBe(false);\n\t// \texpect(component.find('Switch').last().prop('value')).toBe(false);\n\t// });\n\n\n\t// it('should a switch with value false', async () => {\n\n\t// \tconst onSubmit = jest.fn();\n\n\t// \tconst component = mount(\n\t// \t\t<BlueBaseApp plugins={[Plugin]}>\n\t// \t\t\t<Formik initialValues={{ 'auto-login': false  }} onSubmit={onSubmit}>\n\t// \t\t\t\t<FormSwitchInput {...fieldProps[1] as any} />\n\t// \t\t\t</Formik>\n\t// \t\t</BlueBaseApp>\n\t// \t);\n\n\t// \tawait waitForElement(component as any, FormSwitchInput);\n\n\t// \t// expect(component).toMatchSnapshot();\n\n\t// \t// Check fields\n\t// \texpect(component.find('Switch').last().prop('name')).toBe('auto-login');\n\t// \texpect(component.find('Switch').last().prop('checked')).toBe(false);\n\t// \texpect(component.find('Switch').last().prop('value')).toBe(true);\n\n\t// });\n\n\n\tit('should update switch value from onValueChange callback with true', async () => {\n\n\t\tconst onSubmit = jest.fn();\n\n\t\tconst component = mount(\n\t\t\t<BlueBaseApp plugins={[Plugin]}>p\n\t\t\t\t<Formik initialValues={{ 'auto-login': true }} onSubmit={onSubmit}>\n\t\t\t\t\t<FormSwitchInput {...fieldProps[0] as any} />\n\t\t\t\t</Formik>\n\t\t\t</BlueBaseApp>\n\t\t);\n\n\t\tawait waitForElement(component as any, FormSwitchInput);\n\n\t\t// Initial state should be false\n\t\tlet SwitchComponent = component.find('Switch').last();\n\n\t\t// Check fields\n\t\texpect(SwitchComponent.prop('name')).toBe('muzamil');\n\t\texpect(SwitchComponent.prop('checked')).toBe(false);\n\n\t\t// Update State\n\t\tconst onValueChange: any = SwitchComponent.prop('onValueChange');\n\n\t\tonValueChange(true, true);\n\t\tcomponent.update();\n\t\t// expect(component).toMatchSnapshot();\n\n\t\t// New state should be true\n\t\tSwitchComponent = component.find('Switch').first();\n\t\texpect(SwitchComponent.prop('name')).toBe('muzamil');\n\t\texpect(SwitchComponent.prop('checked')).toBe(true);\n\t\texpect(SwitchComponent.prop('value')).toBe(false);\n\n\t});\n\n\t// it('should update switch value from onValueChange callback with false', async () => {\n\t// \tconst onSubmit = jest.fn();\n\t// \tconst component = mount(\n\t// \t\t<BlueBaseApp plugins={[Plugin]}>\n\t// \t\t\t<Formik initialValues={{ 'auto-login': false }} onSubmit={onSubmit}>\n\t// \t\t\t\t<FormSwitchInput {...fieldProps[1] as any} onValueChange = {()=>null} />\n\t// \t\t\t</Formik>\n\t// \t\t</BlueBaseApp>\n\t// \t);\n\n\t// \tawait waitForElement(component as any, FormSwitchInput);\n\n\t// \t// Initial state should be false\n\t// \tlet SwitchComponent = component.find('Switch').last();\n\n\t// \t// Check fields\n\t// \texpect(SwitchComponent.prop('name')).toBe('auto-login');\n\t// \texpect(SwitchComponent.prop('checked')).toBe(false);\n\n\t// \t// Update State\n\t// \tconst onValueChange: any = SwitchComponent.prop('onValueChange');\n\n\t// \tonValueChange(false, false);\n\t// \tcomponent.update();\n\t// \t// expect(component).toMatchSnapshot();\n\n\t// \t// New state should be true\n\t// \tSwitchComponent = component.find('Switch').first();\n\t// \texpect(SwitchComponent.prop('name')).toBe('auto-login');\n\t// \texpect(SwitchComponent.prop('checked')).toBe(false);\n\t// \texpect(SwitchComponent.prop('value')).toBe(true);\n\t// });\n});\n"]}
{"version":3,"sources":["/home/muzzamil/Documents/bluebase/plugin-json-schema-components/src/JsonForm/Fields/FormTextInput.tsx"],"names":[],"mappings":";;;;;;;;;;;;AAAA,IAAA,YAAA,GAAA,OAAA,CAAA,sBAAA,CAAA;;AAEA,IAAA,QAAA,GAAA,OAAA,CAAA,QAAA,CAAA;;AACA,IAAA,OAAA,GAAA,OAAA,CAAA,eAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AAEA,IAAM,aAAa,GAAG,YAAA,CAAA,YAAA,CAAiC,eAAjC,CAAtB;AACA,IAAM,SAAS,GAAG,YAAA,CAAA,YAAA,CAA6B,WAA7B,CAAlB;;AAWA,IAAM,QAAQ,GAAG,SAAX,QAAW,CAAC,KAAD;AAAA,SAA+B,UAAC,KAAD,EAAkB;AAAA,QACzD,QADyD,GACtC,KADsC,CACzD,QADyD;AAAA,QAC/C,IAD+C,GACtC,KADsC,CAC/C,IAD+C;AAGjE,QAAI,KAAJ;;AAGA,QAAI,QAAQ,KAAK,IAAb,IAAqB,CAAC,KAA1B,EAAiC;AAChC,MAAA,KAAK,GAAG,wBAAR;AACA,KAFD,MAKK,IAAI,IAAI,KAAK,OAAT,IAAoB,CAAC,4CAA4C,IAA5C,CAAiD,KAAjD,CAAzB,EAAkF;AACtF,QAAA,KAAK,GAAG,oCAAR;AACA;;AAED,WAAO,KAAP;AACA,GAhBgB;AAAA,CAAjB;;AAkBa,OAAA,CAAA,aAAA,GAAgB,UAAC,KAAD;AAAA,SAC5B,OAAA,CAAA,OAAA,CAAA,aAAA,CAAC,QAAA,CAAA,KAAD,EAAM,uBAAA,EAAA,EAAK,KAAL,EAAU;AAAE,IAAA,QAAQ,EAAE,KAAK,CAAC,QAAN,IAAkB,QAAQ,CAAC,KAAD;AAAtC,GAAV,CAAN,EACE,gBAAyB;AAAA,QAAtB,KAAsB,QAAtB,KAAsB;AAAA,QAAf,IAAe,QAAf,IAAe;AAEzB,QAAM,IAAI,GAAG,KAAK,CAAC,IAAnB;AAEA,QAAM,UAAU,GAAA,uBAAA,EAAA,EACZ,KADY,EACP;AACR,MAAA,QAAQ,EAAE;AADF,KADO,EAGZ,KAHY,EAGP;AACR,MAAA,KAAK,EAAG,IAAI,CAAC,MAAL,CAAY,IAAZ,KAAqB,IAAI,CAAC,OAAL,CAAa,IAAb,CAAtB,IAA6C,KAAK,CAAC,KADlD;AAER,MAAA,UAAU,EAAE,IAAI,CAAC,MAAL,CAAY,IAAZ,KAAqB,KAAK,CAAC,UAF/B;AAGR,MAAA,YAAY,EAAE,sBAAC,IAAD,EAAiB;AAC9B,QAAA,IAAI,CAAC,YAAL,CAAkB,IAAlB,EAAwB,IAAxB;AAEA;AANO,KAHO,CAAhB;AAYA,WAAQ,OAAA,CAAA,OAAA,CAAA,aAAA,CAAC,aAAD,EAAc,uBAAA,EAAA,EAAK,UAAL,CAAd,CAAR;AACA,GAlBF,CAD4B;AAAA,CAAhB;;AAuBb,OAAA,CAAA,aAAA,CAAc,YAAd,GAA6B;AAC5B,EAAA,aAAa,EAAE;AADa,CAA7B","sourcesContent":["import { TextInputProps, getComponent } from '@bluebase/components';\nimport { BaseFormFieldProps } from '../BaseFormField';\nimport { Field } from 'formik';\nimport React from 'react';\n\nconst BaseFormField = getComponent<BaseFormFieldProps>('BaseFormField');\nconst TextInput = getComponent<TextInputProps>('TextInput');\n\nexport type FormTextInputProps<T = {}> = TextInputProps & BaseFormFieldProps & T & {\n\tchildren?: React.ReactNode;\n\tvalidate?: ((value: any) => string | Promise<void> | undefined);\n\tname: string;\n\ttype?: string;\n\tvalue?: any;\n\tinnerRef?: (instance: any) => void;\n};\n\nconst validate = (props: FormTextInputProps) => (value: string) => {\n\tconst { required, type } = props;\n\n\tlet error;\n\n\t// If field is required\n\tif (required === true && !value) {\n\t\terror = 'This field is required';\n\t}\n\n\t// If field 'email'\n\telse if (type === 'email' && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)) {\n\t\terror = 'Please enter a valid email address';\n\t}\n\n\treturn error;\n};\n\nexport const FormTextInput = (props: FormTextInputProps) => (\n\t<Field {...props} validate={props.validate || validate(props)}>\n\t\t{({ field, form }: any) => {\n\n\t\t\tconst name = props.name;\n\n\t\t\tconst inputProps = {\n\t\t\t\t...field,\n\t\t\t\tonChange: undefined,\n\t\t\t\t...props,\n\t\t\t\terror: (form.errors[name] && form.touched[name]) || props.error,\n\t\t\t\thelperText: form.errors[name] || props.helperText,\n\t\t\t\tonChangeText: (text: string) => {\n\t\t\t\t\tform.handleChange(name)(text);\n\t\t\t\t\t// props.onChangeText && props.onChangeText(text);\n\t\t\t\t},\n\t\t\t};\n\n\t\t\treturn (<BaseFormField {...inputProps} />);\n\t\t}}\n\t</Field>\n);\n\nFormTextInput.defaultProps = {\n\tMainComponent: TextInput\n};"]}
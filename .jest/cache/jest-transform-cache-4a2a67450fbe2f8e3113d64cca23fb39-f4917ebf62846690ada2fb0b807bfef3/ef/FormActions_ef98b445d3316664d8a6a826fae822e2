f6e747a5610ce2ff2840051291081955
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

var FormFields_1 = require("../FormFields");

var react_1 = tslib_1.__importDefault(require("react"));

var components_1 = require("@bluebase/components");

var FieldWrapper = function FieldWrapper(_ref) {
  var field = _ref.field,
      parent = _ref.parent,
      children = _ref.children;
  var direction = parent.direction,
      styles = parent.styles,
      style = parent.style,
      textAlignment = parent.textAlignment;
  debugger;
  console.log("TExtttttttt", direction === "left" ? styles.fieldContainerLeft : direction === "right" ? styles.fieldContainerRight : direction === "space-between" ? styles.fieldContainerBetween : null);
  return react_1.default.createElement(components_1.View, {
    key: field.name,
    style: [direction === "left" ? styles.fieldContainerLeft : direction === "right" ? styles.fieldContainerRight : direction === "space-between" ? styles.fieldContainerBetween : null, textAlignment === "left" ? styles.textContainerLeft : textAlignment === "right" ? styles.textContainerRight : null, style]
  }, children);
};

exports.FormActions = function (props) {
  var direction = props.direction,
      style = props.style,
      _styles = props.styles;
  var styles = _styles;
  return react_1.default.createElement(components_1.View, {
    style: [styles.root, direction === 'left' ? styles.rootLeft : null || direction === 'right' ? styles.rootRight : null || direction === 'space-between' ? styles.rootSpaceBetween : null, style],
    testID: "form-actions"
  }, react_1.default.createElement(FormFields_1.FormFields, (0, _extends2.default)({
    FieldWrapper: FieldWrapper
  }, props)));
};

exports.FormActions.defaultProps = {
  direction: 'right',
  textAlignment: 'left'
};

exports.FormActions.defaultStyles = function (theme) {
  return {
    fieldContainerLeft: {
      marginLeft: theme.spacing.unit * 2
    },
    fieldContainerRight: {
      marginRight: theme.spacing.unit * 2
    },
    textContainerRight: {
      marginRight: theme.spacing.unit * 2
    },
    textContainerLeft: {
      marginLeft: theme.spacing.unit * 2
    },
    fieldContainerBetween: {
      marginLeft: theme.spacing.unit * 0,
      marginRight: theme.spacing.unit * 0
    },
    root: {
      flexDirection: 'row',
      paddingVertical: theme.spacing.unit * 2
    },
    rootLeft: {
      justifyContent: 'flex-start'
    },
    rootRight: {
      justifyContent: 'flex-end'
    },
    rootSpaceBetween: {
      justifyContent: 'space-between'
    }
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL211enphbWlsL0RvY3VtZW50cy9ibHVlYmFzZS9wbHVnaW4tanNvbi1zY2hlbWEtY29tcG9uZW50cy9zcmMvSnNvbkZvcm0vRmllbGRzL0Zvcm1BY3Rpb25zLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQSxJQUFBLFlBQUEsR0FBQSxPQUFBLENBQUEsZUFBQSxDQUFBOztBQUdBLElBQUEsT0FBQSxHQUFBLE9BQUEsQ0FBQSxlQUFBLENBQUEsT0FBQSxDQUFBLE9BQUEsQ0FBQSxDQUFBOztBQUVBLElBQUEsWUFBQSxHQUFBLE9BQUEsQ0FBQSxzQkFBQSxDQUFBOztBQXlCQSxJQUFNLFlBQVksR0FBRyxTQUFmLFlBQWUsT0FBa0Q7QUFBQSxNQUEvQyxLQUErQyxRQUEvQyxLQUErQztBQUFBLE1BQXhDLE1BQXdDLFFBQXhDLE1BQXdDO0FBQUEsTUFBakMsUUFBaUMsUUFBakMsUUFBaUM7QUFBQSxNQUU5RCxTQUY4RCxHQUVsQixNQUZrQixDQUU5RCxTQUY4RDtBQUFBLE1BRW5ELE1BRm1ELEdBRWxCLE1BRmtCLENBRW5ELE1BRm1EO0FBQUEsTUFFM0MsS0FGMkMsR0FFbEIsTUFGa0IsQ0FFM0MsS0FGMkM7QUFBQSxNQUVwQyxhQUZvQyxHQUVsQixNQUZrQixDQUVwQyxhQUZvQztBQUd0RTtBQUNBLEVBQUEsT0FBTyxDQUFDLEdBQVIsQ0FBWSxhQUFaLEVBQTJCLFNBQVMsS0FBSyxNQUFkLEdBQXVCLE1BQU0sQ0FBQyxrQkFBOUIsR0FBbUQsU0FBUyxLQUFLLE9BQWQsR0FBd0IsTUFBTSxDQUFDLG1CQUEvQixHQUFxRCxTQUFTLEtBQUssZUFBZCxHQUFnQyxNQUFNLENBQUMscUJBQXZDLEdBQStELElBQWxNO0FBQ0EsU0FDQyxPQUFBLENBQUEsT0FBQSxDQUFBLGFBQUEsQ0FBQyxZQUFBLENBQUEsSUFBRCxFQUFLO0FBQ0osSUFBQSxHQUFHLEVBQUUsS0FBSyxDQUFDLElBRFA7QUFFSixJQUFBLEtBQUssRUFBRSxD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QUFjLEVBQUU7QUFEQztBQTVCK0MsR0FBdEM7QUFBQSxDQUE1QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEZpZWxkV3JhcHBlclByb3BzLCBGb3JtRmllbGRzIH0gZnJvbSAnLi4vRm9ybUZpZWxkcyc7XG5pbXBvcnQgeyBTdHlsZVByb3AsIFZpZXdTdHlsZSB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgeyBGb3JtRmllbGRQcm9wcyB9IGZyb20gJy4vRm9ybUZpZWxkUHJvcHMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFRoZW1lIH0gZnJvbSAnQGJsdWViYXNlL2NvcmUnO1xuaW1wb3J0IHsgVmlldyB9IGZyb20gJ0BibHVlYmFzZS9jb21wb25lbnRzJztcblxuZXhwb3J0IGludGVyZmFjZSBGb3JtQWN0aW9uc1N0eWxlcyB7XG5cdGZpZWxkQ29udGFpbmVyTGVmdDogU3R5bGVQcm9wPFZpZXdTdHlsZT47XG5cdGZpZWxkQ29udGFpbmVyUmlnaHQ6IFN0eWxlUHJvcDxWaWV3U3R5bGU+O1xuXHRmaWVsZENvbnRhaW5lckJldHdlZW4gOlN0eWxlUHJvcDxWaWV3U3R5bGU+O1xuXHR0ZXh0Q29udGFpbmVyUmlnaHQgOiBTdHlsZVByb3A8Vmlld1N0eWxlPjtcblx0dGV4dENvbnRhaW5lckxlZnQgOiBTdHlsZVByb3A8Vmlld1N0eWxlPjtcblx0cm9vdFNwYWNlQmV0d2VlbiA6IFN0eWxlUHJvcDxWaWV3U3R5bGU+O1xuXHRyb290OiBTdHlsZVByb3A8Vmlld1N0eWxlPjtcblx0cm9vdExlZnQ6IFN0eWxlUHJvcDxWaWV3U3R5bGU+O1xuXHRyb290UmlnaHQ6IFN0eWxlUHJvcDxWaWV3U3R5bGU+O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEZvcm1BY3Rpb25zUHJvcHMge1xuXHR0eXBlOiAnYWN0aW9ucyc7XG5cdG5hbWU6IHN0cmluZztcblx0dGV4dEFsaWdubWVudCA6ICdsZWZ0JyB8ICdyaWdodCcgO1xuXHRkaXJlY3Rpb246ICdsZWZ0JyB8ICdyaWdodCcgfCAnc3BhY2UtYmV0d2Vlbic7XG5cdGZpZWxkczogRm9ybUZpZWxkUHJvcHNbXTtcblx0c3R5bGU/OiBTdHlsZVByb3A8Vmlld1N0eWxlPjtcblx0c3R5bGVzPzogUGFydGlhbDxGb3JtQWN0aW9uc1N0eWxlcz47XG59XG5cblxuY29uc3QgRmllbGRXcmFwcGVyID0gKHsgZmllbGQsIHBhcmVudCxjaGlsZHJlbiB9OiBGaWVsZFdyYXBwZXJQcm9wcykgPT4ge1xuXG5cdGNvbnN0IHsgZGlyZWN0aW9uLCBzdHlsZXMsIHN0eWxlLCB0ZXh0QWxpZ25tZW50IH0gPSBwYXJlbnQ7XG5cdGRlYnVnZ2VyO1xuXHRjb25zb2xlLmxvZyhcIlRFeHR0dHR0dHR0XCIsIGRpcmVjdGlvbiA9PT0gXCJsZWZ0XCIgPyBzdHlsZXMuZmllbGRDb250YWluZXJMZWZ0IDogZGlyZWN0aW9uID09PSBcInJpZ2h0XCIgPyBzdHlsZXMuZmllbGRDb250YWluZXJSaWdodCA6IGRpcmVjdGlvbiA9PT0gXCJzcGFjZS1iZXR3ZWVuXCIgPyBzdHlsZXMuZmllbGRDb250YWluZXJCZXR3ZWVuIDogbnVsbClcblx0cmV0dXJuIChcblx0XHQ8Vmlld1xuXHRcdFx0a2V5PXtmaWVsZC5uYW1lfVxuXHRcdFx0c3R5bGU9e1tkaXJlY3Rpb24gPT09IFwibGVmdFwiID8gc3R5bGVzLmZpZWxkQ29udGFpbmVyTGVmdCA6IGRpcmVjdGlvbiA9PT0gXCJyaWdodFwiID8gc3R5bGVzLmZpZWxkQ29udGFpbmVyUmlnaHQgOiBkaXJlY3Rpb24gPT09IFwic3BhY2UtYmV0d2VlblwiID8gc3R5bGVzLmZpZWxkQ29udGFpbmVyQmV0d2VlbiA6IG51bGwsXG5cdFx0XHR0ZXh0QWxpZ25tZW50ID09PSBcImxlZnRcIiA/IHN0eWxlcy50ZXh0Q29udGFpbmVyTGVmdCA6IHRleHRBbGlnbm1lbnQgPT09IFwicmlnaHRcIiA/IHN0eWxlcy50ZXh0Q29udGFpbmVyUmlnaHQgOiBudWxsLCBzdHlsZSBdfVxuXHRcdD5cblx0XHR7Y2hpbGRyZW59XG5cdFx0PC9WaWV3PlxuXHQpO1xufTtcblxuLyoqXG4gKiBBIGNvbXBvbmVudCB0aGF0IHJlbmRlcnMgZm9ybSBhY3Rpb25zLCBpLmUuIHN1Ym1pdCBvciByZXNldCBidXR0b25zXG4gKiBAcGFyYW0gcHJvcHNcbiAqL1xuZXhwb3J0IGNvbnN0IEZvcm1BY3Rpb25zID0gKHByb3BzOiBGb3JtQWN0aW9uc1Byb3BzKSA9PiB7XG5cblx0Y29uc3QgeyBkaXJlY3Rpb24sIHN0eWxlLCBzdHlsZXM6IF9zdHlsZXMgfSA9IHByb3BzO1xuXHRjb25zdCBzdHlsZXMgPSBfc3R5bGVzIGFzIEZvcm1BY3Rpb25zU3R5bGVzO1xuXHRyZXR1cm4gKFxuXHRcdFxuXHRcdDxWaWV3IHN0eWxlPXtbc3R5bGVzLnJvb3QsIGRpcmVjdGlvbiA9PT0gJ2xlZnQnID8gc3R5bGVzLnJvb3RMZWZ0IDogbnVsbCBcblx0XHR8fCAgZGlyZWN0aW9uID09PSAncmlnaHQnID8gc3R5bGVzLnJvb3RSaWdodCA6bnVsbCBcblx0XHR8fCBkaXJlY3Rpb24gPT09ICdzcGFjZS1iZXR3ZWVuJyA/IHN0eWxlcy5yb290U3BhY2VCZXR3ZWVuIDogbnVsbCwgc3R5bGVdfSB0ZXN0SUQ9XCJmb3JtLWFjdGlvbnNcIj5cblx0XHRcdDxGb3JtRmllbGRzIEZpZWxkV3JhcHBlcj17RmllbGRXcmFwcGVyfSB7Li4ucHJvcHN9ICAvPlxuXHRcdDwvVmlldz5cblx0KTtcbn07XG5cbkZvcm1BY3Rpb25zLmRlZmF1bHRQcm9wcyA9IHtcblx0ZGlyZWN0aW9uOiAncmlnaHQnLFxuXHR0ZXh0QWxpZ25tZW50OiAnbGVmdCdcbn07XG5cbkZvcm1BY3Rpb25zLmRlZmF1bHRTdHlsZXMgPSAodGhlbWU6IFRoZW1lKTogRm9ybUFjdGlvbnNTdHlsZXMgPT4gKHtcblx0ZmllbGRDb250YWluZXJMZWZ0OiB7XG5cdFx0bWFyZ2luTGVmdDogdGhlbWUuc3BhY2luZy51bml0ICogMixcblx0fSxcblx0ZmllbGRDb250YWluZXJSaWdodDoge1xuXHRcdG1hcmdpblJpZ2h0OiB0aGVtZS5zcGFjaW5nLnVuaXQgKiAyLFxuXHR9LFxuXHR0ZXh0Q29udGFpbmVyUmlnaHQ6IHtcblx0XHRtYXJnaW5SaWdodDogdGhlbWUuc3BhY2luZy51bml0ICogMixcblx0fSxcblx0dGV4dENvbnRhaW5lckxlZnQ6IHtcblx0XHRtYXJnaW5MZWZ0OiB0aGVtZS5zcGFjaW5nLnVuaXQgKiAyLFxuXHR9LFxuXHRmaWVsZENvbnRhaW5lckJldHdlZW4gOntcblx0XHRtYXJnaW5MZWZ0OiB0aGVtZS5zcGFjaW5nLnVuaXQgKiAwLFxuXHRcdG1hcmdpblJpZ2h0OiB0aGVtZS5zcGFjaW5nLnVuaXQgKiAwLFxuXHR9LFxuXHRyb290OiB7XG5cdFx0ZmxleERpcmVjdGlvbjogJ3JvdycsXG5cdFx0IHBhZGRpbmdWZXJ0aWNhbDogdGhlbWUuc3BhY2luZy51bml0ICogMixcblx0fSxcblx0cm9vdExlZnQ6IHtcblx0XHRqdXN0aWZ5Q29udGVudDogJ2ZsZXgtc3RhcnQnLFxuXHRcdFxuXHR9LFxuXHRyb290UmlnaHQ6IHtcblx0XHRqdXN0aWZ5Q29udGVudDogJ2ZsZXgtZW5kJyxcblx0fSxcblx0cm9vdFNwYWNlQmV0d2Vlbjoge1xuXHRcdGp1c3RpZnlDb250ZW50OiAnc3BhY2UtYmV0d2VlbicsXG5cdH1cbn0pOyJdfQ==
6d7a061aa19fe0538c542319c3449b60
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

var components_1 = require("@bluebase/components");

var formik_1 = require("formik");

var react_1 = tslib_1.__importDefault(require("react"));

var BaseFormField = components_1.getComponent('BaseFormField');
var TextInput = components_1.getComponent('TextInput');

var validate = function validate(props) {
  return function (value) {
    var required = props.required,
        type = props.type;
    var error;
    var password;

    if (required === true && !value) {
      error = 'This field is required';
    } else if (type === 'text' && !/^[A-Za-z]+$/.test(value)) {
      error = 'Should only be alphabet';
    } else if (type === 'password') {
      error = 'This field is required';
    } else if (type === 'date') {
      error = value;
    } else if (type === 'number' && !/^(0|[1-9]\d*)(\.\d+)?$/.test(value)) {
        error = 'Please enter a valid number';
      } else if (type === 'password' && value != password) {
        error = 'Password not matched';
      } else if (type === 'email' && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}$/i.test(value)) {
          error = 'Please enter a valid email address';
        }

    return error;
  };
};

exports.FormTextInput = function (props) {
  return react_1.default.createElement(formik_1.Field, (0, _extends2.default)({}, props, {
    validate: props.validate || validate(props)
  }), function (_ref) {
    var field = _ref.field,
        form = _ref.form;
    var name = props.name;
    var inputProps = (0, _extends2.default)({}, field, {
      onChange: undefined
    }, props, {
      error: form.errors[name] && form.touched[name] || props.error,
      helperText: form.errors[name] || props.helperText,
      onChangeText: function onChangeText(text) {
        form.handleChange(name)(text);
      }
    });
    return react_1.default.createElement(BaseFormField, (0, _extends2.default)({}, inputProps));
  });
};

exports.FormTextInput.defaultProps = {
  MainComponent: TextInput
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL211enphbWlsL0RvY3VtZW50cy9ibHVlYmFzZS9wbHVnaW4tanNvbi1zY2hlbWEtY29tcG9uZW50cy9zcmMvSnNvbkZvcm0vRmllbGRzL0Zvcm1UZXh0SW5wdXQudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBLElBQUEsWUFBQSxHQUFBLE9BQUEsQ0FBQSxzQkFBQSxDQUFBOztBQUlBLElBQUEsUUFBQSxHQUFBLE9BQUEsQ0FBQSxRQUFBLENBQUE7O0FBQ0EsSUFBQSxPQUFBLEdBQUEsT0FBQSxDQUFBLGVBQUEsQ0FBQSxPQUFBLENBQUEsT0FBQSxDQUFBLENBQUE7O0FBRUEsSUFBTSxhQUFhLEdBQUcsWUFBQSxDQUFBLFlBQUEsQ0FBaUMsZUFBakMsQ0FBdEI7QUFDQSxJQUFNLFNBQVMsR0FBRyxZQUFBLENBQUEsWUFBQSxDQUE2QixXQUE3QixDQUFsQjs7QUFjQSxJQUFNLFFBQVEsR0FBRyxTQUFYLFFBQVcsQ0FBQyxLQUFEO0FBQUEsU0FBK0IsVUFBQyxLQUFELEVBQWtCO0FBQUEsUUFDekQsUUFEeUQsR0FDdEMsS0FEc0MsQ0FDekQsUUFEeUQ7QUFBQSxRQUMvQyxJQUQrQyxHQUN0QyxLQURzQyxDQUMvQyxJQUQrQztBQUdqRSxRQUFJLEtBQUo7QUFDQSxRQUFJLFFBQUo7O0FBR0EsUUFBSSxRQUFRLEtBQUssSUFBYixJQUFxQixDQUFDLEtBQTFCLEVBQWtDO0FBQ2pDLE1BQUEsS0FBSyxHQUFHLHdCQUFSO0FBQ0EsS0FGRCxNQUlLLElBQUcsSUFBSSxLQUFLLE1BQVQsSUFBbUIsQ0FBQyxjQUFjLElBQWQsQ0FBbUIsS0FBbkIsQ0FBdkIsRUFBaUQ7QUFDckQsTUFBQSxLQUFLLEdBQUcseUJBQVI7QUFDQSxLQUZJLE1BSUEsSUFBRyxJQUFJLEtBQUssVUFBWixFQUF1QjtBQUUzQixNQUFBLEtBQUssR0FBRyx3QkFBUjtBQUVBLEtBSkksTUFNQSxJQUFHLElBQUksS0FBSyxNQUFaLEVBQXFCO0FBQ3pCLE1BQUEsS0FBSyxHQUFHLEtBQVI7QUFDQSxLQUZJLE1BS0EsSUFBSSxJQUFJLEtBQUssUUFBVCxJQUFxQixDQUFDLHlCQUF5QixJQUF6QixDQUE4QixLQUE5QixDQUExQixFQUErRDtBQUNuRSxRQUFBLEtBQUssR0FBRyw2QkFBUjtBQUNBLE9BRkksTUFJQSxJQUFJLElBQUksS0FBSyxVQUFULElBQXVCLEtBQUssSUFBSSxRQUFwQyxFQUE4QztBQUNsRCxRQUFBLEtBQUssR0FBRyxzQkFBUjtBQUNBLE9BRkksTUFLQSxJQUFJLElBQUksS0FBSyxPQUFULElBQW9CLENBQUMsNENBQTRDLElBQTVDLENBQWlELEtBQWpELENBQXpCLEVBQWtGO0FBQ3RGLFVBQUEsS0FBSyxHQUFHLG9DQUFSO0FBQ0E7O0FBRUQsV0FBTyxLQUFQO0FBQ0EsR0F4Q2dCO0FBQUEsQ0FBakI7O0FBMENhLE9BQUEsQ0FBQSxhQUFBLEdBQWdCLFVBQUMsS0FBRDtBQUFBLFNBQzVCLE9BQUEsQ0FBQSxPQUFBLENBQUEsYUFBQSxDQUFDLFFBQUEsQ0FBQSxLQUFELEVBQU0sdUJBQUEsRUFBQSxFQUFLLEtBQUwsRUFBVTtBQUFFLElBQUEsUUFBUSxFQUFFLEtBQUssQ0FBQyxRQUFOLElBQWtCLFFBQVEsQ0FBQyxLQUFEO0FBQXRDLEdBQVYsQ0FBTixFQUNFLGdCQUF5QjtBQUFBLFFBQXRCLEtBQXNCLFFBQXRCLEtBQXNCO0FBQUEsUUFBZixJQUFlLFFBQWYsSUFBZTtBQUN6QixRQUFNLElBQUksR0FBRyxLQUFLLENBQUMsSUFBbkI7QUFFQSxRQUFNLFVBQVUsR0FBQSx1QkFBQSxFQUFBLEVBQ1osS0FEWSxFQUNQO0FBQ1IsTUFBQSxRQUFRLEVBQUU7QUFERixLQURPLEVBR1osS0FIWSxFQUdQO0FBQ1IsTUFBQSxLQUFLLEVBQUcsSUFBSSxDQUFDLE1BQUwsQ0FBWSxJQUFaLEtBQXFCLElBQUksQ0FBQyxPQUFMLENBQWEsSUFBYixDQUF0QixJQUE2QyxLQUFLLENBQUMsS0FEbEQ7QUFFUixNQUFBLFVBQVUsRUFBRSxJQUFJLENBQUMsTUFBTCxDQUFZLElBQVosS0FBcUIsS0FBSyxDQUFDLFVBRi9CO0FBSVIsTUFBQSxZQUFZLEVBQUUsc0JBQUMsSUFBRCxFQUFpQjtBQUM5QixRQUFBLElBQUksQ0FBQyxZQUFMLENBQWtCLElBQWxCLEVBQXdCLElBQXhCO0FBQ0E7QUFOTyxLQUhPLENBQWhCO0FBV0EsV0FBUSxPQUFBLENBQUEsT0FBQSxDQUFBLGFBQUEsQ0FBQyxhQUFELEVBQWMsdUJBQUEsRUFBQSxFQUFLLFVBQUwsQ0FBZCxDQUFSO0FBQ0EsR0FoQkYsQ0FENEI7QUFBQSxDQUFoQjs7QUFxQmIsT0FBQSxDQUFBLGFBQUEsQ0FBYyxZQUFkLEdBQTZCO0FBQzVCLEVBQUEsYUFBYSxFQUFFO0FBRGEsQ0FBN0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUZXh0SW5wdXRQcm9wcywgZ2V0Q29tcG9uZW50IH0gZnJvbSAnQGJsdWViYXNlL2NvbXBvbmVudHMnO1xuaW1wb3J0IHsgQmFzZUZvcm1GaWVsZFByb3BzIH0gZnJvbSAnLi4vQmFzZUZvcm1GaWVsZCc7XG5pbXBvcnQgeyBTdHlsZVByb3AsIFZpZXdTdHlsZSB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5cbmltcG9ydCB7IEZpZWxkIH0gZnJvbSAnZm9ybWlrJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmNvbnN0IEJhc2VGb3JtRmllbGQgPSBnZXRDb21wb25lbnQ8QmFzZUZvcm1GaWVsZFByb3BzPignQmFzZUZvcm1GaWVsZCcpO1xuY29uc3QgVGV4dElucHV0ID0gZ2V0Q29tcG9uZW50PFRleHRJbnB1dFByb3BzPignVGV4dElucHV0Jyk7XG5cbmV4cG9ydCB0eXBlIEZvcm1UZXh0SW5wdXRQcm9wczxUID0ge30+ID0gVGV4dElucHV0UHJvcHMgJiBCYXNlRm9ybUZpZWxkUHJvcHMgJiBUICYge1xuXHRjaGlsZHJlbj86IFJlYWN0LlJlYWN0Tm9kZTtcblx0dmFsaWRhdGU/OiAoKHZhbHVlOiBhbnkpID0+IHN0cmluZyB8IFByb21pc2U8dm9pZD4gfCB1bmRlZmluZWQpO1xuXHRuYW1lOiBzdHJpbmc7XG5cdHR5cGU/OiBzdHJpbmc7XG5cdHZhbHVlPzogYW55O1xuXHRpbm5lclJlZj86IChpbnN0YW5jZTogYW55KSA9PiB2b2lkO1xuXHRzdHlsZT86IFN0eWxlUHJvcDxWaWV3U3R5bGU+O1xuXHQvL1trZXk6IHN0cmluZ106IGFueVxuXHRtYXhMZW5ndGggPyA6IG51bWJlclxufTtcblxuY29uc3QgdmFsaWRhdGUgPSAocHJvcHM6IEZvcm1UZXh0SW5wdXRQcm9wcykgPT4gKHZhbHVlOiBzdHJpbmcpID0+IHtcblx0Y29uc3QgeyByZXF1aXJlZCwgdHlwZSB9ID0gcHJvcHM7XG5cblx0bGV0IGVycm9yO1xuXHR2YXIgcGFzc3dvcmQgO1xuXG5cdC8vIElmIGZpZWxkIGlzIHJlcXVpcmVkIC8vdGVzdGVkXG5cdGlmIChyZXF1aXJlZCA9PT0gdHJ1ZSAmJiAhdmFsdWUgKSB7XG5cdFx0ZXJyb3IgPSAnVGhpcyBmaWVsZCBpcyByZXF1aXJlZCc7XG5cdH1cblxuXHRlbHNlIGlmKHR5cGUgPT09ICd0ZXh0JyAmJiAhL15bQS1aYS16XSskLy50ZXN0KHZhbHVlKSl7XG5cdFx0ZXJyb3IgPSAnU2hvdWxkIG9ubHkgYmUgYWxwaGFiZXQnO1xuXHR9XG5cblx0ZWxzZSBpZih0eXBlID09PSAncGFzc3dvcmQnKXtcblx0XHQvL3Bhc3N3b3JkID09IHZhbHVlO1xuXHRcdGVycm9yID0gJ1RoaXMgZmllbGQgaXMgcmVxdWlyZWQnO1xuXG5cdH1cblxuXHRlbHNlIGlmKHR5cGUgPT09ICdkYXRlJyAgKXtcblx0XHRlcnJvciA9IHZhbHVlO1xuXHR9XG5cblx0Ly9pZiBudW1iZXIgZmllbGQgaXMgaW5jb3JyZWN0XG5cdGVsc2UgaWYgKHR5cGUgPT09ICdudW1iZXInICYmICEvXigwfFsxLTldXFxkKikoXFwuXFxkKyk/JC8udGVzdCh2YWx1ZSkpe1xuXHRcdGVycm9yID0gJ1BsZWFzZSBlbnRlciBhIHZhbGlkIG51bWJlcidcblx0fVxuXG5cdGVsc2UgaWYgKHR5cGUgPT09ICdwYXNzd29yZCcgJiYgdmFsdWUgIT0gcGFzc3dvcmQgKXtcblx0XHRlcnJvciA9ICdQYXNzd29yZCBub3QgbWF0Y2hlZCdcblx0fVxuXG5cdC8vIElmIGZpZWxkICdlbWFpbCdcblx0ZWxzZSBpZiAodHlwZSA9PT0gJ2VtYWlsJyAmJiAhL15bQS1aMC05Ll8lKy1dK0BbQS1aMC05Li1dK1xcLltBLVpdezIsNH0kL2kudGVzdCh2YWx1ZSkpIHtcblx0XHRlcnJvciA9ICdQbGVhc2UgZW50ZXIgYSB2YWxpZCBlbWFpbCBhZGRyZXNzJztcblx0fVxuXG5cdHJldHVybiBlcnJvcjtcbn07XG5cbmV4cG9ydCBjb25zdCBGb3JtVGV4dElucHV0ID0gKHByb3BzOiBGb3JtVGV4dElucHV0UHJvcHMpID0+IChcblx0PEZpZWxkIHsuLi5wcm9wc30gdmFsaWRhdGU9e3Byb3BzLnZhbGlkYXRlIHx8IHZhbGlkYXRlKHByb3BzKX0+XG5cdFx0eyh7IGZpZWxkLCBmb3JtIH06IGFueSkgPT4ge1xuXHRcdFx0Y29uc3QgbmFtZSA9IHByb3BzLm5hbWU7XG5cblx0XHRcdGNvbnN0IGlucHV0UHJvcHMgPSB7XG5cdFx0XHRcdC4uLmZpZWxkLFxuXHRcdFx0XHRvbkNoYW5nZTogdW5kZWZpbmVkLFxuXHRcdFx0XHQuLi5wcm9wcyxcblx0XHRcdFx0ZXJyb3I6IChmb3JtLmVycm9yc1tuYW1lXSAmJiBmb3JtLnRvdWNoZWRbbmFtZV0pIHx8IHByb3BzLmVycm9yLFxuXHRcdFx0XHRoZWxwZXJUZXh0OiBmb3JtLmVycm9yc1tuYW1lXSB8fCBwcm9wcy5oZWxwZXJUZXh0LFxuXHRcdFx0XHRcblx0XHRcdFx0b25DaGFuZ2VUZXh0OiAodGV4dDogc3RyaW5nKSA9PiB7XG5cdFx0XHRcdFx0Zm9ybS5oYW5kbGVDaGFuZ2UobmFtZSkodGV4dCk7XG5cdFx0XHRcdH0sXG5cdFx0XHR9O1xuXHRcdFx0cmV0dXJuICg8QmFzZUZvcm1GaWVsZCB7Li4uaW5wdXRQcm9wc30gLz4pO1xuXHRcdH19XG5cdDwvRmllbGQ+XG4pO1xuXG5Gb3JtVGV4dElucHV0LmRlZmF1bHRQcm9wcyA9IHtcblx0TWFpbkNvbXBvbmVudDogVGV4dElucHV0XG59OyJdfQ==
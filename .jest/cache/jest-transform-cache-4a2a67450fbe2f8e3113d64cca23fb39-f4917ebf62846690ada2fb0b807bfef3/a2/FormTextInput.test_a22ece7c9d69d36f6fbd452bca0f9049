496d7385f25b02977046d8b5051b79b8
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

var core_1 = require("@bluebase/core");

var FormTextInput_1 = require("../FormTextInput");

var formik_1 = require("formik");

var index_1 = tslib_1.__importDefault(require("../../../index"));

var react_1 = tslib_1.__importDefault(require("react"));

var enzyme_1 = require("enzyme");

var enzyme_async_helpers_1 = require("enzyme-async-helpers");

var fieldProps = [{
  helperText: 'This is a helper text',
  label: 'Username',
  name: 'username',
  required: true,
  type: 'text',
  number: 123
}, {
  label: 'Email',
  name: 'email',
  required: true,
  type: 'email'
}];
var initialValues = {
  username: 'foo'
};
describe('FormTextInput', function () {
  it('should render all form fields in the schema', function _callee() {
    var onSubmit, component;
    return _regenerator.default.async(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            onSubmit = jest.fn();
            component = enzyme_1.mount(react_1.default.createElement(core_1.BlueBaseApp, {
              plugins: [index_1.default]
            }, react_1.default.createElement(formik_1.Formik, {
              initialValues: initialValues,
              onSubmit: onSubmit
            }, react_1.default.createElement(FormTextInput_1.FormTextInput, (0, _extends2.default)({}, fieldProps[0])))));
            _context.next = 4;
            return _regenerator.default.awrap(enzyme_async_helpers_1.waitForElement(component, FormTextInput_1.FormTextInput));

          case 4:
            expect(component.find('TextInput').last().prop('name')).toBe('username');
            expect(component.find('TextInput').last().prop('value')).toBe('foo');
            expect(component.find('TextInput').last().prop('type')).toBe('text');

          case 7:
          case "end":
            return _context.stop();
        }
      }
    });
  });
  it('should validate required fields', function _callee2() {
    var onSubmit, component, validate;
    return _regenerator.default.async(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            onSubmit = jest.fn();
            component = enzyme_1.mount(react_1.default.createElement(core_1.BlueBaseApp, {
              plugins: [index_1.default]
            }, react_1.default.createElement(formik_1.Formik, {
              initialValues: initialValues,
              onSubmit: onSubmit
            }, react_1.default.createElement(FormTextInput_1.FormTextInput, (0, _extends2.default)({}, fieldProps[0])))));
            _context2.next = 4;
            return _regenerator.default.awrap(enzyme_async_helpers_1.waitForElement(component, FormTextInput_1.FormTextInput));

          case 4:
            validate = component.find('FieldInner[name="username"]').last().prop('validate');
            expect(validate('')).toBe('This field is required');
            expect(validate('foo')).toBeUndefined();

          case 7:
          case "end":
            return _context2.stop();
        }
      }
    });
  });
  it('should validate email fields', function _callee3() {
    var onSubmit, component, validate;
    return _regenerator.default.async(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            onSubmit = jest.fn();
            component = enzyme_1.mount(react_1.default.createElement(core_1.BlueBaseApp, {
              plugins: [index_1.default]
            }, react_1.default.createElement(formik_1.Formik, {
              initialValues: initialValues,
              onSubmit: onSubmit
            }, react_1.default.createElement(FormTextInput_1.FormTextInput, (0, _extends2.default)({}, fieldProps[1])))));
            _context3.next = 4;
            return _regenerator.default.awrap(enzyme_async_helpers_1.waitForElement(component, FormTextInput_1.FormTextInput));

          case 4:
            validate = component.find('FieldInner[name="email"]').last().prop('validate');
            expect(validate('foo bar')).toBe('Please enter a valid email address');
            expect(validate('foo@bar.com')).toBeUndefined();

          case 7:
          case "end":
            return _context3.stop();
        }
      }
    });
  });
  it('should validate number field', function _callee4() {
    var onSubmit, component, validate;
    return _regenerator.default.async(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            onSubmit = jest.fn();
            component = enzyme_1.mount(react_1.default.createElement(core_1.BlueBaseApp, {
              plugins: [index_1.default]
            }, react_1.default.createElement(formik_1.Formik, {
              initialValues: initialValues,
              onSubmit: onSubmit
            }, react_1.default.createElement(FormTextInput_1.FormTextInput, (0, _extends2.default)({}, fieldProps[1])))));
            _context4.next = 4;
            return _regenerator.default.awrap(enzyme_async_helpers_1.waitForElement(component, FormTextInput_1.FormTextInput));

          case 4:
            validate = component.find('FieldInner[name="number"]').last().prop('validate');
            expect(validate('')).toBe(123);
            expect(validate('foo@bar.com')).toBeUndefined();

          case 7:
          case "end":
            return _context4.stop();
        }
      }
    });
  });
  it('should update field value when onChangeText callback is invoked', function _callee5() {
    var onSubmit, component, onChangeText;
    return _regenerator.default.async(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            onSubmit = jest.fn();
            component = enzyme_1.mount(react_1.default.createElement(core_1.BlueBaseApp, {
              plugins: [index_1.default]
            }, react_1.default.createElement(formik_1.Formik, {
              initialValues: {},
              onSubmit: onSubmit
            }, react_1.default.createElement(FormTextInput_1.FormTextInput, (0, _extends2.default)({}, fieldProps[0])))));
            _context5.next = 4;
            return _regenerator.default.awrap(enzyme_async_helpers_1.waitForElement(component, FormTextInput_1.FormTextInput));

          case 4:
            expect(component.find('TextInput').last().prop('name')).toBe('username');
            expect(component.find('TextInput').last().prop('value')).toBeUndefined();
            expect(component.find('TextInput').last().prop('type')).toBe('text');
            expect(component.find('TextInput').last().prop('helperText')).toBe('This is a helper text');
            onChangeText = component.find('TextInput').first().prop('onChangeText');
            onChangeText('bar');
            component.update();
            _context5.next = 13;
            return _regenerator.default.awrap(Promise.resolve());

          case 13:
            setTimeout(function () {
              expect(component.find('TextInput').last().prop('value')).toBe('bar');
            });

          case 14:
          case "end":
            return _context5.stop();
        }
      }
    });
  });
  it('should render error state if validation fails', function _callee6() {
    var onSubmit, component, formik;
    return _regenerator.default.async(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            onSubmit = jest.fn();
            component = enzyme_1.mount(react_1.default.createElement(core_1.BlueBaseApp, {
              plugins: [index_1.default]
            }, react_1.default.createElement(formik_1.Formik, {
              initialValues: {},
              onSubmit: onSubmit
            }, react_1.default.createElement(FormTextInput_1.FormTextInput, (0, _extends2.default)({}, fieldProps[0])))));
            _context6.next = 4;
            return _regenerator.default.awrap(enzyme_async_helpers_1.waitForElement(component, FormTextInput_1.FormTextInput));

          case 4:
            expect(component.find('TextInput').last().prop('name')).toBe('username');
            expect(component.find('TextInput').last().prop('value')).toBeUndefined();
            expect(component.find('TextInput').last().prop('type')).toBe('text');
            expect(component.find('TextInput').last().prop('helperText')).toBe('This is a helper text');
            formik = component.find('FieldInner').first().prop('formik');
            formik.setFieldValue('username', null);
            formik.validateField('username');
            formik.handleSubmit();
            _context6.next = 14;
            return _regenerator.default.awrap(Promise.resolve());

          case 14:
            component.update();
            setTimeout(function () {
              expect(component).toMatchSnapshot();
              expect(component.find('TextInput').last().prop('helperText')).toBe('This field is required');
            });

          case 16:
          case "end":
            return _context6.stop();
        }
      }
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
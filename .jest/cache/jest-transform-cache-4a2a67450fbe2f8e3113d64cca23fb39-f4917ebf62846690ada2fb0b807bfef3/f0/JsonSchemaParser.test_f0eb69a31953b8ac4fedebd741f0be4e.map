{"version":3,"sources":["/home/muzzamil/Documents/bluebase/plugin-json-schema-components/src/__tests__/JsonSchemaParser.test.tsx"],"names":[],"mappings":"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","sourcesContent":["import { JsonComponentNode, JsonSchemaParser } from '../JsonSchemaParser';\nimport React from 'react';\nimport { Text } from 'react-native';\nimport renderer from 'react-test-renderer';\n\nconst Timeline = ({ children, ...rest }: any) => <Text {...rest}>Timeline: {children}</Text>;\nconst Post = ({ content, ...rest }: any) => <Text {...rest}>Post: {content}</Text>;\n\ndescribe('JsonSchemaParser', () => {\n\n\tit('should parse schema with a single component', () => {\n\n\t\tconst parser = new JsonSchemaParser();\n\t\tconst result = parser.parseSchema({\n\t\t\tcomponent: Timeline,\n\t\t});\n\n\t\tconst tree = renderer.create(result as React.ReactElement<any>).toJSON();\n\t\texpect(tree).toMatchSnapshot();\n\t});\n\n\tit('should parse schema with a single component with props', () => {\n\n\t\tconst parser = new JsonSchemaParser();\n\t\tconst result = parser.parseSchema({\n\t\t\tcomponent: Timeline,\n\t\t\tprops: {\n\t\t\t\tstyle: {\n\t\t\t\t\tcolor: 'red'\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tconst tree = renderer.create(result as React.ReactElement<any>).toJSON();\n\t\texpect(tree).toMatchSnapshot();\n\t});\n\n\tit('should parse schema with a single component with text', () => {\n\n\t\tconst parser = new JsonSchemaParser();\n\t\tconst result = parser.parseSchema({\n\t\t\tcomponent: Timeline,\n\t\t\ttext: 'Hello',\n\t\t});\n\n\t\tconst tree = renderer.create(result as React.ReactElement<any>).toJSON();\n\t\texpect(tree).toMatchSnapshot();\n\t});\n\n\tit('should parse schema with a single component with children', () => {\n\n\t\tconst parser = new JsonSchemaParser();\n\t\tconst result = parser.parseSchema({\n\t\t\tcomponent: Timeline,\n\t\t\tchildren: [{\n\t\t\t\tcomponent: Post,\n\t\t\t\tprops: { content: 'Hello' }\n\t\t\t}, {\n\t\t\t\tcomponent: Post,\n\t\t\t\tprops: { content: 'World' }\n\t\t\t}, {\n\t\t\t\tcomponent: Post,\n\t\t\t}]\n\t\t});\n\n\t\tconst tree = renderer.create(result as React.ReactElement<any>).toJSON();\n\t\texpect(tree).toMatchSnapshot();\n\t});\n\n\tit('should parse schema with custom component lookup', () => {\n\n\t\tconst parser = new JsonSchemaParser((node: JsonComponentNode) => {\n\t\t\treturn (node.component === 'Post') ? Post : null;\n\t\t});\n\t\tconst result = parser.parseSchema({\n\t\t\tcomponent: 'Post',\n\t\t});\n\n\t\tconst tree = renderer.create(result as React.ReactElement<any>).toJSON();\n\t\texpect(tree).toMatchSnapshot();\n\t});\n\n\tit('should throw error with undefined component', () => {\n\n\t\tconst parser = new JsonSchemaParser();\n\t\tconst result = () => parser.parseSchema({\n\t\t\tcomponent: undefined as any,\n\t\t});\n\n\t\texpect(result).toThrow();\n\t});\n\n\tit('should throw error with unknown component', () => {\n\n\t\tconst parser = new JsonSchemaParser();\n\t\tconst result = () => parser.parseSchema({\n\t\t\tcomponent: 'Foo',\n\t\t});\n\n\t\texpect(result).toThrow();\n\t});\n\n\tit('parseSubSchemas should return an empty array if no params given', () => {\n\t\tconst parser = new JsonSchemaParser();\n\t\texpect(parser.parseSubSchemas()).toHaveLength(0);\n\t});\n\n});"]}
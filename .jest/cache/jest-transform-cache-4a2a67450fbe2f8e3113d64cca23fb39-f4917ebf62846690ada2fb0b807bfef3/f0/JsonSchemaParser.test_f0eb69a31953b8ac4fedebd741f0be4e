3bb08424abcada30537d4942afc86e6d
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

var JsonSchemaParser_1 = require("../JsonSchemaParser");

var react_1 = tslib_1.__importDefault(require("react"));

var react_native_1 = require("react-native");

var react_test_renderer_1 = tslib_1.__importDefault(require("react-test-renderer"));

var Timeline = function Timeline(_a) {
  var children = _a.children,
      rest = tslib_1.__rest(_a, ["children"]);

  return react_1.default.createElement(react_native_1.Text, (0, _extends2.default)({}, rest), "Timeline: ", children);
};

var Post = function Post(_a) {
  var content = _a.content,
      rest = tslib_1.__rest(_a, ["content"]);

  return react_1.default.createElement(react_native_1.Text, (0, _extends2.default)({}, rest), "Post: ", content);
};

describe('JsonSchemaParser', function () {
  it('should parse schema with a single component', function () {
    var parser = new JsonSchemaParser_1.JsonSchemaParser();
    var result = parser.parseSchema({
      component: Timeline
    });
    var tree = react_test_renderer_1.default.create(result).toJSON();
    expect(tree).toMatchSnapshot();
  });
  it('should parse schema with a single component with props', function () {
    var parser = new JsonSchemaParser_1.JsonSchemaParser();
    var result = parser.parseSchema({
      component: Timeline,
      props: {
        style: {
          color: 'red'
        }
      }
    });
    var tree = react_test_renderer_1.default.create(result).toJSON();
    expect(tree).toMatchSnapshot();
  });
  it('should parse schema with a single component with text', function () {
    var parser = new JsonSchemaParser_1.JsonSchemaParser();
    var result = parser.parseSchema({
      component: Timeline,
      text: 'Hello'
    });
    var tree = react_test_renderer_1.default.create(result).toJSON();
    expect(tree).toMatchSnapshot();
  });
  it('should parse schema with a single component with children', function () {
    var parser = new JsonSchemaParser_1.JsonSchemaParser();
    var result = parser.parseSchema({
      component: Timeline,
      children: [{
        component: Post,
        props: {
          content: 'Hello'
        }
      }, {
        component: Post,
        props: {
          content: 'World'
        }
      }, {
        component: Post
      }]
    });
    var tree = react_test_renderer_1.default.create(result).toJSON();
    expect(tree).toMatchSnapshot();
  });
  it('should parse schema with custom component lookup', function () {
    var parser = new JsonSchemaParser_1.JsonSchemaParser(function (node) {
      return node.component === 'Post' ? Post : null;
    });
    var result = parser.parseSchema({
      component: 'Post'
    });
    var tree = react_test_renderer_1.default.create(result).toJSON();
    expect(tree).toMatchSnapshot();
  });
  it('should throw error with undefined component', function () {
    var parser = new JsonSchemaParser_1.JsonSchemaParser();

    var result = function result() {
      return parser.parseSchema({
        component: undefined
      });
    };

    expect(result).toThrow();
  });
  it('should throw error with unknown component', function () {
    var parser = new JsonSchemaParser_1.JsonSchemaParser();

    var result = function result() {
      return parser.parseSchema({
        component: 'Foo'
      });
    };

    expect(result).toThrow();
  });
  it('parseSubSchemas should return an empty array if no params given', function () {
    var parser = new JsonSchemaParser_1.JsonSchemaParser();
    expect(parser.parseSubSchemas()).toHaveLength(0);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
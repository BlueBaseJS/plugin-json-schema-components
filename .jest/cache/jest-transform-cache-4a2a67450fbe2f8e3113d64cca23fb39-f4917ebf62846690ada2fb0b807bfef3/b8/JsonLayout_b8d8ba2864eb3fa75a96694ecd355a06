89a82ef2adbb5761cddacdd5f2d5ff06
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

var core_1 = require("@bluebase/core");

var lib_1 = require("../lib");

var react_1 = tslib_1.__importDefault(require("react"));

var getComponent = function getComponent(BB) {
  return function (_ref) {
    var component = _ref.component;
    return BB.Components.has(String(component)) ? BB.Components.resolve(String(component)) : null;
  };
};

var JsonLayout = function (_react_1$default$Pure) {
  (0, _inherits2.default)(JsonLayout, _react_1$default$Pure);

  function JsonLayout() {
    (0, _classCallCheck2.default)(this, JsonLayout);
    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(JsonLayout).apply(this, arguments));
  }

  (0, _createClass2.default)(JsonLayout, [{
    key: "render",
    value: function render() {
      var BB = this.context;
      var _this$props = this.props,
          filter = _this$props.filter,
          schema = _this$props.schema,
          args = _this$props.args;
      var parser = new lib_1.JsonSchemaParser(getComponent(BB));

      if (!filter) {
        return parser.parseSchema(schema);
      }

      var children = function children(loadedSchema) {
        return parser.parseSchema(loadedSchema);
      };

      return react_1.default.createElement(core_1.BlueBaseFilter, {
        filter: filter,
        value: schema,
        args: args,
        children: children
      });
    }
  }]);
  return JsonLayout;
}(react_1.default.PureComponent);

JsonLayout.contextType = core_1.BlueBaseContext;
exports.JsonLayout = JsonLayout;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL211enphbWlsL0RvY3VtZW50cy9ibHVlYmFzZS9wbHVnaW4tanNvbi1zY2hlbWEtY29tcG9uZW50cy9zcmMvSnNvbkxheW91dC9Kc29uTGF5b3V0LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLElBQUEsTUFBQSxHQUFBLE9BQUEsQ0FBQSxnQkFBQSxDQUFBOztBQUNBLElBQUEsS0FBQSxHQUFBLE9BQUEsQ0FBQSxRQUFBLENBQUE7O0FBQ0EsSUFBQSxPQUFBLEdBQUEsT0FBQSxDQUFBLGVBQUEsQ0FBQSxPQUFBLENBQUEsT0FBQSxDQUFBLENBQUE7O0FBbUJBLElBQU0sWUFBWSxHQUFHLFNBQWYsWUFBZSxDQUFDLEVBQUQsRUFBaUI7QUFDckMsU0FBTyxnQkFBcUM7QUFBQSxRQUFsQyxTQUFrQyxRQUFsQyxTQUFrQztBQUUzQyxXQUFPLEVBQUUsQ0FBQyxVQUFILENBQWMsR0FBZCxDQUFrQixNQUFNLENBQUMsU0FBRCxDQUF4QixJQUF1QyxFQUFFLENBQUMsVUFBSCxDQUFjLE9BQWQsQ0FBc0IsTUFBTSxDQUFDLFNBQUQsQ0FBNUIsQ0FBdkMsR0FBa0YsSUFBekY7QUFDQSxHQUhEO0FBSUEsQ0FMRDs7SUFpQ2EsVTs7Ozs7Ozs7Ozs2QkFJTjtBQUVMLFVBQU0sRUFBRSxHQUFhLEtBQUssT0FBMUI7QUFGSyx3QkFJNEIsS0FBSyxLQUpqQztBQUFBLFVBSUcsTUFKSCxlQUlHLE1BSkg7QUFBQSxVQUlXLE1BSlgsZUFJVyxNQUpYO0FBQUEsVUFJbUIsSUFKbkIsZUFJbUIsSUFKbkI7QUFLTCxVQUFNLE1BQU0sR0FBRyxJQUFJLEtBQUEsQ0FBQSxnQkFBSixDQUFxQixZQUFZLENBQUMsRUFBRCxDQUFqQyxDQUFmOztBQUdBLFVBQUksQ0FBQyxNQUFMLEVBQWE7QUFDWixlQUFPLE1BQU0sQ0FBQyxXQUFQLENBQW1CLE1BQW5CLENBQVA7QUFDQTs7QUFFRCxVQUFNLFFBQVEsR0FBRyxTQUFYLFFBQVcsQ0FBQyxZQUFEO0FBQUEsZUFBaUQsTUFBTSxDQUFDLFdBQVAsQ0FBbUIsWUFBbkIsQ0FBakQ7QUFBQSxPQUFqQjs7QUFFQSxhQUNDLE9BQUEsQ0FBQSxPQUFBLENBQUEsYUFBQSxDQUFDLE1BQUEsQ0FBQSxjQUFELEVBQWU7QUFDZCxRQUFBLE1BQU0sRUFBRSxNQURNO0FBRWQsUUFBQSxLQUFLLEVBQUUsTUFGTztBQUdkLFFBQUEsSUFBSSxFQUFFLElBSFE7QUFJZCxRQUFBLFFBQVEsRUFBRTtBQUpJLE9BQWYsQ0FERDtBQVFBOzs7RUExQjhCLE9BQUEsQ0FBQSxPQUFBLENBQU0sYTs7QUFFOUIsVUFBQSxDQUFBLFdBQUEsR0FBYyxNQUFBLENBQUEsZUFBZDtBQUZSLE9BQUEsQ0FBQSxVQUFBLEdBQUEsVUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJsdWVCYXNlLCBCbHVlQmFzZUNvbnRleHQsIEJsdWVCYXNlRmlsdGVyLCBNYXliZUFycmF5IH0gZnJvbSAnQGJsdWViYXNlL2NvcmUnO1xuaW1wb3J0IHsgSnNvbkNvbXBvbmVudE5vZGUsIEpzb25TY2hlbWFQYXJzZXIgfSBmcm9tICcuLi9saWInO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuZXhwb3J0IGludGVyZmFjZSBKc29uTGF5b3V0UHJvcHMge1xuXG5cdC8qKiBKU09OIFNjaGVtYS4gKi9cblx0c2NoZW1hOiBNYXliZUFycmF5PEpzb25Db21wb25lbnROb2RlPjtcblxuXHQvKiogRXZlbnQgbmFtZSB0byBmaWx0ZXIgdGhpcyBzY2hlbWEuIElmIHRoaXMgaXMgbm90IHByb3ZpZGVkLCB0aGUgc2NoZW1hIGlzIG5vdCBmaWx0ZXJlZC4gKi9cblx0ZmlsdGVyPzogc3RyaW5nO1xuXG5cdC8qKiBBcmd1bWVudHMgZm9yIHRoZSBmaWx0ZXIuICovXG5cdGFyZ3M/OiB7IFtrZXk6IHN0cmluZ106IGFueSB9O1xuXG4gIC8qKlxuICAgKiBVc2VkIHRvIGxvY2F0ZSB0aGlzIHZpZXcgaW4gZW5kLXRvLWVuZCB0ZXN0cy5cbiAgICovXG5cdHRlc3RJRD86IHN0cmluZyxcbn1cblxuY29uc3QgZ2V0Q29tcG9uZW50ID0gKEJCOiBCbHVlQmFzZSkgPT4ge1xuXHRyZXR1cm4gKHsgY29tcG9uZW50IH06IEpzb25Db21wb25lbnROb2RlKSA9PiB7XG5cblx0XHRyZXR1cm4gQkIuQ29tcG9uZW50cy5oYXMoU3RyaW5nKGNvbXBvbmVudCkpID8gQkIuQ29tcG9uZW50cy5yZXNvbHZlKFN0cmluZyhjb21wb25lbnQpKSA6IG51bGw7XG5cdH07XG59O1xuXG4vKipcbiAqICMg8J+NsSBKc29uTGF5b3V0XG4gKlxuICogUmVuZGVycyBhIENvbXBvbmVudCBiYXNlZCBvbiBKU09OIHNjaGVtYS4gVGhpcyBhbGxvd3MgZGV2ZWxvcGVycyB0byBjcmVhdGUgZHluYW1pY1xuICogbGF5b3V0cyBpbiB0aGVpciBhcHBzLCBhbmQgZXZlbiBzYXZlIHRoZSBzY2hlbWEgdG8gZGF0YWJhc2VzLlxuICpcbiAqIE1vcmVvdmVyLCBpdCBhbHNvIG1ha2VzIHRoYXQgc2NoZW1hIGZpbHRlci1hYmxlLiBTbyB0aGF0IGFueSBwbHVnaW4gY2FuIG1vZGlmeSB0aGF0IHNjaGVtYVxuICogb24gcnVudGltZS5cbiAqXG4gKiAjIyBVc2FnZTpcbiAqIGBgYGpzeFxuICogPEpzb25MYXlvdXRcbiAqIFx0ZmlsdGVyPVwiY29udGVudC1maWx0ZXJcIlxuICogXHRhcmdzPXt7IHN0eWxlOiB7IGNvbG9yOiAnYmx1ZScgfSB9fVxuICogIHNjaGVtYT17e1xuICogXHQgY29tcG9uZW50OiAnVGV4dCcsXG4gKiBcdCBwcm9wczoge1xuICogXHRcdCBzdHlsZToge1xuICogXHRcdFx0IGNvbG9yOiAncmVkJ1xuICogXHRcdCB9XG4gKiBcdCB9LFxuICogXHQgdGV4dDogJ1RoaXMgaXMgdGhlIHBhZ2UgY29udGVudC4nLFxuICogIH1cbiAqIH0gLz5cbiAqIGBgYFxuICovXG5leHBvcnQgY2xhc3MgSnNvbkxheW91dCBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQ8SnNvbkxheW91dFByb3BzPiB7XG5cblx0c3RhdGljIGNvbnRleHRUeXBlID0gQmx1ZUJhc2VDb250ZXh0O1xuXG5cdHJlbmRlcigpIHtcblxuXHRcdGNvbnN0IEJCOiBCbHVlQmFzZSA9IHRoaXMuY29udGV4dDtcblxuXHRcdGNvbnN0IHsgZmlsdGVyLCBzY2hlbWEsIGFyZ3MgfSA9IHRoaXMucHJvcHM7XG5cdFx0Y29uc3QgcGFyc2VyID0gbmV3IEpzb25TY2hlbWFQYXJzZXIoZ2V0Q29tcG9uZW50KEJCKSk7XG5cblx0XHQvLyBUaGVyZSdzIG5vIGZpbHRlciwgd2UgZG9uJ3QgbmVlZCB0byBkbyBjb21wbGV4IGFzeW5jIGhhbmRsaW5nXG5cdFx0aWYgKCFmaWx0ZXIpIHtcblx0XHRcdHJldHVybiBwYXJzZXIucGFyc2VTY2hlbWEoc2NoZW1hKTtcblx0XHR9XG5cblx0XHRjb25zdCBjaGlsZHJlbiA9IChsb2FkZWRTY2hlbWE6IE1heWJlQXJyYXk8SnNvbkNvbXBvbmVudE5vZGU+KSA9PiBwYXJzZXIucGFyc2VTY2hlbWEobG9hZGVkU2NoZW1hKTtcblxuXHRcdHJldHVybiAoXG5cdFx0XHQ8Qmx1ZUJhc2VGaWx0ZXJcblx0XHRcdFx0ZmlsdGVyPXtmaWx0ZXJ9XG5cdFx0XHRcdHZhbHVlPXtzY2hlbWF9XG5cdFx0XHRcdGFyZ3M9e2FyZ3N9XG5cdFx0XHRcdGNoaWxkcmVuPXtjaGlsZHJlbn1cblx0XHRcdC8+XG5cdFx0KTtcblx0fVxufVxuIl19
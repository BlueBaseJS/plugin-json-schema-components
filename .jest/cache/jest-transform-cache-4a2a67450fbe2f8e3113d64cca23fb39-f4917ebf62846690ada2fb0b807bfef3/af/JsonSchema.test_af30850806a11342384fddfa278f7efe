f018459a17a877f8dbd7ab04629c00cb
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

var __1 = require("../");

var core_1 = require("@bluebase/core");

var react_1 = tslib_1.__importDefault(require("react"));

var react_test_renderer_1 = tslib_1.__importDefault(require("react-test-renderer"));

describe('JsonLayout', function () {
  test("should render a text component with red color", function (done) {
    var component = react_test_renderer_1.default.create(react_1.default.createElement(core_1.BlueBaseApp, null, react_1.default.createElement(__1.JsonLayout, {
      schema: {
        component: 'Text',
        props: {
          style: {
            color: 'red'
          }
        },
        text: 'This component is generated through JsonLayout Component'
      }
    })));
    setTimeout(function () {
      var tree = component.toJSON();
      expect(tree.props.style[1]).toMatchObject({
        color: 'red'
      });
      expect(tree.children.join()).toBe('This component is generated through JsonLayout Component');
      expect(tree).toMatchSnapshot();
      done();
    });
  });
  test("should create layout through createJsonLayout function", function (done) {
    var Layout = __1.createJsonLayout({
      schema: {
        component: 'Text',
        props: {
          style: {
            color: 'red'
          }
        },
        text: 'This component is generated through JsonLayout Component'
      }
    });

    var component = react_test_renderer_1.default.create(react_1.default.createElement(core_1.BlueBaseApp, null, react_1.default.createElement(Layout, null)));
    setTimeout(function () {
      var tree = component.toJSON();
      expect(tree.props.style[1]).toMatchObject({
        color: 'red'
      });
      expect(tree.children.join()).toBe('This component is generated through JsonLayout Component');
      expect(tree).toMatchSnapshot();
      done();
    });
  });
  test("should render a text component with red color that is processed by filters", function (done) {
    var filter = function filter(schema, args) {
      return (0, _extends2.default)({}, schema, {
        props: (0, _extends2.default)({}, schema.props, {
          style: (0, _extends2.default)({}, schema.props.style, args.style)
        }),
        text: 'Content changed by filter!'
      });
    };

    var component = react_test_renderer_1.default.create(react_1.default.createElement(core_1.BlueBaseApp, {
      filters: {
        'content-filter': filter
      }
    }, react_1.default.createElement(__1.JsonLayout, {
      filter: "content-filter",
      args: {
        style: {
          color: 'blue'
        }
      },
      schema: {
        component: 'Text',
        props: {
          style: {
            color: 'red'
          }
        },
        text: 'This component is generated through JsonLayout Component'
      }
    })));
    setTimeout(function () {
      var tree = component.toJSON();
      expect(tree.props.style[1]).toMatchObject({
        color: 'blue'
      });
      expect(tree.children.join()).toBe('Content changed by filter!');
      expect(tree).toMatchSnapshot();
      done();
    });
  });
  test("should render a null for unknown component", function (done) {
    var component = react_test_renderer_1.default.create(react_1.default.createElement(core_1.BlueBaseApp, null, react_1.default.createElement(__1.JsonLayout, {
      schema: {
        component: 'Foo',
        text: 'This component is generated through JsonLayout Component'
      }
    })));
    setTimeout(function () {
      var tree = component.toJSON();
      expect(tree).toMatchSnapshot();
      expect(tree.children[0].children.join()).toBe('ðŸš¨ BlueBase Error');
      expect(tree.children[1].children.join()).toBe('Could not parse React JSON Schema. Reason: Could not resolve component.');
      done();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
{"version":3,"sources":["/home/muzzamil/Documents/bluebase/plugin-json-schema-components/src/JsonLayout/__tests__/JsonSchema.test.tsx"],"names":[],"mappings":"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","sourcesContent":["import { JsonLayout, createJsonLayout } from '../';\nimport { BlueBaseApp } from '@bluebase/core';\nimport React from 'react';\nimport TestRenderer from 'react-test-renderer';\n\ndescribe('JsonLayout', () => {\n\n\ttest(`should render a text component with red color`, (done) => {\n\t\tconst component = TestRenderer.create(\n\t\t\t<BlueBaseApp>\n\t\t\t\t<JsonLayout\n\t\t\t\t\tschema={{\n\t\t\t\t\t\tcomponent: 'Text',\n\t\t\t\t\t\tprops: {\n\t\t\t\t\t\t\tstyle: {\n\t\t\t\t\t\t\t\tcolor: 'red'\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttext: 'This component is generated through JsonLayout Component',\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t</BlueBaseApp>\n\t\t);\n\n\n\t\tsetTimeout(() => {\n\t\t\tconst tree = component.toJSON();\n\t\t\texpect((tree as any).props.style[1]).toMatchObject({\n\t\t\t\tcolor: 'red'\n\t\t\t});\n\t\t\texpect((tree as any).children.join()).toBe('This component is generated through JsonLayout Component');\n\t\t\texpect(tree).toMatchSnapshot();\n\t\t\tdone();\n\t\t});\n\t});\n\n\ttest(`should create layout through createJsonLayout function`, (done) => {\n\n\t\tconst Layout = createJsonLayout({\n\t\t\tschema: {\n\t\t\t\tcomponent: 'Text',\n\t\t\t\tprops: {\n\t\t\t\t\tstyle: {\n\t\t\t\t\t\tcolor: 'red'\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\ttext: 'This component is generated through JsonLayout Component',\n\t\t\t}\n\t\t});\n\t\tconst component = TestRenderer.create(\n\t\t\t<BlueBaseApp>\n\t\t\t\t<Layout/>\n\t\t\t</BlueBaseApp>\n\t\t);\n\n\n\t\tsetTimeout(() => {\n\t\t\tconst tree = component.toJSON();\n\t\t\texpect((tree as any).props.style[1]).toMatchObject({\n\t\t\t\tcolor: 'red'\n\t\t\t});\n\t\t\texpect((tree as any).children.join()).toBe('This component is generated through JsonLayout Component');\n\t\t\texpect(tree).toMatchSnapshot();\n\t\t\tdone();\n\t\t});\n\t});\n\n\ttest(`should render a text component with red color that is processed by filters`, (done) => {\n\n\t\tconst filter = (schema: any, args: { style: any }) => ({\n\t\t\t...schema,\n\t\t\tprops: {\n\t\t\t\t...schema.props,\n\t\t\t\tstyle: {\n\t\t\t\t\t...schema.props.style,\n\t\t\t\t\t...args.style,\n\t\t\t\t}\n\t\t\t},\n\t\t\ttext: 'Content changed by filter!',\n\t\t});\n\n\t\tconst component = TestRenderer.create(\n\t\t\t<BlueBaseApp filters={{ 'content-filter': filter }}>\n\t\t\t\t<JsonLayout\n\t\t\t\t\tfilter=\"content-filter\"\n\t\t\t\t\targs={{ style: { color: 'blue' } }}\n\t\t\t\t\tschema={{\n\t\t\t\t\t\tcomponent: 'Text',\n\t\t\t\t\t\tprops: {\n\t\t\t\t\t\t\tstyle: {\n\t\t\t\t\t\t\t\tcolor: 'red'\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttext: 'This component is generated through JsonLayout Component',\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t/>\n\t\t\t</BlueBaseApp>\n\t\t);\n\n\t\tsetTimeout(() => {\n\t\t\tconst tree = component.toJSON();\n\t\t\texpect((tree as any).props.style[1]).toMatchObject({\n\t\t\t\tcolor: 'blue'\n\t\t\t});\n\t\t\texpect((tree as any).children.join()).toBe('Content changed by filter!');\n\t\t\texpect(tree).toMatchSnapshot();\n\t\t\tdone();\n\t\t});\n\t});\n\n\ttest(`should render a null for unknown component`, (done) => {\n\n\t\tconst component = TestRenderer.create(\n\t\t\t<BlueBaseApp>\n\t\t\t\t<JsonLayout\n\t\t\t\t\tschema={{\n\t\t\t\t\t\tcomponent: 'Foo',\n\t\t\t\t\t\ttext: 'This component is generated through JsonLayout Component',\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t</BlueBaseApp>\n\t\t);\n\n\n\t\tsetTimeout(() => {\n\t\t\tconst tree = component.toJSON();\n\t\t\texpect(tree).toMatchSnapshot();\n\t\t\texpect((tree as any).children[0].children.join()).toBe('ðŸš¨ BlueBase Error');\n\t\t\texpect((tree as any).children[1].children.join())\n\t\t\t\t.toBe('Could not parse React JSON Schema. Reason: Could not resolve component.');\n\t\t\tdone();\n\t\t});\n\t});\n\n});\n"]}
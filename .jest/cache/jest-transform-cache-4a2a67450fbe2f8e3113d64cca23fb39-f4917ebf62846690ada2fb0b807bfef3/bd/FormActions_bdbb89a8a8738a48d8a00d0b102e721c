83fe61be95ebed51ad007197b114c350
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

var FormFields_1 = require("../FormFields");

var react_1 = tslib_1.__importDefault(require("react"));

var components_1 = require("@bluebase/components");

var FieldWrapper = function FieldWrapper(_ref) {
  var field = _ref.field,
      parent = _ref.parent,
      children = _ref.children;
  var direction = parent.direction,
      styles = parent.styles;
  return react_1.default.createElement(components_1.View, {
    key: field.name,
    style: direction === 'left' ? styles.fieldContainerLeft : styles.fieldContainerRight
  }, children);
};

exports.FormActions = function (props) {
  var direction = props.direction,
      style = props.style,
      _styles = props.styles;
  var styles = _styles;
  return react_1.default.createElement(components_1.View, {
    style: [styles.root, direction === 'left' ? styles.rootLeft : styles.rootRight, style],
    testID: "form-actions"
  }, react_1.default.createElement(FormFields_1.FormFields, (0, _extends2.default)({}, props, {
    FieldWrapper: FieldWrapper
  })));
};

exports.FormActions.defaultProps = {};

exports.FormActions.defaultStyles = function (theme) {
  return {
    fieldContainerLeft: {
      marginLeft: theme.spacing.unit * 2
    },
    fieldContainerRight: {
      marginRight: theme.spacing.unit * 2
    },
    fieldContainerBetween: {
      marginLeft: theme.spacing.unit * 0,
      marginRight: theme.spacing.unit * 0
    },
    root: {
      flexDirection: 'row',
      paddingVertical: theme.spacing.unit * 2
    },
    rootLeft: {
      justifyContent: 'flex-start'
    },
    rootRight: {
      justifyContent: 'flex-end'
    },
    rootSpaceBetween: {
      justifyContent: 'space-between'
    }
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL211enphbWlsL0RvY3VtZW50cy9ibHVlYmFzZS9wbHVnaW4tanNvbi1zY2hlbWEtY29tcG9uZW50cy9zcmMvSnNvbkZvcm0vRmllbGRzL0Zvcm1BY3Rpb25zLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQSxJQUFBLFlBQUEsR0FBQSxPQUFBLENBQUEsZUFBQSxDQUFBOztBQUdBLElBQUEsT0FBQSxHQUFBLE9BQUEsQ0FBQSxlQUFBLENBQUEsT0FBQSxDQUFBLE9BQUEsQ0FBQSxDQUFBOztBQUVBLElBQUEsWUFBQSxHQUFBLE9BQUEsQ0FBQSxzQkFBQSxDQUFBOztBQXNCQSxJQUFNLFlBQVksR0FBRyxTQUFmLFlBQWUsT0FBa0Q7QUFBQSxNQUEvQyxLQUErQyxRQUEvQyxLQUErQztBQUFBLE1BQXhDLE1BQXdDLFFBQXhDLE1BQXdDO0FBQUEsTUFBakMsUUFBaUMsUUFBakMsUUFBaUM7QUFBQSxNQUU5RCxTQUY4RCxHQUV4QyxNQUZ3QyxDQUU5RCxTQUY4RDtBQUFBLE1BRW5ELE1BRm1ELEdBRXhDLE1BRndDLENBRW5ELE1BRm1EO0FBSXRFLFNBQ0MsT0FBQSxDQUFBLE9BQUEsQ0FBQSxhQUFBLENBQUMsWUFBQSxDQUFBLElBQUQsRUFBSztBQUNMLElBQUEsR0FBRyxFQUFFLEtBQUssQ0FBQyxJQUROO0FBRUwsSUFBQSxLQUFLLEVBQUUsU0FBUyxLQUFLLE1BQWQsR0FBc0IsTUFBTSxDQUFDLGtCQUE3QixHQUFrRCxNQUFNLENBQUM7QUFGM0QsR0FBTCxFQUlBLFFBSkEsQ0FERDtBQVFBLENBWkQ7O0FBa0JhLE9BQUEsQ0FBQSxXQUFBLEdBQWMsVUFBQyxLQUFELEVBQTRCO0FBQUEsTUFFOUMsU0FGOEMsR0FFUixLQUZRLENBRTlDLFNBRjhDO0FBQUEsTUFFbkMsS0FGbUMsR0FFUixLQUZRLENBRW5DLEtBRm1DO0FBQUEsTUFFcEIsT0FGb0IsR0FFUixLQUZRLENBRTVCLE1BRjRCO0FBR3RELE1BQU0sTUFBTSxHQUFHLE9BQWY7QUFDQSxTQUVDLE9BQUEsQ0FBQSxPQUFBLENBQUEsYUFBQSxDQUFDLFlBQUEsQ0FBQSxJQUFELEVBQUs7QUFBQyxJQUFBLEtBQUssRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFSLEVBQWMsU0FBUyxLQUFLLE1BQWQsR0FBdUIsTUFBTSxDQUFDLFFBQTlCLEdBQXlDLE1BQU0sQ0FBQyxTQUE5RCxFQUF5RSxLQUF6RSxDQUFSO0FBRUwsSUFBQSxNQUFNLEVBQUM7QUFGRixHQUFMLEVBR0EsT0FBQSxDQUFBLE9BQUEsQ0FBQSxhQUFBLENBQUMsWUFBQSxDQUFBLFVBQUQsRUFBVyx1QkFBQSxFQUFBLEVBQUssS0FBTCxFQUFVO0FBQUUsSUFBQSxZQUFZLEVBQUU7QUFBaEIsR0FBVixDQUFYLENBSEEsQ0FGRDtBQVFBLENBWlk7O0FBY2IsT0FBQSxDQUFBLFdBQUEsQ0FBWSxZQUFaLEdBQTJCLEVBQTNCOztBQUlBLE9BQUEsQ0FBQSxXQUFBLENBQVksYUFBWixHQUE0QixVQUFDLEtBQUQ7QUFBQSxTQUFzQztBQUNqRSxJQUFBLGtCQUFrQixFQUFFO0FBQ25CLE1BQUEsVUFBVSxFQUFFLEtBQUssQ0FBQyxPQUFOLENBQWMsSUFBZCxHQUFxQjtBQURkLEtBRDZDO0FBSWpFLElBQUEsbUJBQW1CLEVBQUU7QUFDcEIsTUFBQSxXQUFXLEVBQUUsS0FBSyxDQUFDLE9BQU4sQ0FBYyxJQUFkLEdBQXFCO0FBRGQsS0FKNEM7QUFRakUsSUFBQSxxQkFBcUIsRUFBRTtBQUN0QixNQUFBLFVBQVUsRUFBRSxLQUFLLENBQUMsT0FBTixDQUFjLElBQWQsR0FBcUIsQ0FEWDtBQUV0QixNQUFBLFdBQVcsRUFBRSxLQUFLLENBQUMsT0FBTixDQUFjLElBQWQsR0FBcUI7QUFGWixLQVIwQztBQVlqRSxJQUFBLElBQUksRUFBRTtBQUNMLE1BQUEsYUFBYSxFQUFFLEtBRFY7QUFFSixNQUFBLGVBQWUsRUFBRSxLQUFLLENBQUMsT0FBTixDQUFjLElBQWQsR0FBcUI7QUFGbEMsS0FaMkQ7QUFnQmpFLElBQUEsUUFBUSxFQUFFO0FBQ1QsTUFBQSxjQUFjLEVBQUU7QUFEUCxLQWhCdUQ7QUFvQmpFLElBQUEsU0FBUyxFQUFFO0FBQ1YsTUFBQSxjQUFjLEVBQUU7QUFETixLQXBCc0Q7QUF1QmpFLElBQUEsZ0JBQWdCLEVBQUU7QUFDakIsTUFBQSxjQUFjLEVBQUU7QUFEQztBQXZCK0MsR0FBdEM7QUFBQSxDQUE1QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEZpZWxkV3JhcHBlclByb3BzLCBGb3JtRmllbGRzIH0gZnJvbSAnLi4vRm9ybUZpZWxkcyc7XG5pbXBvcnQgeyBTdHlsZVByb3AsIFZpZXdTdHlsZSB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgeyBGb3JtRmllbGRQcm9wcyB9IGZyb20gJy4vRm9ybUZpZWxkUHJvcHMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFRoZW1lIH0gZnJvbSAnQGJsdWViYXNlL2NvcmUnO1xuaW1wb3J0IHsgVmlldyB9IGZyb20gJ0BibHVlYmFzZS9jb21wb25lbnRzJztcblxuZXhwb3J0IGludGVyZmFjZSBGb3JtQWN0aW9uc1N0eWxlcyB7XG5cdGZpZWxkQ29udGFpbmVyTGVmdDogU3R5bGVQcm9wPFZpZXdTdHlsZT47XG5cdGZpZWxkQ29udGFpbmVyUmlnaHQ6IFN0eWxlUHJvcDxWaWV3U3R5bGU+O1xuXHRmaWVsZENvbnRhaW5lckJldHdlZW4gOlN0eWxlUHJvcDxWaWV3U3R5bGU+O1xuXHRyb290U3BhY2VCZXR3ZWVuIDogU3R5bGVQcm9wPFZpZXdTdHlsZT47XG5cdHJvb3Q6IFN0eWxlUHJvcDxWaWV3U3R5bGU+O1xuXHRyb290TGVmdDogU3R5bGVQcm9wPFZpZXdTdHlsZT47XG5cdHJvb3RSaWdodDogU3R5bGVQcm9wPFZpZXdTdHlsZT47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRm9ybUFjdGlvbnNQcm9wcyB7XG5cdHR5cGU6ICdhY3Rpb25zJztcblx0bmFtZTogc3RyaW5nO1xuXHRkaXJlY3Rpb246ICdsZWZ0JyB8ICdyaWdodCcgfCAnc3BhY2UtYmV0d2Vlbic7XG5cdGZpZWxkczogRm9ybUZpZWxkUHJvcHNbXTtcblx0c3R5bGU/OiBTdHlsZVByb3A8Vmlld1N0eWxlPjtcblx0c3R5bGVzPzogUGFydGlhbDxGb3JtQWN0aW9uc1N0eWxlcz47XG59XG5cblxuY29uc3QgRmllbGRXcmFwcGVyID0gKHsgZmllbGQsIHBhcmVudCxjaGlsZHJlbiB9OiBGaWVsZFdyYXBwZXJQcm9wcykgPT4ge1xuXG5cdGNvbnN0IHsgZGlyZWN0aW9uLCBzdHlsZXMgfSA9IHBhcmVudDtcblxuXHRyZXR1cm4gKFxuXHRcdDxWaWV3XG5cdFx0a2V5PXtmaWVsZC5uYW1lfVxuXHRcdHN0eWxlPXtkaXJlY3Rpb24gPT09ICdsZWZ0Jz8gc3R5bGVzLmZpZWxkQ29udGFpbmVyTGVmdCA6IHN0eWxlcy5maWVsZENvbnRhaW5lclJpZ2h0ICAgfVxuXHQ+XG5cdHtjaGlsZHJlbn1cblx0PC9WaWV3PlxuXHQpO1xufTtcblxuLyoqXG4gKiBBIGNvbXBvbmVudCB0aGF0IHJlbmRlcnMgZm9ybSBhY3Rpb25zLCBpLmUuIHN1Ym1pdCBvciByZXNldCBidXR0b25zXG4gKiBAcGFyYW0gcHJvcHNcbiAqL1xuZXhwb3J0IGNvbnN0IEZvcm1BY3Rpb25zID0gKHByb3BzOiBGb3JtQWN0aW9uc1Byb3BzKSA9PiB7XG5cblx0Y29uc3QgeyBkaXJlY3Rpb24sIHN0eWxlLCBzdHlsZXM6IF9zdHlsZXMgfSA9IHByb3BzO1xuXHRjb25zdCBzdHlsZXMgPSBfc3R5bGVzIGFzIEZvcm1BY3Rpb25zU3R5bGVzO1xuXHRyZXR1cm4gKFxuXHRcdFxuXHRcdDxWaWV3IHN0eWxlPXtbc3R5bGVzLnJvb3QsIGRpcmVjdGlvbiA9PT0gJ2xlZnQnID8gc3R5bGVzLnJvb3RMZWZ0IDogc3R5bGVzLnJvb3RSaWdodCAsc3R5bGVdfSBcblx0XHRcblx0XHR0ZXN0SUQ9XCJmb3JtLWFjdGlvbnNcIj5cblx0XHQ8Rm9ybUZpZWxkcyB7Li4ucHJvcHN9IEZpZWxkV3JhcHBlcj17RmllbGRXcmFwcGVyfSAvPlxuXHQ8L1ZpZXc+XG5cdCk7XG59O1xuXG5Gb3JtQWN0aW9ucy5kZWZhdWx0UHJvcHMgPSB7XG5cdC8vZGlyZWN0aW9uOiAncmlnaHQnLFxufTtcblxuRm9ybUFjdGlvbnMuZGVmYXVsdFN0eWxlcyA9ICh0aGVtZTogVGhlbWUpOiBGb3JtQWN0aW9uc1N0eWxlcyA9PiAoe1xuXHRmaWVsZENvbnRhaW5lckxlZnQ6IHtcblx0XHRtYXJnaW5MZWZ0OiB0aGVtZS5zcGFjaW5nLnVuaXQgKiAyLFxuXHR9LFxuXHRmaWVsZENvbnRhaW5lclJpZ2h0OiB7XG5cdFx0bWFyZ2luUmlnaHQ6IHRoZW1lLnNwYWNpbmcudW5pdCAqIDIsXG5cdH0sXG5cdFxuXHRmaWVsZENvbnRhaW5lckJldHdlZW4gOntcblx0XHRtYXJnaW5MZWZ0OiB0aGVtZS5zcGFjaW5nLnVuaXQgKiAwLFxuXHRcdG1hcmdpblJpZ2h0OiB0aGVtZS5zcGFjaW5nLnVuaXQgKiAwLFxuXHR9LFxuXHRyb290OiB7XG5cdFx0ZmxleERpcmVjdGlvbjogJ3JvdycsXG5cdFx0IHBhZGRpbmdWZXJ0aWNhbDogdGhlbWUuc3BhY2luZy51bml0ICogMixcblx0fSxcblx0cm9vdExlZnQ6IHtcblx0XHRqdXN0aWZ5Q29udGVudDogJ2ZsZXgtc3RhcnQnLFxuXHRcdFxuXHR9LFxuXHRyb290UmlnaHQ6IHtcblx0XHRqdXN0aWZ5Q29udGVudDogJ2ZsZXgtZW5kJyxcblx0fSxcblx0cm9vdFNwYWNlQmV0d2Vlbjoge1xuXHRcdGp1c3RpZnlDb250ZW50OiAnc3BhY2UtYmV0d2VlbicsXG5cdH1cbn0pOyJdfQ==
{"version":3,"sources":["/home/muzzamil/Documents/bluebase/plugin-json-schema-components/src/JsonSchemaParser.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAIA,IAAA,OAAA,GAAA,OAAA,CAAA,eAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,IAAA,cAAA,GAAA,OAAA,CAAA,eAAA,CAAA,OAAA,CAAA,cAAA,CAAA,CAAA;;AACA,IAAA,iBAAA,GAAA,OAAA,CAAA,eAAA,CAAA,OAAA,CAAA,iBAAA,CAAA,CAAA;;IAea,gB;AACZ,8BAAiE;AAAA,QAA7C,YAA6C,uEAAV;AAAA,aAAM,IAAN;AAAA,KAAU;AAAA;AAA7C,SAAA,YAAA,GAAA,YAAA;AAEnB;;;;gCAEW,M,EAAqC;AAChD,UAAI,KAAK,CAAC,OAAN,CAAc,MAAd,CAAJ,EAA2B;AAC1B,eAAO,KAAK,eAAL,CAAqB,MAArB,CAAP;AACA;;AAED,aAAO,KAAK,eAAL,CAAqB,MAArB,CAAP;AACA;;;sCAEmD;AAAA,UAApC,UAAoC,uEAAF,EAAE;AACnD,UAAM,UAAU,GAAmC,EAAnD;AACA,UAAI,KAAK,GAAG,CAAZ;;AACA,2BAAwB,UAAxB,gKAAoC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,YAAzB,UAAyB;AACnC,QAAA,UAAS,CAAC,KAAV,GAAkB,UAAS,CAAC,KAAV,IAAmB,EAArC;AACA,QAAA,UAAS,CAAC,KAAV,CAAgB,GAAhB,GAAsB,UAAS,CAAC,KAAV,CAAgB,GAAhB,IAAuB,MAAM,CAAC,KAAD,CAAnD;AACA,YAAM,SAAS,GAAG,KAAK,WAAL,CAAiB,UAAjB,CAAlB;AACA,QAAA,UAAU,CAAC,IAAX,CAAgB,SAAhB;AACA,QAAA,KAAK;AACL;;AACD,aAAO,UAAP;AACA;;;oCAEe,M,EAAyB;AAAA,UAChC,IADgC,GACL,MADK,CAChC,IADgC;AAAA,UAC1B,KAD0B,GACL,MADK,CAC1B,KAD0B;AAAA,UACnB,SADmB,GACL,MADK,CACnB,SADmB;;AAGxC,UAAI,cAAA,CAAA,OAAA,CAAM,SAAN,CAAJ,EAAsB;AACrB,cAAM,KAAK,CACV,6FADU,CAAX;AAGA;;AAOD,UAAM,SAAS,GAAG,KAAK,gBAAL,CAAsB,MAAtB,CAAlB;AACA,UAAM,QAAQ,GAAG,IAAI,IAAI,KAAK,wBAAL,CAA8B,MAA9B,CAAzB;AAEA,aAAO,OAAA,CAAA,OAAA,CAAM,aAAN,CAAoB,SAApB,EAA+B,KAA/B,EAAsC,QAAtC,CAAP;AACA;;;qCAEgB,I,EAAuB;AAEvC,UAAI,CAAC,iBAAA,CAAA,OAAA,CAAS,IAAI,CAAC,SAAd,CAAD,IAA6B,IAAI,CAAC,SAAL,KAAmB,MAAM,CAAC,IAAI,CAAC,SAAN,CAA1D,EAA4E;AAC3E,eAAO,IAAI,CAAC,SAAZ;AACA;;AAED,UAAM,SAAS,GAAG,KAAK,YAAL,CAAkB,IAAlB,CAAlB;;AAEA,UAAI,SAAJ,EAAe;AACd,eAAO,SAAP;AACA;;AAED,YAAM,KAAK,CAAC,yEAAD,CAAX;AACA;;;oDAImB;AAAA,UADnB,QACmB,SADnB,QACmB;AACnB,aAAO,CAAC,cAAA,CAAA,OAAA,CAAM,QAAN,CAAD,GAAmB,KAAK,WAAL,CAAiB,QAAjB,CAAnB,GAAgD,SAAvD;AACA;;;;;AAjEF,OAAA,CAAA,gBAAA,GAAA,gBAAA","sourcesContent":["/**\n * Initial code take from https://github.com/TechniqueSoftware/react-json-schema\n */\nimport { MaybeArray } from '@bluebase/core';\nimport React from 'react';\nimport isNil from 'lodash.isnil';\nimport isString from 'lodash.isstring';\n\nexport interface JsonComponentNode {\n\tcomponent: string | React.ComponentType<any>;\n\ttext?: string;\n\tprops?: {\n\t\tkey?: string;\n\t\t[key: string]: any;\n\t};\n\tchildren?: JsonComponentNode[];\n\tname?: string;\n}\n\nexport type ResolveComponentFn = (node: JsonComponentNode) => React.ComponentType<any> | null;\n\nexport class JsonSchemaParser {\n\tconstructor(private getComponent: ResolveComponentFn = () => null) {\n\t\t//\n\t}\n\n\tparseSchema(schema: MaybeArray<JsonComponentNode>): MaybeArray<React.ReactElement<any>> {\n\t\tif (Array.isArray(schema)) {\n\t\t\treturn this.parseSubSchemas(schema);\n\t\t}\n\n\t\treturn this.createComponent(schema);\n\t}\n\n\tparseSubSchemas(subSchemas: JsonComponentNode[] = []): Array<React.ReactElement<any>> {\n\t\tconst Components: Array<React.ReactElement<any>> = [];\n\t\tlet index = 0;\n\t\tfor (const subSchema of subSchemas) {\n\t\t\tsubSchema.props = subSchema.props || {};\n\t\t\tsubSchema.props.key = subSchema.props.key || String(index);\n\t\t\tconst Component = this.parseSchema(subSchema) as React.ReactElement<any>;\n\t\t\tComponents.push(Component);\n\t\t\tindex++;\n\t\t}\n\t\treturn Components;\n\t}\n\n\tcreateComponent(schema: JsonComponentNode): React.ReactElement<any> {\n\t\tconst { text, props, component } = schema;\n\n\t\tif (isNil(component)) {\n\t\t\tthrow Error(\n\t\t\t\t'Could not parse React JSON Schema. Reason: \"component\" property is required, but not given.'\n\t\t\t);\n\t\t}\n\n\t\t// // If schema.component is a React Component, return it\n\t\t// if (!isString(component) && React.isValidElement(component)) {\n\t\t// \treturn component;\n\t\t// }\n\n\t\tconst Component = this.resolveComponent(schema);\n\t\tconst Children = text || this.resolveComponentChildren(schema);\n\n\t\treturn React.createElement(Component, props, Children);\n\t}\n\n\tresolveComponent(node: JsonComponentNode): React.ComponentType<any> {\n\t\t// component is already a react component\n\t\tif (!isString(node.component) && node.component === Object(node.component)) {\n\t\t\treturn node.component;\n\t\t}\n\n\t\tconst Component = this.getComponent(node);\n\n\t\tif (Component) {\n\t\t\treturn Component;\n\t\t}\n\n\t\tthrow Error('Could not parse React JSON Schema. Reason: Could not resolve component.');\n\t}\n\n\tresolveComponentChildren({\n\t\tchildren,\n\t}: JsonComponentNode): MaybeArray<React.ReactElement<any>> | undefined {\n\t\treturn !isNil(children) ? this.parseSchema(children) : undefined;\n\t}\n}\n"]}
3d332ec1213a70f11a286209b71c1313
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

var core_1 = require("@bluebase/core");

var __1 = require("..");

var formik_1 = require("formik");

var index_1 = tslib_1.__importDefault(require("../../index"));

var react_1 = tslib_1.__importDefault(require("react"));

var react_native_1 = require("react-native");

var enzyme_1 = require("enzyme");

var enzyme_async_helpers_1 = require("enzyme-async-helpers");

var fields = [{
  label: 'Username',
  name: 'username',
  required: true,
  type: 'text'
}, {
  schema: {
    component: 'Text',
    text: 'Text Component'
  },
  type: 'component'
}, {
  label: 'Temp',
  max: 32,
  min: 16,
  name: 'temp',
  step: 1,
  type: 'range'
}];
var initialValues = {
  temp: 26,
  username: ''
};

var FieldWrapper = function FieldWrapper(props) {
  return react_1.default.createElement(react_native_1.Text, null, props.field.type);
};

describe('FormFields', function () {
  it('should render all form fields in the schema', function _callee() {
    var onSubmit, component;
    return _regenerator.default.async(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            onSubmit = jest.fn();
            component = enzyme_1.mount(react_1.default.createElement(core_1.BlueBaseApp, {
              plugins: [index_1.default]
            }, react_1.default.createElement(formik_1.Formik, {
              initialValues: initialValues,
              onSubmit: onSubmit
            }, react_1.default.createElement(__1.FormFields, {
              fields: fields
            }))));
            _context.next = 4;
            return _regenerator.default.awrap(enzyme_async_helpers_1.waitForElement(component, __1.FormFields));

          case 4:
            expect(component.find('FormTextInput_TextInput_Noop').last().prop('name')).toBe('username');
            expect(component.find('FormRangeInput_FormTextInput_TextInput_Noop').last().prop('name')).toBe('temp');
            expect(component.find('JsonLayout_Noop Text').last().text()).toBe('Text Component');
            expect(component.find('FormFields').children()).toHaveLength(3);
            expect(component.find('FormFields').childAt(0).prop('name')).toBe('username');
            expect(component.find('FormFields').childAt(1).prop('name')).toBe('1-component');
            expect(component.find('FormFields').childAt(2).prop('name')).toBe('temp');

          case 11:
          case "end":
            return _context.stop();
        }
      }
    });
  });
  it('should not render any field if fields property is undefined', function _callee2() {
    var onSubmit, component;
    return _regenerator.default.async(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            onSubmit = jest.fn();
            component = enzyme_1.mount(react_1.default.createElement(core_1.BlueBaseApp, {
              plugins: [index_1.default]
            }, react_1.default.createElement(formik_1.Formik, {
              initialValues: initialValues,
              onSubmit: onSubmit
            }, react_1.default.createElement(__1.FormFields, {
              fields: undefined
            }))));
            _context2.next = 4;
            return _regenerator.default.awrap(enzyme_async_helpers_1.waitForElement(component, __1.FormFields));

          case 4:
            expect(component.find('FormFields').last().children()).toHaveLength(0);

          case 5:
          case "end":
            return _context2.stop();
        }
      }
    });
  });
  it('should render custom children, if children prop is provided', function _callee3() {
    var onSubmit, component;
    return _regenerator.default.async(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            onSubmit = jest.fn();
            component = enzyme_1.mount(react_1.default.createElement(core_1.BlueBaseApp, {
              plugins: [index_1.default]
            }, react_1.default.createElement(formik_1.Formik, {
              initialValues: initialValues,
              onSubmit: onSubmit
            }, react_1.default.createElement(__1.FormFields, {
              fields: fields
            }, function (renderField) {
              return fields.map(function (f, i) {
                return renderField(f, i, {});
              });
            }))));
            _context3.next = 4;
            return _regenerator.default.awrap(enzyme_async_helpers_1.waitForElement(component, __1.FormFields));

          case 4:
            expect(component.find('FormTextInput_TextInput_Noop').last().prop('name')).toBe('username');
            expect(component.find('FormRangeInput_FormTextInput_TextInput_Noop').last().prop('name')).toBe('temp');
            expect(component.find('JsonLayout_Noop Text').last().text()).toBe('Text Component');

          case 7:
          case "end":
            return _context3.stop();
        }
      }
    });
  });
  it('should wrap fields in FieldWrapper component', function _callee4() {
    var onSubmit, component;
    return _regenerator.default.async(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            onSubmit = jest.fn();
            component = enzyme_1.mount(react_1.default.createElement(core_1.BlueBaseApp, {
              plugins: [index_1.default]
            }, react_1.default.createElement(formik_1.Formik, {
              initialValues: initialValues,
              onSubmit: onSubmit
            }, react_1.default.createElement(__1.FormFields, {
              fields: fields,
              FieldWrapper: FieldWrapper
            }))));
            _context4.next = 4;
            return _regenerator.default.awrap(enzyme_async_helpers_1.waitForElement(component, __1.FormFields));

          case 4:
            expect(component.find('FieldWrapper').at(0).text()).toBe('text');
            expect(component.find('FieldWrapper').at(1).text()).toBe('component');
            expect(component.find('FieldWrapper').at(2).text()).toBe('range');

          case 7:
          case "end":
            return _context4.stop();
        }
      }
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
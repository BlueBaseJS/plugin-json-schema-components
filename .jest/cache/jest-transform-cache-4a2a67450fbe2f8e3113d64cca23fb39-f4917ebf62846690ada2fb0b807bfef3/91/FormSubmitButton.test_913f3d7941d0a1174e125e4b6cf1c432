dfefca18b4e076e971173aeafe412b7a
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

var core_1 = require("@bluebase/core");

var FormSubmitButton_1 = require("../FormSubmitButton");

var formik_1 = require("formik");

var plugin_material_ui_1 = tslib_1.__importDefault(require("@bluebase/plugin-material-ui"));

var index_1 = tslib_1.__importDefault(require("../../../index"));

var react_1 = tslib_1.__importDefault(require("react"));

var enzyme_1 = require("enzyme");

var enzyme_async_helpers_1 = require("enzyme-async-helpers");

var fieldProps = [{
  name: 'submit',
  title: 'Login',
  type: 'submit',
  loading: false,
  nested: true
}, {
  name: 'submit',
  title: 'Login',
  type: 'submit',
  loading: false,
  nested: false
}];
var initialValues = {};
describe('FormSubmitButton', function () {
  it('should render all form fields in the schema', function _callee() {
    var onSubmit, component;
    return _regenerator.default.async(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            onSubmit = jest.fn();
            component = enzyme_1.mount(react_1.default.createElement(core_1.BlueBaseApp, {
              plugins: [index_1.default, plugin_material_ui_1.default]
            }, react_1.default.createElement(formik_1.Formik, {
              initialValues: initialValues,
              onSubmit: onSubmit
            }, react_1.default.createElement(FormSubmitButton_1.FormSubmitButton, (0, _extends2.default)({}, fieldProps[0])))));
            _context.next = 4;
            return _regenerator.default.awrap(enzyme_async_helpers_1.waitForElement(component, FormSubmitButton_1.FormSubmitButton));

          case 4:
            expect(component.find('Button').first().prop('loading')).toBe(false);
            expect(component.find('Button').first().prop('title')).toBe('Login');
            expect(component.find('Button').first().prop('type')).toBe('submit');
            setTimeout(function () {
              expect(component).toMatchSnapshot();
              expect(onSubmit).toHaveBeenCalledTimes(0);
            });

          case 8:
          case "end":
            return _context.stop();
        }
      }
    });
  });
  it('should render all form fields in the schema nested false', function _callee2() {
    var onSubmit, component;
    return _regenerator.default.async(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            onSubmit = jest.fn();
            component = enzyme_1.mount(react_1.default.createElement(core_1.BlueBaseApp, {
              plugins: [index_1.default, plugin_material_ui_1.default]
            }, react_1.default.createElement(formik_1.Formik, {
              initialValues: initialValues,
              onSubmit: onSubmit
            }, react_1.default.createElement(FormSubmitButton_1.FormSubmitButton, (0, _extends2.default)({}, fieldProps[1])))));
            _context2.next = 4;
            return _regenerator.default.awrap(enzyme_async_helpers_1.waitForElement(component, FormSubmitButton_1.FormSubmitButton));

          case 4:
            expect(component.find('Button').first().prop('loading')).toBe(false);
            expect(component.find('Button').first().prop('title')).toBe('Login');
            expect(component.find('Button').first().prop('type')).toBe('submit');
            setTimeout(function () {
              expect(component).toMatchSnapshot();
              expect(onSubmit).toHaveBeenCalledTimes(0);
            });

          case 8:
          case "end":
            return _context2.stop();
        }
      }
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
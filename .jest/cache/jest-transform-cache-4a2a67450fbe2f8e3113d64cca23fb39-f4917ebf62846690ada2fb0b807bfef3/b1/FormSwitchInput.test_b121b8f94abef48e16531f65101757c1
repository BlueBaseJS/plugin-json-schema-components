e5447ab7c47055f6cad53aa70ab9ba59
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

var core_1 = require("@bluebase/core");

var FormSwitchInput_1 = require("../FormSwitchInput");

var formik_1 = require("formik");

var index_1 = tslib_1.__importDefault(require("../../../index"));

var react_1 = tslib_1.__importDefault(require("react"));

var enzyme_1 = require("enzyme");

var enzyme_async_helpers_1 = require("enzyme-async-helpers");

var fieldProps = [{
  label: 'Auto Login',
  name: 'muzamil',
  type: 'switch',
  value: false,
  checked: true
}, {
  label: 'Auto Login',
  name: 'auto-login',
  type: 'switch',
  value: true,
  checked: false
}];
describe('FormSwitchInput', function () {
  it('should update switch value from onValueChange callback with true', function _callee() {
    var onSubmit, component, SwitchComponent, onValueChange;
    return _regenerator.default.async(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            onSubmit = jest.fn();
            component = enzyme_1.mount(react_1.default.createElement(core_1.BlueBaseApp, {
              plugins: [index_1.default]
            }, "p", react_1.default.createElement(formik_1.Formik, {
              initialValues: {
                'auto-login': false
              },
              onSubmit: onSubmit
            }, react_1.default.createElement(FormSwitchInput_1.FormSwitchInput, (0, _extends2.default)({}, fieldProps[0])))));
            _context.next = 4;
            return _regenerator.default.awrap(enzyme_async_helpers_1.waitForElement(component, FormSwitchInput_1.FormSwitchInput));

          case 4:
            SwitchComponent = component.find('Switch').last();
            expect(SwitchComponent.prop('name')).toBe('muzamil');
            expect(SwitchComponent.prop('checked')).toBe(false);
            onValueChange = SwitchComponent.prop('onValueChange');
            onValueChange(true, true);
            component.update();
            SwitchComponent = component.find('Switch').first();
            expect(SwitchComponent.prop('name')).toBe('muzamil');
            expect(SwitchComponent.prop('checked')).toBe(true);
            expect(SwitchComponent.prop('value')).toBe(false);

          case 14:
          case "end":
            return _context.stop();
        }
      }
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
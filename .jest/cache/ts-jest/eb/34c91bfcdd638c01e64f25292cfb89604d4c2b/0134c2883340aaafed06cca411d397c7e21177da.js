"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const formik_1 = require("formik");
const core_1 = require("@bluebase/core");
const Form_1 = require("./Form");
const FormFields_1 = require("./FormFields");
const react_1 = tslib_1.__importDefault(require("react"));
/**
 * A component that takes a json schema and converts it into a form.
 * @param props
 */
const JsonFormInternal = (props) => {
    const { schema } = props;
    const { fields } = schema, rest = tslib_1.__rest(schema, ["fields"]);
    return (react_1.default.createElement(formik_1.Formik, Object.assign({}, rest),
        react_1.default.createElement(Form_1.Form, null,
            react_1.default.createElement(FormFields_1.FormFields, { fields: fields }))));
};
/**
 * A component that takes a json schema and converts it into a form.
 * @param props
 */
exports.JsonForm = (props) => {
    const { args, filter, schema } = props;
    const { fields } = schema, rest = tslib_1.__rest(schema, ["fields"]);
    if (!filter) {
        return react_1.default.createElement(JsonFormInternal, Object.assign({ schema: schema }, rest));
    }
    return (react_1.default.createElement(core_1.BlueBaseFilter, { filter: filter, value: schema, args: args }, (filteredSchema) => {
        return react_1.default.createElement(JsonFormInternal, Object.assign({ schema: filteredSchema }, rest));
    }));
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvbXV6emFtaWwvRG9jdW1lbnRzL2JsdWViYXNlL3BsdWdpbi1qc29uLXNjaGVtYS1jb21wb25lbnRzL3NyYy9Kc29uRm9ybS9Kc29uRm9ybS50c3giLCJtYXBwaW5ncyI6Ijs7O0FBQUEsbUNBQTREO0FBQzVELHlDQUFnRDtBQUNoRCxpQ0FBOEI7QUFFOUIsNkNBQTBDO0FBQzFDLDBEQUEwQjtBQXVCMUI7OztHQUdHO0FBQ0gsTUFBTSxnQkFBZ0IsR0FBRyxDQUFDLEtBQW9CLEVBQUUsRUFBRTtJQUVqRCxNQUFNLEVBQUUsTUFBTSxFQUFFLEdBQUcsS0FBSyxDQUFDO0lBQ3pCLE1BQU0sRUFBRSxNQUFNLEtBQWMsTUFBTSxFQUFsQix5Q0FBa0IsQ0FBQztJQUVuQyxPQUFPLENBQ04sOEJBQUMsZUFBTSxvQkFBSyxJQUFJO1FBQ2YsOEJBQUMsV0FBSTtZQUNKLDhCQUFDLHVCQUFVLElBQUMsTUFBTSxFQUFFLE1BQU0sR0FBSSxDQUN4QixDQUNDLENBQ1QsQ0FBQztBQUNILENBQUMsQ0FBQztBQUVGOzs7R0FHRztBQUNVLFFBQUEsUUFBUSxHQUFHLENBQUMsS0FBb0IsRUFBRSxFQUFFO0lBRWhELE1BQU0sRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxHQUFHLEtBQUssQ0FBQztJQUN2QyxNQUFNLEVBQUUsTUFBTSxLQUFjLE1BQU0sRUFBbEIseUNBQWtCLENBQUM7SUFFbkMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNaLE9BQU8sOEJBQUMsZ0JBQWdCLGtCQUFDLE1BQU0sRUFBRSxNQUFNLElBQU0sSUFBSSxFQUFJLENBQUM7S0FDdEQ7SUFFRCxPQUFPLENBQ04sOEJBQUMscUJBQWMsSUFDZCxNQUFNLEVBQUUsTUFBTSxFQUNkLEtBQUssRUFBRSxNQUFNLEVBQ2IsSUFBSSxFQUFFLElBQUksSUFFVixDQUFDLGNBQXVDLEVBQUUsRUFBRTtRQUM1QyxPQUFPLDhCQUFDLGdCQUFnQixrQkFBQyxNQUFNLEVBQUUsY0FBYyxJQUFNLElBQUksRUFBSSxDQUFDO0lBQy9ELENBQUMsQ0FDZ0IsQ0FDakIsQ0FBQztBQUNILENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvaG9tZS9tdXp6YW1pbC9Eb2N1bWVudHMvYmx1ZWJhc2UvcGx1Z2luLWpzb24tc2NoZW1hLWNvbXBvbmVudHMvc3JjL0pzb25Gb3JtL0pzb25Gb3JtLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBGb3JtaWssIEZvcm1pa0NvbmZpZywgRm9ybWlrVmFsdWVzIH0gZnJvbSAnZm9ybWlrJztcbmltcG9ydCB7IEJsdWVCYXNlRmlsdGVyIH0gZnJvbSAnQGJsdWViYXNlL2NvcmUnO1xuaW1wb3J0IHsgRm9ybSB9IGZyb20gJy4vRm9ybSc7XG5pbXBvcnQgeyBGb3JtRmllbGRQcm9wcyB9IGZyb20gJy4vRmllbGRzJztcbmltcG9ydCB7IEZvcm1GaWVsZHMgfSBmcm9tICcuL0Zvcm1GaWVsZHMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuZXhwb3J0IGludGVyZmFjZSBGb3JtUHJvcHM8VmFsdWVzID0gRm9ybWlrVmFsdWVzPiBleHRlbmRzIEZvcm1pa0NvbmZpZzxWYWx1ZXM+IHtcblx0ZmllbGRzOiBGb3JtRmllbGRQcm9wc1tdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEpzb25Gb3JtUHJvcHM8VmFsdWVzID0gRm9ybWlrVmFsdWVzPiB7XG5cblx0LyoqIEpTT04gU2NoZW1hLiAqL1xuXHRzY2hlbWE6IEZvcm1Qcm9wczxWYWx1ZXM+O1xuXG5cdC8qKiBFdmVudCBuYW1lIHRvIGZpbHRlciB0aGlzIHNjaGVtYS4gSWYgdGhpcyBpcyBub3QgcHJvdmlkZWQsIHRoZSBzY2hlbWEgaXMgbm90IGZpbHRlcmVkLiAqL1xuXHRmaWx0ZXI/OiBzdHJpbmc7XG5cblx0LyoqIEFyZ3VtZW50cyBmb3IgdGhlIGZpbHRlci4gKi9cblx0YXJncz86IHsgW2tleTogc3RyaW5nXTogYW55IH07XG5cbiAgLyoqXG4gICAqIFVzZWQgdG8gbG9jYXRlIHRoaXMgdmlldyBpbiBlbmQtdG8tZW5kIHRlc3RzLlxuICAgKi9cblx0dGVzdElEPzogc3RyaW5nLFxufVxuXG4vKipcbiAqIEEgY29tcG9uZW50IHRoYXQgdGFrZXMgYSBqc29uIHNjaGVtYSBhbmQgY29udmVydHMgaXQgaW50byBhIGZvcm0uXG4gKiBAcGFyYW0gcHJvcHNcbiAqL1xuY29uc3QgSnNvbkZvcm1JbnRlcm5hbCA9IChwcm9wczogSnNvbkZvcm1Qcm9wcykgPT4ge1xuXG5cdGNvbnN0IHsgc2NoZW1hIH0gPSBwcm9wcztcblx0Y29uc3QgeyBmaWVsZHMsIC4uLnJlc3QgfSA9IHNjaGVtYTtcblxuXHRyZXR1cm4gKFxuXHRcdDxGb3JtaWsgey4uLnJlc3R9PlxuXHRcdFx0PEZvcm0+XG5cdFx0XHRcdDxGb3JtRmllbGRzIGZpZWxkcz17ZmllbGRzfSAvPlxuXHRcdFx0PC9Gb3JtPlxuXHRcdDwvRm9ybWlrPlxuXHQpO1xufTtcblxuLyoqXG4gKiBBIGNvbXBvbmVudCB0aGF0IHRha2VzIGEganNvbiBzY2hlbWEgYW5kIGNvbnZlcnRzIGl0IGludG8gYSBmb3JtLlxuICogQHBhcmFtIHByb3BzXG4gKi9cbmV4cG9ydCBjb25zdCBKc29uRm9ybSA9IChwcm9wczogSnNvbkZvcm1Qcm9wcykgPT4ge1xuXG5cdGNvbnN0IHsgYXJncywgZmlsdGVyLCBzY2hlbWEgfSA9IHByb3BzO1xuXHRjb25zdCB7IGZpZWxkcywgLi4ucmVzdCB9ID0gc2NoZW1hO1xuXG5cdGlmICghZmlsdGVyKSB7XG5cdFx0cmV0dXJuIDxKc29uRm9ybUludGVybmFsIHNjaGVtYT17c2NoZW1hfSB7Li4ucmVzdH0gLz47XG5cdH1cblxuXHRyZXR1cm4gKFxuXHRcdDxCbHVlQmFzZUZpbHRlclxuXHRcdFx0ZmlsdGVyPXtmaWx0ZXJ9XG5cdFx0XHR2YWx1ZT17c2NoZW1hfVxuXHRcdFx0YXJncz17YXJnc31cblx0XHQ+XG5cdFx0eyhmaWx0ZXJlZFNjaGVtYTogSnNvbkZvcm1Qcm9wc1snc2NoZW1hJ10pID0+IHtcblx0XHRcdHJldHVybiA8SnNvbkZvcm1JbnRlcm5hbCBzY2hlbWE9e2ZpbHRlcmVkU2NoZW1hfSB7Li4ucmVzdH0gLz47XG5cdFx0fX1cblx0XHQ8L0JsdWVCYXNlRmlsdGVyPlxuXHQpO1xufTtcbiJdLCJ2ZXJzaW9uIjozfQ==
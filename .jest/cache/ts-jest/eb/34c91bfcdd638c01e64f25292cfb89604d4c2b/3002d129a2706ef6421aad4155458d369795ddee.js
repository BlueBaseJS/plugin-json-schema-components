"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const core_1 = require("@bluebase/core");
const JsonForm_1 = require("../JsonForm");
const index_1 = tslib_1.__importDefault(require("../../index"));
const react_1 = tslib_1.__importDefault(require("react"));
const enzyme_1 = require("enzyme");
const enzyme_async_helpers_1 = require("enzyme-async-helpers");
const fields = [{
        label: 'Username',
        name: 'username',
        required: true,
        type: 'text',
    }, {
        schema: { component: 'Text', text: 'Text Component' },
        type: 'component',
    }, {
        label: 'Temp',
        max: 32,
        min: 16,
        name: 'temp',
        step: 1,
        type: 'range',
    }];
const initialValues = {
    // 'auto-login': true,
    // lang: 'js',
    // password: '',
    // remember: true,
    temp: 26,
    username: '',
};
describe('FormFields', () => {
    it('should render all form fields in the schema', async () => {
        const onSubmit = jest.fn();
        const component = enzyme_1.mount(react_1.default.createElement(core_1.BlueBaseApp, { plugins: [index_1.default] },
            react_1.default.createElement(JsonForm_1.JsonForm, { schema: { fields, initialValues, onSubmit } })));
        await enzyme_async_helpers_1.waitForElement(component, JsonForm_1.JsonForm);
        // expect(component).toMatchSnapshot();
        // Check fields
        expect(component.find('FormFields').children()).toHaveLength(3);
        expect(component.find('FormFields').childAt(0).prop('name')).toBe('username');
        expect(component.find('FormFields').childAt(1).prop('name')).toBe('1-component');
        expect(component.find('FormFields').childAt(2).prop('name')).toBe('temp');
    });
    it('should hook into the form to modify the schema', async () => {
        const onSubmit = jest.fn();
        const filter = (schema) => {
            schema.fields.push({
                schema: { component: 'Text', text: 'New Injected Text Component' },
                type: 'component',
            });
            return schema;
        };
        const component = enzyme_1.mount(react_1.default.createElement(core_1.BlueBaseApp, { plugins: [index_1.default], filters: { 'pluggable-form': filter } },
            react_1.default.createElement(JsonForm_1.JsonForm, { schema: { fields, initialValues, onSubmit }, filter: "pluggable-form" })));
        await enzyme_async_helpers_1.waitForElement(component, JsonForm_1.JsonForm);
        // expect(component).toMatchSnapshot();
        // Check fields
        expect(component.find('FormFields').children()).toHaveLength(4);
        expect(component.find('FormFields').childAt(0).prop('name')).toBe('username');
        expect(component.find('FormFields').childAt(1).prop('name')).toBe('1-component');
        expect(component.find('FormFields').childAt(2).prop('name')).toBe('temp');
        expect(component.find('FormFields').childAt(3).prop('name')).toBe('3-component');
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvbXV6emFtaWwvRG9jdW1lbnRzL2JsdWViYXNlL3BsdWdpbi1qc29uLXNjaGVtYS1jb21wb25lbnRzL3NyYy9Kc29uRm9ybS9fX3Rlc3RzX18vSnNvbkZvcm0udGVzdC50c3giLCJtYXBwaW5ncyI6Ijs7O0FBQUEseUNBQTZDO0FBRTdDLDBDQUF1QztBQUN2QyxnRUFBaUM7QUFDakMsMERBQTBCO0FBQzFCLG1DQUErQjtBQUMvQiwrREFBc0Q7QUFFdEQsTUFBTSxNQUFNLEdBQXFCLENBQUM7UUFDakMsS0FBSyxFQUFFLFVBQVU7UUFDakIsSUFBSSxFQUFFLFVBQVU7UUFDaEIsUUFBUSxFQUFFLElBQUk7UUFDZCxJQUFJLEVBQUUsTUFBTTtLQUNaLEVBQUU7UUFDRixNQUFNLEVBQUUsRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxnQkFBZ0IsRUFBRTtRQUNyRCxJQUFJLEVBQUUsV0FBVztLQUNqQixFQUFFO1FBQ0YsS0FBSyxFQUFFLE1BQU07UUFDYixHQUFHLEVBQUUsRUFBRTtRQUNQLEdBQUcsRUFBRSxFQUFFO1FBQ1AsSUFBSSxFQUFFLE1BQU07UUFDWixJQUFJLEVBQUUsQ0FBQztRQUNQLElBQUksRUFBRSxPQUFPO0tBQ2IsQ0FBQyxDQUFDO0FBRUgsTUFBTSxhQUFhLEdBQUc7SUFDckIsc0JBQXNCO0lBQ3RCLGNBQWM7SUFDZCxnQkFBZ0I7SUFDaEIsa0JBQWtCO0lBQ2xCLElBQUksRUFBRSxFQUFFO0lBQ1IsUUFBUSxFQUFFLEVBQUU7Q0FDWixDQUFDO0FBR0YsUUFBUSxDQUFDLFlBQVksRUFBRSxHQUFHLEVBQUU7SUFHM0IsRUFBRSxDQUFDLDZDQUE2QyxFQUFFLEtBQUssSUFBSSxFQUFFO1FBRTVELE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQztRQUUzQixNQUFNLFNBQVMsR0FBRyxjQUFLLENBQ3RCLDhCQUFDLGtCQUFXLElBQUMsT0FBTyxFQUFFLENBQUMsZUFBTSxDQUFDO1lBQzdCLDhCQUFDLG1CQUFRLElBQUMsTUFBTSxFQUFFLEVBQUUsTUFBTSxFQUFFLGFBQWEsRUFBRSxRQUFRLEVBQUUsR0FBSSxDQUM1QyxDQUNkLENBQUM7UUFFRixNQUFNLHFDQUFjLENBQUMsU0FBZ0IsRUFBRSxtQkFBUSxDQUFDLENBQUM7UUFFakQsdUNBQXVDO1FBRXZDLGVBQWU7UUFDZixNQUFNLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNoRSxNQUFNLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQzlFLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDakYsTUFBTSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUMzRSxDQUFDLENBQUMsQ0FBQztJQUdILEVBQUUsQ0FBQyxnREFBZ0QsRUFBRSxLQUFLLElBQUksRUFBRTtRQUUvRCxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUM7UUFFM0IsTUFBTSxNQUFNLEdBQUcsQ0FBQyxNQUFXLEVBQUUsRUFBRTtZQUU5QixNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQztnQkFDbEIsTUFBTSxFQUFFLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsNkJBQTZCLEVBQUU7Z0JBQ2xFLElBQUksRUFBRSxXQUFXO2FBQ2pCLENBQUMsQ0FBQztZQUVILE9BQU8sTUFBTSxDQUFDO1FBQ2YsQ0FBQyxDQUFDO1FBRUYsTUFBTSxTQUFTLEdBQUcsY0FBSyxDQUN0Qiw4QkFBQyxrQkFBVyxJQUFDLE9BQU8sRUFBRSxDQUFDLGVBQU0sQ0FBQyxFQUFFLE9BQU8sRUFBRSxFQUFFLGdCQUFnQixFQUFFLE1BQU0sRUFBRTtZQUNwRSw4QkFBQyxtQkFBUSxJQUFDLE1BQU0sRUFBRSxFQUFFLE1BQU0sRUFBRSxhQUFhLEVBQUUsUUFBUSxFQUFFLEVBQUUsTUFBTSxFQUFDLGdCQUFnQixHQUFHLENBQ3BFLENBQ2QsQ0FBQztRQUVGLE1BQU0scUNBQWMsQ0FBQyxTQUFnQixFQUFFLG1CQUFRLENBQUMsQ0FBQztRQUVqRCx1Q0FBdUM7UUFFdkMsZUFBZTtRQUNmLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2hFLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDOUUsTUFBTSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUNqRixNQUFNLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFFLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDbEYsQ0FBQyxDQUFDLENBQUM7QUFFSixDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvaG9tZS9tdXp6YW1pbC9Eb2N1bWVudHMvYmx1ZWJhc2UvcGx1Z2luLWpzb24tc2NoZW1hLWNvbXBvbmVudHMvc3JjL0pzb25Gb3JtL19fdGVzdHNfXy9Kc29uRm9ybS50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCbHVlQmFzZUFwcCB9IGZyb20gJ0BibHVlYmFzZS9jb3JlJztcbmltcG9ydCB7IEZvcm1GaWVsZFByb3BzIH0gZnJvbSAnLi4vRmllbGRzJztcbmltcG9ydCB7IEpzb25Gb3JtIH0gZnJvbSAnLi4vSnNvbkZvcm0nO1xuaW1wb3J0IFBsdWdpbiBmcm9tICcuLi8uLi9pbmRleCc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgbW91bnQgfSBmcm9tICdlbnp5bWUnO1xuaW1wb3J0IHsgd2FpdEZvckVsZW1lbnQgfSBmcm9tICdlbnp5bWUtYXN5bmMtaGVscGVycyc7XG5cbmNvbnN0IGZpZWxkczogRm9ybUZpZWxkUHJvcHNbXSA9IFt7XG5cdGxhYmVsOiAnVXNlcm5hbWUnLFxuXHRuYW1lOiAndXNlcm5hbWUnLFxuXHRyZXF1aXJlZDogdHJ1ZSxcblx0dHlwZTogJ3RleHQnLFxufSwge1xuXHRzY2hlbWE6IHsgY29tcG9uZW50OiAnVGV4dCcsIHRleHQ6ICdUZXh0IENvbXBvbmVudCcgfSxcblx0dHlwZTogJ2NvbXBvbmVudCcsXG59LCB7XG5cdGxhYmVsOiAnVGVtcCcsXG5cdG1heDogMzIsXG5cdG1pbjogMTYsXG5cdG5hbWU6ICd0ZW1wJyxcblx0c3RlcDogMSxcblx0dHlwZTogJ3JhbmdlJyxcbn1dO1xuXG5jb25zdCBpbml0aWFsVmFsdWVzID0ge1xuXHQvLyAnYXV0by1sb2dpbic6IHRydWUsXG5cdC8vIGxhbmc6ICdqcycsXG5cdC8vIHBhc3N3b3JkOiAnJyxcblx0Ly8gcmVtZW1iZXI6IHRydWUsXG5cdHRlbXA6IDI2LFxuXHR1c2VybmFtZTogJycsXG59O1xuXG5cbmRlc2NyaWJlKCdGb3JtRmllbGRzJywgKCkgPT4ge1xuXG5cblx0aXQoJ3Nob3VsZCByZW5kZXIgYWxsIGZvcm0gZmllbGRzIGluIHRoZSBzY2hlbWEnLCBhc3luYyAoKSA9PiB7XG5cblx0XHRjb25zdCBvblN1Ym1pdCA9IGplc3QuZm4oKTtcblxuXHRcdGNvbnN0IGNvbXBvbmVudCA9IG1vdW50KFxuXHRcdFx0PEJsdWVCYXNlQXBwIHBsdWdpbnM9e1tQbHVnaW5dfT5cblx0XHRcdFx0PEpzb25Gb3JtIHNjaGVtYT17eyBmaWVsZHMsIGluaXRpYWxWYWx1ZXMsIG9uU3VibWl0IH19IC8+XG5cdFx0XHQ8L0JsdWVCYXNlQXBwPlxuXHRcdCk7XG5cblx0XHRhd2FpdCB3YWl0Rm9yRWxlbWVudChjb21wb25lbnQgYXMgYW55LCBKc29uRm9ybSk7XG5cblx0XHQvLyBleHBlY3QoY29tcG9uZW50KS50b01hdGNoU25hcHNob3QoKTtcblxuXHRcdC8vIENoZWNrIGZpZWxkc1xuXHRcdGV4cGVjdChjb21wb25lbnQuZmluZCgnRm9ybUZpZWxkcycpLmNoaWxkcmVuKCkpLnRvSGF2ZUxlbmd0aCgzKTtcblx0XHRleHBlY3QoY29tcG9uZW50LmZpbmQoJ0Zvcm1GaWVsZHMnKS5jaGlsZEF0KDApLnByb3AoJ25hbWUnKSkudG9CZSgndXNlcm5hbWUnKTtcblx0XHRleHBlY3QoY29tcG9uZW50LmZpbmQoJ0Zvcm1GaWVsZHMnKS5jaGlsZEF0KDEpLnByb3AoJ25hbWUnKSkudG9CZSgnMS1jb21wb25lbnQnKTtcblx0XHRleHBlY3QoY29tcG9uZW50LmZpbmQoJ0Zvcm1GaWVsZHMnKS5jaGlsZEF0KDIpLnByb3AoJ25hbWUnKSkudG9CZSgndGVtcCcpO1xuXHR9KTtcblxuXG5cdGl0KCdzaG91bGQgaG9vayBpbnRvIHRoZSBmb3JtIHRvIG1vZGlmeSB0aGUgc2NoZW1hJywgYXN5bmMgKCkgPT4ge1xuXG5cdFx0Y29uc3Qgb25TdWJtaXQgPSBqZXN0LmZuKCk7XG5cblx0XHRjb25zdCBmaWx0ZXIgPSAoc2NoZW1hOiBhbnkpID0+IHtcblxuXHRcdFx0c2NoZW1hLmZpZWxkcy5wdXNoKHtcblx0XHRcdFx0c2NoZW1hOiB7IGNvbXBvbmVudDogJ1RleHQnLCB0ZXh0OiAnTmV3IEluamVjdGVkIFRleHQgQ29tcG9uZW50JyB9LFxuXHRcdFx0XHR0eXBlOiAnY29tcG9uZW50Jyxcblx0XHRcdH0pO1xuXG5cdFx0XHRyZXR1cm4gc2NoZW1hO1xuXHRcdH07XG5cblx0XHRjb25zdCBjb21wb25lbnQgPSBtb3VudChcblx0XHRcdDxCbHVlQmFzZUFwcCBwbHVnaW5zPXtbUGx1Z2luXX0gZmlsdGVycz17eyAncGx1Z2dhYmxlLWZvcm0nOiBmaWx0ZXIgfX0+XG5cdFx0XHRcdDxKc29uRm9ybSBzY2hlbWE9e3sgZmllbGRzLCBpbml0aWFsVmFsdWVzLCBvblN1Ym1pdCB9fSBmaWx0ZXI9XCJwbHVnZ2FibGUtZm9ybVwiIC8+XG5cdFx0XHQ8L0JsdWVCYXNlQXBwPlxuXHRcdCk7XG5cblx0XHRhd2FpdCB3YWl0Rm9yRWxlbWVudChjb21wb25lbnQgYXMgYW55LCBKc29uRm9ybSk7XG5cblx0XHQvLyBleHBlY3QoY29tcG9uZW50KS50b01hdGNoU25hcHNob3QoKTtcblxuXHRcdC8vIENoZWNrIGZpZWxkc1xuXHRcdGV4cGVjdChjb21wb25lbnQuZmluZCgnRm9ybUZpZWxkcycpLmNoaWxkcmVuKCkpLnRvSGF2ZUxlbmd0aCg0KTtcblx0XHRleHBlY3QoY29tcG9uZW50LmZpbmQoJ0Zvcm1GaWVsZHMnKS5jaGlsZEF0KDApLnByb3AoJ25hbWUnKSkudG9CZSgndXNlcm5hbWUnKTtcblx0XHRleHBlY3QoY29tcG9uZW50LmZpbmQoJ0Zvcm1GaWVsZHMnKS5jaGlsZEF0KDEpLnByb3AoJ25hbWUnKSkudG9CZSgnMS1jb21wb25lbnQnKTtcblx0XHRleHBlY3QoY29tcG9uZW50LmZpbmQoJ0Zvcm1GaWVsZHMnKS5jaGlsZEF0KDIpLnByb3AoJ25hbWUnKSkudG9CZSgndGVtcCcpO1xuXHRcdGV4cGVjdChjb21wb25lbnQuZmluZCgnRm9ybUZpZWxkcycpLmNoaWxkQXQoMykucHJvcCgnbmFtZScpKS50b0JlKCczLWNvbXBvbmVudCcpO1xuXHR9KTtcblxufSk7XG4iXSwidmVyc2lvbiI6M30=
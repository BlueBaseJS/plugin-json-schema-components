// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SignupForm GraphQL should show a network error 1`] = `
<BlueBaseApp
  configs={
    Object {
      "plugin.apollo.httpLinkOptions": Object {
        "uri": "http://graphql",
      },
    }
  }
  plugins={
    Array [
      Object {
        "categories": Array [],
        "defaultConfigs": Object {
          "plugin.apollo.clientOptions": Object {},
          "plugin.apollo.httpLinkOptions": Object {},
        },
        "description": "🌍 A BlueBase Plugin that integrates Apollo GraphQL Client",
        "enabled": true,
        "key": "plugin-apollo",
        "name": "Apollo Plugin",
        "value": Object {
          "assets": Object {},
          "components": Object {
            "ApolloConsumer": [Function],
            "GraphqlMutation": [Function],
            "GraphqlQuery": [Function],
            "GraphqlSubscription": [Function],
          },
          "filters": Object {
            "bluebase.boot.end": [Function],
          },
          "fonts": Object {},
          "routes": undefined,
          "themes": Object {},
        },
        "version": "1.0.0",
      },
      Object {
        "categories": Array [
          "ui",
        ],
        "defaultConfigs": Object {},
        "description": "A utility to build pluggable components based on JSON schema!",
        "enabled": true,
        "key": "plugin-json-schema-components",
        "name": "Json Schema Components",
        "value": Object {
          "assets": Object {},
          "components": Object {
            "BaseFormField": [Function],
            "FormCheckboxInput": [Function],
            "FormEmailInput": [Function],
            "FormNumberInput": [Function],
            "FormPasswordInput": [Function],
            "FormPickerInput": [Function],
            "FormRadioGroupInput": [Function],
            "FormRangeInput": [Function],
            "FormResetButton": [Function],
            "FormStatus": [Function],
            "FormStatusList": [Function],
            "FormStatusListItem": [Function],
            "FormSubmitButton": [Function],
            "FormSwitchInput": [Function],
            "FormTextInput": [Function],
            "FormUrlInput": [Function],
            "InlineFields": [Function],
            "JsonForm": [Function],
            "JsonGraphqlForm": [Function],
            "JsonLayout": [Function],
          },
          "filters": Object {},
          "fonts": Object {},
          "routes": undefined,
          "themes": Object {},
        },
        "version": "0.0.1",
      },
    ]
  }
>
  <BlueBaseRoot>
    <ThemeProvider>
      <IntlProvider>
        <BlueBaseContent
          BB={
            BlueBase {
              "Analytics": Analytics {
                "BB": [Circular],
              },
              "Assets": AssetRegistry {
                "BB": [Circular],
                "data": Map {
                  "Logo" => Object {
                    "key": "Logo",
                    "preload": false,
                    "type": "unknown",
                    "value": Object {
                      "uri": "test-file-stub",
                    },
                  },
                  "LogoSquare" => Object {
                    "key": "LogoSquare",
                    "preload": false,
                    "type": "unknown",
                    "value": Object {
                      "uri": "test-file-stub",
                    },
                  },
                },
                "subscriptions": Map {},
              },
              "Components": ComponentRegistry {
                "BB": [Circular],
                "data": Map {
                  "BlueBaseContent" => Object {
                    "applyStyles": true,
                    "hocs": Array [
                      [Function],
                    ],
                    "isAsync": false,
                    "key": "BlueBaseContent",
                    "preload": false,
                    "value": Promise {
                      "_40": 0,
                      "_55": [Function],
                      "_65": 1,
                      "_72": null,
                      "isAsync": false,
                      "loaded": true,
                      "module": [Function],
                    },
                  },
                  "BlueBaseFilter" => Object {
                    "applyStyles": false,
                    "hocs": Array [],
                    "isAsync": false,
                    "key": "BlueBaseFilter",
                    "preload": false,
                    "value": Promise {
                      "_40": 0,
                      "_55": [Function],
                      "_65": 1,
                      "_72": null,
                      "isAsync": false,
                      "loaded": true,
                      "module": [Function],
                    },
                  },
                  "BlueBaseImage" => Object {
                    "applyStyles": true,
                    "hocs": Array [],
                    "isAsync": false,
                    "key": "BlueBaseImage",
                    "preload": false,
                    "value": Promise {
                      "_40": 0,
                      "_55": [Function],
                      "_65": 1,
                      "_72": null,
                      "isAsync": false,
                      "loaded": true,
                      "module": [Function],
                    },
                  },
                  "ComponentState" => Object {
                    "applyStyles": true,
                    "hocs": Array [],
                    "isAsync": false,
                    "key": "ComponentState",
                    "preload": false,
                    "value": Promise {
                      "_40": 0,
                      "_55": [Function],
                      "_65": 1,
                      "_72": null,
                      "isAsync": false,
                      "loaded": true,
                      "module": [Function],
                    },
                  },
                  "DataObserver" => Object {
                    "applyStyles": true,
                    "hocs": Array [],
                    "isAsync": false,
                    "key": "DataObserver",
                    "preload": false,
                    "value": Promise {
                      "_40": 0,
                      "_55": [Function],
                      "_65": 1,
                      "_72": null,
                      "isAsync": false,
                      "loaded": true,
                      "module": [Function],
                    },
                  },
                  "DynamicIcon" => Object {
                    "applyStyles": true,
                    "hocs": Array [],
                    "isAsync": false,
                    "key": "DynamicIcon",
                    "preload": false,
                    "value": Promise {
                      "_40": 0,
                      "_55": [Function],
                      "_65": 1,
                      "_72": null,
                      "isAsync": false,
                      "loaded": true,
                      "module": [Function],
                    },
                  },
                  "EmptyState" => Object {
                    "applyStyles": true,
                    "hocs": Array [],
                    "isAsync": false,
                    "key": "EmptyState",
                    "preload": false,
                    "value": Promise {
                      "_40": 0,
                      "_55": [Function],
                      "_65": 1,
                      "_72": null,
                      "isAsync": false,
                      "loaded": true,
                      "module": [Function],
                    },
                  },
                  "ErrorObserver" => Object {
                    "applyStyles": true,
                    "hocs": Array [],
                    "isAsync": false,
                    "key": "ErrorObserver",
                    "preload": false,
                    "value": Promise {
                      "_40": 0,
                      "_55": [Function],
                      "_65": 1,
                      "_72": null,
                      "isAsync": false,
                      "loaded": true,
                      "module": [Function],
                    },
                  },
                  "ErrorState" => Object {
                    "applyStyles": true,
                    "hocs": Array [],
                    "isAsync": false,
                    "key": "ErrorState",
                    "preload": false,
                    "value": Promise {
                      "_40": 0,
                      "_55": [Function],
                      "_65": 1,
                      "_72": null,
                      "isAsync": false,
                      "loaded": true,
                      "module": [Function],
                    },
                  },
                  "FormattedMessage" => Object {
                    "applyStyles": true,
                    "hocs": Array [],
                    "isAsync": false,
                    "key": "FormattedMessage",
                    "preload": false,
                    "value": Promise {
                      "_40": 0,
                      "_55": [Function],
                      "_65": 1,
                      "_72": null,
                      "isAsync": false,
                      "loaded": true,
                      "module": [Function],
                    },
                  },
                  "HomeScreen" => Object {
                    "applyStyles": true,
                    "hocs": Array [],
                    "isAsync": false,
                    "key": "HomeScreen",
                    "preload": false,
                    "value": Promise {
                      "_40": 0,
                      "_55": [Function],
                      "_65": 1,
                      "_72": null,
                      "isAsync": false,
                      "loaded": true,
                      "module": [Function],
                    },
                  },
                  "HoverObserver" => Object {
                    "applyStyles": true,
                    "hocs": Array [],
                    "isAsync": false,
                    "key": "HoverObserver",
                    "preload": false,
                    "value": Promise {
                      "_40": 0,
                      "_55": [Function],
                      "_65": 1,
                      "_72": null,
                      "isAsync": false,
                      "loaded": true,
                      "module": [Function],
                    },
                  },
                  "Icon" => Object {
                    "applyStyles": true,
                    "hocs": Array [],
                    "isAsync": false,
                    "key": "Icon",
                    "preload": false,
                    "value": Promise {
                      "_40": 0,
                      "_55": [Function],
                      "_65": 1,
                      "_72": null,
                      "isAsync": false,
                      "loaded": true,
                      "module": [Function],
                    },
                  },
                  "Link" => Object {
                    "applyStyles": true,
                    "hocs": Array [],
                    "isAsync": false,
                    "key": "Link",
                    "preload": false,
                    "value": Promise {
                      "_40": 0,
                      "_55": [Function],
                      "_65": 1,
                      "_72": null,
                      "isAsync": false,
                      "loaded": true,
                      "module": [Function],
                    },
                  },
                  "LoadingState" => Object {
                    "applyStyles": true,
                    "hocs": Array [],
                    "isAsync": false,
                    "key": "LoadingState",
                    "preload": false,
                    "value": Promise {
                      "_40": 0,
                      "_55": [Function],
                      "_65": 1,
                      "_72": null,
                      "isAsync": false,
                      "loaded": true,
                      "module": [Function],
                    },
                  },
                  "Navigation" => Object {
                    "applyStyles": true,
                    "hocs": Array [],
                    "isAsync": false,
                    "key": "Navigation",
                    "preload": false,
                    "value": Promise {
                      "_40": 0,
                      "_55": [Function],
                      "_65": 1,
                      "_72": null,
                      "isAsync": false,
                      "loaded": true,
                      "module": [Function],
                    },
                  },
                  "NavigationActions" => Object {
                    "applyStyles": true,
                    "hocs": Array [],
                    "isAsync": false,
                    "key": "NavigationActions",
                    "preload": false,
                    "value": Promise {
                      "_40": 0,
                      "_55": [Function],
                      "_65": 1,
                      "_72": null,
                      "isAsync": false,
                      "loaded": true,
                      "module": [Function],
                    },
                  },
                  "Noop" => Object {
                    "applyStyles": false,
                    "hocs": Array [],
                    "isAsync": false,
                    "key": "Noop",
                    "preload": false,
                    "value": Promise {
                      "_40": 0,
                      "_55": [Function],
                      "_65": 1,
                      "_72": null,
                      "isAsync": false,
                      "loaded": true,
                      "module": [Function],
                    },
                  },
                  "PluginIcon" => Object {
                    "applyStyles": true,
                    "hocs": Array [],
                    "isAsync": false,
                    "key": "PluginIcon",
                    "preload": false,
                    "value": Promise {
                      "_40": 0,
                      "_55": [Function],
                      "_65": 1,
                      "_72": null,
                      "isAsync": false,
                      "loaded": true,
                      "module": [Function],
                    },
                  },
                  "Redirect" => Object {
                    "applyStyles": false,
                    "hocs": Array [],
                    "isAsync": false,
                    "key": "Redirect",
                    "preload": false,
                    "value": Promise {
                      "_40": 0,
                      "_55": [Function],
                      "_65": 1,
                      "_72": null,
                      "isAsync": false,
                      "loaded": true,
                      "module": [Function],
                    },
                  },
                  "StatefulComponent" => Object {
                    "applyStyles": true,
                    "hocs": Array [],
                    "isAsync": false,
                    "key": "StatefulComponent",
                    "preload": false,
                    "value": Promise {
                      "_40": 0,
                      "_55": [Function],
                      "_65": 1,
                      "_72": null,
                      "isAsync": false,
                      "loaded": true,
                      "module": [Function],
                    },
                  },
                  "TouchableItem" => Object {
                    "applyStyles": true,
                    "hocs": Array [],
                    "isAsync": false,
                    "key": "TouchableItem",
                    "preload": false,
                    "value": Promise {
                      "_40": 0,
                      "_55": [Function],
                      "_65": 1,
                      "_72": null,
                      "isAsync": false,
                      "loaded": true,
                      "module": [Function],
                    },
                  },
                  "WaitObserver" => Object {
                    "applyStyles": true,
                    "hocs": Array [],
                    "isAsync": false,
                    "key": "WaitObserver",
                    "preload": false,
                    "value": Promise {
                      "_40": 0,
                      "_55": [Function],
                      "_65": 1,
                      "_72": null,
                      "isAsync": false,
                      "loaded": true,
                      "module": [Function],
                    },
                  },
                  "ActivityIndicator" => Object {
                    "applyStyles": true,
                    "hocs": Array [],
                    "isAsync": false,
                    "key": "ActivityIndicator",
                    "preload": false,
                    "value": Promise {
                      "_40": 0,
                      "_55": [Function],
                      "_65": 1,
                      "_72": null,
                      "isAsync": false,
                      "loaded": true,
                      "module": [Function],
                    },
                  },
                  "Button" => Object {
                    "applyStyles": true,
                    "hocs": Array [],
                    "isAsync": false,
                    "key": "Button",
                    "preload": false,
                    "value": Promise {
                      "_40": 0,
                      "_55": [Function],
                      "_65": 1,
                      "_72": null,
                      "isAsync": false,
                      "loaded": true,
                      "module": [Function],
                    },
                  },
                  "FlatList" => Object {
                    "applyStyles": true,
                    "hocs": Array [],
                    "isAsync": false,
                    "key": "FlatList",
                    "preload": false,
                    "value": Promise {
                      "_40": 0,
                      "_55": [Function],
                      "_65": 1,
                      "_72": null,
                      "isAsync": false,
                      "loaded": true,
                      "module": [Function],
                    },
                  },
                  "Image" => Object {
                    "applyStyles": true,
                    "hocs": Array [],
                    "isAsync": false,
                    "key": "Image",
                    "preload": false,
                    "value": Promise {
                      "_40": 0,
                      "_55": [Function],
                      "_65": 1,
                      "_72": null,
                      "isAsync": false,
                      "loaded": true,
                      "module": [Function],
                    },
                  },
                  "ImageBackground" => Object {
                    "applyStyles": true,
                    "hocs": Array [],
                    "isAsync": false,
                    "key": "ImageBackground",
                    "preload": false,
                    "value": Promise {
                      "_40": 0,
                      "_55": [Function],
                      "_65": 1,
                      "_72": null,
                      "isAsync": false,
                      "loaded": true,
                      "module": [Function],
                    },
                  },
                  "Picker" => Object {
                    "applyStyles": true,
                    "hocs": Array [],
                    "isAsync": false,
                    "key": "Picker",
                    "preload": false,
                    "value": Promise {
                      "_40": 0,
                      "_55": [Function],
                      "_65": 1,
                      "_72": null,
                      "isAsync": false,
                      "loaded": true,
                      "module": [Function],
                    },
                  },
                  "SafeAreaView" => Object {
                    "applyStyles": true,
                    "hocs": Array [],
                    "isAsync": false,
                    "key": "SafeAreaView",
                    "preload": false,
                    "value": Promise {
                      "_40": 0,
                      "_55": [Function],
                      "_65": 1,
                      "_72": null,
                      "isAsync": false,
                      "loaded": true,
                      "module": [Function],
                    },
                  },
                  "ScrollView" => Object {
                    "applyStyles": true,
                    "hocs": Array [],
                    "isAsync": false,
                    "key": "ScrollView",
                    "preload": false,
                    "value": Promise {
                      "_40": 0,
                      "_55": [MockFunction],
                      "_65": 1,
                      "_72": null,
                      "isAsync": false,
                      "loaded": true,
                      "module": [MockFunction],
                    },
                  },
                  "Slider" => Object {
                    "applyStyles": true,
                    "hocs": Array [],
                    "isAsync": false,
                    "key": "Slider",
                    "preload": false,
                    "value": Promise {
                      "_40": 0,
                      "_55": Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "defaultProps": Object {
                          "disabled": false,
                          "maximumValue": 1,
                          "minimumValue": 0,
                          "step": 0,
                          "value": 0,
                        },
                        "render": [Function],
                      },
                      "_65": 1,
                      "_72": null,
                      "isAsync": false,
                      "loaded": true,
                      "module": Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "defaultProps": Object {
                          "disabled": false,
                          "maximumValue": 1,
                          "minimumValue": 0,
                          "step": 0,
                          "value": 0,
                        },
                        "render": [Function],
                      },
                    },
                  },
                  "Switch" => Object {
                    "applyStyles": true,
                    "hocs": Array [],
                    "isAsync": false,
                    "key": "Switch",
                    "preload": false,
                    "value": Promise {
                      "_40": 0,
                      "_55": [Function],
                      "_65": 1,
                      "_72": null,
                      "isAsync": false,
                      "loaded": true,
                      "module": [Function],
                    },
                  },
                  "Text" => Object {
                    "applyStyles": true,
                    "hocs": Array [],
                    "isAsync": false,
                    "key": "Text",
                    "preload": false,
                    "value": Promise {
                      "_40": 0,
                      "_55": [Function],
                      "_65": 1,
                      "_72": null,
                      "isAsync": false,
                      "loaded": true,
                      "module": [Function],
                    },
                  },
                  "TextInput" => Object {
                    "applyStyles": true,
                    "hocs": Array [],
                    "isAsync": false,
                    "key": "TextInput",
                    "preload": false,
                    "value": Promise {
                      "_40": 0,
                      "_55": [Function],
                      "_65": 1,
                      "_72": null,
                      "isAsync": false,
                      "loaded": true,
                      "module": [Function],
                    },
                  },
                  "View" => Object {
                    "applyStyles": false,
                    "hocs": Array [],
                    "isAsync": false,
                    "key": "View",
                    "preload": false,
                    "value": Promise {
                      "_40": 0,
                      "_55": [Function],
                      "_65": 1,
                      "_72": null,
                      "isAsync": false,
                      "loaded": true,
                      "module": [Function],
                    },
                  },
                  "H1" => Object {
                    "applyStyles": true,
                    "hocs": Array [],
                    "isAsync": false,
                    "key": "H1",
                    "preload": false,
                    "styles": [Function],
                    "value": Promise {
                      "_40": 0,
                      "_55": [Function],
                      "_65": 1,
                      "_72": null,
                      "isAsync": false,
                      "loaded": true,
                      "module": [Function],
                    },
                  },
                  "H2" => Object {
                    "applyStyles": true,
                    "hocs": Array [],
                    "isAsync": false,
                    "key": "H2",
                    "preload": false,
                    "styles": [Function],
                    "value": Promise {
                      "_40": 0,
                      "_55": [Function],
                      "_65": 1,
                      "_72": null,
                      "isAsync": false,
                      "loaded": true,
                      "module": [Function],
                    },
                  },
                  "H3" => Object {
                    "applyStyles": true,
                    "hocs": Array [],
                    "isAsync": false,
                    "key": "H3",
                    "preload": false,
                    "styles": [Function],
                    "value": Promise {
                      "_40": 0,
                      "_55": [Function],
                      "_65": 1,
                      "_72": null,
                      "isAsync": false,
                      "loaded": true,
                      "module": [Function],
                    },
                  },
                  "H4" => Object {
                    "applyStyles": true,
                    "hocs": Array [],
                    "isAsync": false,
                    "key": "H4",
                    "preload": false,
                    "styles": [Function],
                    "value": Promise {
                      "_40": 0,
                      "_55": [Function],
                      "_65": 1,
                      "_72": null,
                      "isAsync": false,
                      "loaded": true,
                      "module": [Function],
                    },
                  },
                  "H5" => Object {
                    "applyStyles": true,
                    "hocs": Array [],
                    "isAsync": false,
                    "key": "H5",
                    "preload": false,
                    "styles": [Function],
                    "value": Promise {
                      "_40": 0,
                      "_55": [Function],
                      "_65": 1,
                      "_72": null,
                      "isAsync": false,
                      "loaded": true,
                      "module": [Function],
                    },
                  },
                  "H6" => Object {
                    "applyStyles": true,
                    "hocs": Array [],
                    "isAsync": false,
                    "key": "H6",
                    "preload": false,
                    "styles": [Function],
                    "value": Promise {
                      "_40": 0,
                      "_55": [Function],
                      "_65": 1,
                      "_72": null,
                      "isAsync": false,
                      "loaded": true,
                      "module": [Function],
                    },
                  },
                  "Subtitle1" => Object {
                    "applyStyles": true,
                    "hocs": Array [],
                    "isAsync": false,
                    "key": "Subtitle1",
                    "preload": false,
                    "styles": [Function],
                    "value": Promise {
                      "_40": 0,
                      "_55": [Function],
                      "_65": 1,
                      "_72": null,
                      "isAsync": false,
                      "loaded": true,
                      "module": [Function],
                    },
                  },
                  "Subtitle2" => Object {
                    "applyStyles": true,
                    "hocs": Array [],
                    "isAsync": false,
                    "key": "Subtitle2",
                    "preload": false,
                    "styles": [Function],
                    "value": Promise {
                      "_40": 0,
                      "_55": [Function],
                      "_65": 1,
                      "_72": null,
                      "isAsync": false,
                      "loaded": true,
                      "module": [Function],
                    },
                  },
                  "Body1" => Object {
                    "applyStyles": true,
                    "hocs": Array [],
                    "isAsync": false,
                    "key": "Body1",
                    "preload": false,
                    "styles": [Function],
                    "value": Promise {
                      "_40": 0,
                      "_55": [Function],
                      "_65": 1,
                      "_72": null,
                      "isAsync": false,
                      "loaded": true,
                      "module": [Function],
                    },
                  },
                  "Body2" => Object {
                    "applyStyles": true,
                    "hocs": Array [],
                    "isAsync": false,
                    "key": "Body2",
                    "preload": false,
                    "styles": [Function],
                    "value": Promise {
                      "_40": 0,
                      "_55": [Function],
                      "_65": 1,
                      "_72": null,
                      "isAsync": false,
                      "loaded": true,
                      "module": [Function],
                    },
                  },
                  "Caption" => Object {
                    "applyStyles": true,
                    "hocs": Array [],
                    "isAsync": false,
                    "key": "Caption",
                    "preload": false,
                    "styles": [Function],
                    "value": Promise {
                      "_40": 0,
                      "_55": [Function],
                      "_65": 1,
                      "_72": null,
                      "isAsync": false,
                      "loaded": true,
                      "module": [Function],
                    },
                  },
                  "Overline" => Object {
                    "applyStyles": true,
                    "hocs": Array [],
                    "isAsync": false,
                    "key": "Overline",
                    "preload": false,
                    "styles": [Function],
                    "value": Promise {
                      "_40": 0,
                      "_55": [Function],
                      "_65": 1,
                      "_72": null,
                      "isAsync": false,
                      "loaded": true,
                      "module": [Function],
                    },
                  },
                  "ApolloConsumer" => Object {
                    "applyStyles": true,
                    "hocs": Array [],
                    "isAsync": false,
                    "key": "ApolloConsumer",
                    "preload": false,
                    "value": Promise {
                      "_40": 0,
                      "_55": [Function],
                      "_65": 1,
                      "_72": null,
                      "isAsync": false,
                      "loaded": true,
                      "module": [Function],
                    },
                  },
                  "GraphqlMutation" => Object {
                    "applyStyles": true,
                    "hocs": Array [],
                    "isAsync": false,
                    "key": "GraphqlMutation",
                    "preload": false,
                    "value": Promise {
                      "_40": 0,
                      "_55": [Function],
                      "_65": 1,
                      "_72": null,
                      "isAsync": false,
                      "loaded": true,
                      "module": [Function],
                    },
                  },
                  "GraphqlQuery" => Object {
                    "applyStyles": true,
                    "hocs": Array [],
                    "isAsync": false,
                    "key": "GraphqlQuery",
                    "preload": false,
                    "value": Promise {
                      "_40": 0,
                      "_55": [Function],
                      "_65": 1,
                      "_72": null,
                      "isAsync": false,
                      "loaded": true,
                      "module": [Function],
                    },
                  },
                  "GraphqlSubscription" => Object {
                    "applyStyles": true,
                    "hocs": Array [],
                    "isAsync": false,
                    "key": "GraphqlSubscription",
                    "preload": false,
                    "value": Promise {
                      "_40": 0,
                      "_55": [Function],
                      "_65": 1,
                      "_72": null,
                      "isAsync": false,
                      "loaded": true,
                      "module": [Function],
                    },
                  },
                  "BaseFormField" => Object {
                    "applyStyles": true,
                    "hocs": Array [],
                    "isAsync": false,
                    "key": "BaseFormField",
                    "preload": false,
                    "value": Promise {
                      "_40": 0,
                      "_55": [Function],
                      "_65": 1,
                      "_72": null,
                      "isAsync": false,
                      "loaded": true,
                      "module": [Function],
                    },
                  },
                  "FormCheckboxInput" => Object {
                    "applyStyles": true,
                    "hocs": Array [],
                    "isAsync": false,
                    "key": "FormCheckboxInput",
                    "preload": false,
                    "value": Promise {
                      "_40": 0,
                      "_55": [Function],
                      "_65": 1,
                      "_72": null,
                      "isAsync": false,
                      "loaded": true,
                      "module": [Function],
                    },
                  },
                  "FormEmailInput" => Object {
                    "applyStyles": true,
                    "hocs": Array [],
                    "isAsync": false,
                    "key": "FormEmailInput",
                    "preload": false,
                    "value": Promise {
                      "_40": 0,
                      "_55": [Function],
                      "_65": 1,
                      "_72": null,
                      "isAsync": false,
                      "loaded": true,
                      "module": [Function],
                    },
                  },
                  "FormNumberInput" => Object {
                    "applyStyles": true,
                    "hocs": Array [],
                    "isAsync": false,
                    "key": "FormNumberInput",
                    "preload": false,
                    "value": Promise {
                      "_40": 0,
                      "_55": [Function],
                      "_65": 1,
                      "_72": null,
                      "isAsync": false,
                      "loaded": true,
                      "module": [Function],
                    },
                  },
                  "FormPasswordInput" => Object {
                    "applyStyles": true,
                    "hocs": Array [],
                    "isAsync": false,
                    "key": "FormPasswordInput",
                    "preload": false,
                    "value": Promise {
                      "_40": 0,
                      "_55": [Function],
                      "_65": 1,
                      "_72": null,
                      "isAsync": false,
                      "loaded": true,
                      "module": [Function],
                    },
                  },
                  "FormPickerInput" => Object {
                    "applyStyles": true,
                    "hocs": Array [],
                    "isAsync": false,
                    "key": "FormPickerInput",
                    "preload": false,
                    "value": Promise {
                      "_40": 0,
                      "_55": [Function],
                      "_65": 1,
                      "_72": null,
                      "isAsync": false,
                      "loaded": true,
                      "module": [Function],
                    },
                  },
                  "FormRadioGroupInput" => Object {
                    "applyStyles": true,
                    "hocs": Array [],
                    "isAsync": false,
                    "key": "FormRadioGroupInput",
                    "preload": false,
                    "value": Promise {
                      "_40": 0,
                      "_55": [Function],
                      "_65": 1,
                      "_72": null,
                      "isAsync": false,
                      "loaded": true,
                      "module": [Function],
                    },
                  },
                  "FormRangeInput" => Object {
                    "applyStyles": true,
                    "hocs": Array [],
                    "isAsync": false,
                    "key": "FormRangeInput",
                    "preload": false,
                    "value": Promise {
                      "_40": 0,
                      "_55": [Function],
                      "_65": 1,
                      "_72": null,
                      "isAsync": false,
                      "loaded": true,
                      "module": [Function],
                    },
                  },
                  "FormResetButton" => Object {
                    "applyStyles": true,
                    "hocs": Array [],
                    "isAsync": false,
                    "key": "FormResetButton",
                    "preload": false,
                    "value": Promise {
                      "_40": 0,
                      "_55": [Function],
                      "_65": 1,
                      "_72": null,
                      "isAsync": false,
                      "loaded": true,
                      "module": [Function],
                    },
                  },
                  "FormStatus" => Object {
                    "applyStyles": true,
                    "hocs": Array [],
                    "isAsync": false,
                    "key": "FormStatus",
                    "preload": false,
                    "value": Promise {
                      "_40": 0,
                      "_55": [Function],
                      "_65": 1,
                      "_72": null,
                      "isAsync": false,
                      "loaded": true,
                      "module": [Function],
                    },
                  },
                  "FormStatusList" => Object {
                    "applyStyles": true,
                    "hocs": Array [],
                    "isAsync": false,
                    "key": "FormStatusList",
                    "preload": false,
                    "value": Promise {
                      "_40": 0,
                      "_55": [Function],
                      "_65": 1,
                      "_72": null,
                      "isAsync": false,
                      "loaded": true,
                      "module": [Function],
                    },
                  },
                  "FormStatusListItem" => Object {
                    "applyStyles": true,
                    "hocs": Array [],
                    "isAsync": false,
                    "key": "FormStatusListItem",
                    "preload": false,
                    "value": Promise {
                      "_40": 0,
                      "_55": [Function],
                      "_65": 1,
                      "_72": null,
                      "isAsync": false,
                      "loaded": true,
                      "module": [Function],
                    },
                  },
                  "FormSubmitButton" => Object {
                    "applyStyles": true,
                    "hocs": Array [],
                    "isAsync": false,
                    "key": "FormSubmitButton",
                    "preload": false,
                    "value": Promise {
                      "_40": 0,
                      "_55": [Function],
                      "_65": 1,
                      "_72": null,
                      "isAsync": false,
                      "loaded": true,
                      "module": [Function],
                    },
                  },
                  "FormSwitchInput" => Object {
                    "applyStyles": true,
                    "hocs": Array [],
                    "isAsync": false,
                    "key": "FormSwitchInput",
                    "preload": false,
                    "value": Promise {
                      "_40": 0,
                      "_55": [Function],
                      "_65": 1,
                      "_72": null,
                      "isAsync": false,
                      "loaded": true,
                      "module": [Function],
                    },
                  },
                  "FormTextInput" => Object {
                    "applyStyles": true,
                    "hocs": Array [],
                    "isAsync": false,
                    "key": "FormTextInput",
                    "preload": false,
                    "value": Promise {
                      "_40": 0,
                      "_55": [Function],
                      "_65": 1,
                      "_72": null,
                      "isAsync": false,
                      "loaded": true,
                      "module": [Function],
                    },
                  },
                  "FormUrlInput" => Object {
                    "applyStyles": true,
                    "hocs": Array [],
                    "isAsync": false,
                    "key": "FormUrlInput",
                    "preload": false,
                    "value": Promise {
                      "_40": 0,
                      "_55": [Function],
                      "_65": 1,
                      "_72": null,
                      "isAsync": false,
                      "loaded": true,
                      "module": [Function],
                    },
                  },
                  "InlineFields" => Object {
                    "applyStyles": true,
                    "hocs": Array [],
                    "isAsync": false,
                    "key": "InlineFields",
                    "preload": false,
                    "value": Promise {
                      "_40": 0,
                      "_55": [Function],
                      "_65": 1,
                      "_72": null,
                      "isAsync": false,
                      "loaded": true,
                      "module": [Function],
                    },
                  },
                  "JsonForm" => Object {
                    "applyStyles": true,
                    "hocs": Array [],
                    "isAsync": false,
                    "key": "JsonForm",
                    "preload": false,
                    "value": Promise {
                      "_40": 0,
                      "_55": [Function],
                      "_65": 1,
                      "_72": null,
                      "isAsync": false,
                      "loaded": true,
                      "module": [Function],
                    },
                  },
                  "JsonGraphqlForm" => Object {
                    "applyStyles": true,
                    "hocs": Array [],
                    "isAsync": false,
                    "key": "JsonGraphqlForm",
                    "preload": false,
                    "value": Promise {
                      "_40": 0,
                      "_55": [Function],
                      "_65": 1,
                      "_72": null,
                      "isAsync": false,
                      "loaded": true,
                      "module": [Function],
                    },
                  },
                  "JsonLayout" => Object {
                    "applyStyles": true,
                    "hocs": Array [],
                    "isAsync": false,
                    "key": "JsonLayout",
                    "preload": false,
                    "value": Promise {
                      "_40": 0,
                      "_55": [Function],
                      "_65": 1,
                      "_72": null,
                      "isAsync": false,
                      "loaded": true,
                      "module": [Function],
                    },
                  },
                },
                "subscriptions": Map {},
              },
              "Configs": ConfigRegistry {
                "BB": [Circular],
                "data": Map {
                  "debug" => Object {
                    "key": "debug",
                    "value": true,
                  },
                  "development" => Object {
                    "key": "development",
                    "value": true,
                  },
                  "direction" => Object {
                    "key": "direction",
                    "value": "auto",
                  },
                  "locale" => Object {
                    "key": "locale",
                    "value": "en",
                  },
                  "locale.options" => Object {
                    "key": "locale.options",
                    "value": Object {
                      "en": "English",
                      "ur": "اُردُو",
                    },
                  },
                  "pluginRoutePathPrefix" => Object {
                    "key": "pluginRoutePathPrefix",
                    "value": "p",
                  },
                  "statusBarStyle" => Object {
                    "key": "statusBarStyle",
                    "value": "light-content",
                  },
                  "theme.mode" => Object {
                    "key": "theme.mode",
                    "value": "light",
                  },
                  "theme.name" => Object {
                    "key": "theme.name",
                    "value": "bluebase-light",
                  },
                  "theme.overrides" => Object {
                    "key": "theme.overrides",
                    "value": Object {},
                  },
                  "title" => Object {
                    "key": "title",
                    "value": "BlueBase",
                  },
                  "plugin.apollo.httpLinkOptions" => Object {
                    "key": "plugin.apollo.httpLinkOptions",
                    "value": Object {
                      "uri": "http://graphql",
                    },
                  },
                  "plugin.apollo.clientOptions" => Object {
                    "key": "plugin.apollo.clientOptions",
                    "value": Object {},
                  },
                },
                "subscriptions": Map {
                  "theme.name" => Map {
                    "_wmv3luo" => [Function],
                  },
                  "locale" => Map {
                    "_pyjjq59" => [Function],
                  },
                  "direction" => Map {
                    "_xwtcvgc" => [Function],
                  },
                },
              },
              "Filters": FilterRegistry {
                "BB": [Circular],
                "data": Map {
                  "bluebase-assets-register-internal-default" => Object {
                    "event": "bluebase.assets.register.internal",
                    "key": "bluebase-assets-register-internal-default",
                    "preload": false,
                    "priority": 5,
                    "value": Promise {
                      "_40": 0,
                      "_55": [Function],
                      "_65": 1,
                      "_72": null,
                      "isAsync": false,
                      "loaded": true,
                      "module": [Function],
                    },
                  },
                  "bluebase-assets-register-default" => Object {
                    "event": "bluebase.assets.register",
                    "key": "bluebase-assets-register-default",
                    "preload": false,
                    "priority": 5,
                    "value": Promise {
                      "_40": 0,
                      "_55": [Function],
                      "_65": 1,
                      "_72": null,
                      "isAsync": false,
                      "loaded": true,
                      "module": [Function],
                    },
                  },
                  "bluebase-boot-default" => Object {
                    "event": "bluebase.boot",
                    "key": "bluebase-boot-default",
                    "preload": false,
                    "priority": 5,
                    "value": Promise {
                      "_40": 0,
                      "_55": [Function],
                      "_65": 1,
                      "_72": null,
                      "isAsync": false,
                      "loaded": true,
                      "module": [Function],
                    },
                  },
                  "system-boot-start-default" => Object {
                    "event": "bluebase.boot.start",
                    "key": "system-boot-start-default",
                    "preload": false,
                    "priority": 5,
                    "value": Promise {
                      "_40": 0,
                      "_55": [Function],
                      "_65": 1,
                      "_72": null,
                      "isAsync": false,
                      "loaded": true,
                      "module": [Function],
                    },
                  },
                  "system-preload-default" => Object {
                    "event": "bluebase.preload",
                    "key": "system-preload-default",
                    "preload": false,
                    "priority": 5,
                    "value": Promise {
                      "_40": 0,
                      "_55": [Function],
                      "_65": 1,
                      "_72": null,
                      "isAsync": false,
                      "loaded": true,
                      "module": [Function],
                    },
                  },
                  "bluebase-components-register-internal-default" => Object {
                    "event": "bluebase.components.register.internal",
                    "key": "bluebase-components-register-internal-default",
                    "preload": false,
                    "priority": 5,
                    "value": Promise {
                      "_40": 0,
                      "_55": [Function],
                      "_65": 1,
                      "_72": null,
                      "isAsync": false,
                      "loaded": true,
                      "module": [Function],
                    },
                  },
                  "bluebase-components-register-default" => Object {
                    "event": "bluebase.components.register",
                    "key": "bluebase-components-register-default",
                    "preload": false,
                    "priority": 5,
                    "value": Promise {
                      "_40": 0,
                      "_55": [Function],
                      "_65": 1,
                      "_72": null,
                      "isAsync": false,
                      "loaded": true,
                      "module": [Function],
                    },
                  },
                  "bluebase-configs-register-default" => Object {
                    "event": "bluebase.configs.register",
                    "key": "bluebase-configs-register-default",
                    "preload": false,
                    "priority": 5,
                    "value": Promise {
                      "_40": 0,
                      "_55": [Function],
                      "_65": 1,
                      "_72": null,
                      "isAsync": false,
                      "loaded": true,
                      "module": [Function],
                    },
                  },
                  "bluebase-fonts-register-default" => Object {
                    "event": "bluebase.fonts.register",
                    "key": "bluebase-fonts-register-default",
                    "preload": false,
                    "priority": 5,
                    "value": Promise {
                      "_40": 0,
                      "_55": [Function],
                      "_65": 1,
                      "_72": null,
                      "isAsync": false,
                      "loaded": true,
                      "module": [Function],
                    },
                  },
                  "bluebase-plugins-register-default" => Object {
                    "event": "bluebase.plugins.register",
                    "key": "bluebase-plugins-register-default",
                    "preload": false,
                    "priority": 5,
                    "value": Promise {
                      "_40": 0,
                      "_55": [Function],
                      "_65": 1,
                      "_72": null,
                      "isAsync": false,
                      "loaded": true,
                      "module": [Function],
                    },
                  },
                  "bluebase-plugins-initialize-all-default" => Object {
                    "event": "bluebase.plugins.initialize.all",
                    "key": "bluebase-plugins-initialize-all-default",
                    "preload": false,
                    "priority": 5,
                    "value": Promise {
                      "_40": 0,
                      "_55": [Function],
                      "_65": 1,
                      "_72": null,
                      "isAsync": false,
                      "loaded": true,
                      "module": [Function],
                    },
                  },
                  "bluebase-plugins-initialize-default" => Object {
                    "event": "bluebase.plugins.initialize",
                    "key": "bluebase-plugins-initialize-default",
                    "preload": false,
                    "priority": 5,
                    "value": Promise {
                      "_40": 0,
                      "_55": [Function],
                      "_65": 1,
                      "_72": null,
                      "isAsync": false,
                      "loaded": true,
                      "module": [Function],
                    },
                  },
                  "bluebase-navigator-root-internal-default" => Object {
                    "event": "bluebase.navigator.root",
                    "key": "bluebase-navigator-root-internal-default",
                    "preload": false,
                    "priority": 5,
                    "value": Promise {
                      "_40": 0,
                      "_55": [Function],
                      "_65": 1,
                      "_72": null,
                      "isAsync": false,
                      "loaded": true,
                      "module": [Function],
                    },
                  },
                  "bluebase-navigator-main-internal-default" => Object {
                    "event": "bluebase.navigator.main",
                    "key": "bluebase-navigator-main-internal-default",
                    "preload": false,
                    "priority": 5,
                    "value": Promise {
                      "_40": 0,
                      "_55": [Function],
                      "_65": 1,
                      "_72": null,
                      "isAsync": false,
                      "loaded": true,
                      "module": [Function],
                    },
                  },
                  "bluebase-themes-register-internal-default" => Object {
                    "event": "bluebase.themes.register",
                    "key": "bluebase-themes-register-internal-default",
                    "preload": false,
                    "priority": 5,
                    "value": Promise {
                      "_40": 0,
                      "_55": [Function],
                      "_65": 1,
                      "_72": null,
                      "isAsync": false,
                      "loaded": true,
                      "module": [Function],
                    },
                  },
                  "_kxselc3" => Object {
                    "event": "bluebase.boot.end",
                    "key": "_kxselc3",
                    "preload": false,
                    "priority": 10,
                    "value": Promise {
                      "_40": 0,
                      "_55": [Function],
                      "_65": 1,
                      "_72": null,
                      "isAsync": false,
                      "loaded": true,
                      "module": [Function],
                    },
                  },
                },
                "subscriptions": Map {},
              },
              "Fonts": FontRegistry {
                "BB": [Circular],
                "data": Map {},
                "subscriptions": Map {},
              },
              "Logger": Logger {
                "BB": [Circular],
              },
              "Plugins": PluginRegistry {
                "BB": [Circular],
                "data": Map {
                  "plugin-apollo" => Object {
                    "categories": Array [],
                    "defaultConfigs": Object {
                      "plugin.apollo.clientOptions": Object {},
                      "plugin.apollo.httpLinkOptions": Object {},
                    },
                    "description": "🌍 A BlueBase Plugin that integrates Apollo GraphQL Client",
                    "enabled": true,
                    "key": "plugin-apollo",
                    "name": "Apollo Plugin",
                    "path": undefined,
                    "preload": false,
                    "value": Promise {
                      "_40": 0,
                      "_55": Object {
                        "assets": Object {},
                        "components": Object {
                          "ApolloConsumer": [Function],
                          "GraphqlMutation": [Function],
                          "GraphqlQuery": [Function],
                          "GraphqlSubscription": [Function],
                        },
                        "filters": Object {
                          "bluebase.boot.end": [Function],
                        },
                        "fonts": Object {},
                        "routes": undefined,
                        "themes": Object {},
                      },
                      "_65": 1,
                      "_72": null,
                      "isAsync": false,
                      "loaded": true,
                      "module": Object {
                        "assets": Object {},
                        "components": Object {
                          "ApolloConsumer": [Function],
                          "GraphqlMutation": [Function],
                          "GraphqlQuery": [Function],
                          "GraphqlSubscription": [Function],
                        },
                        "filters": Object {
                          "bluebase.boot.end": [Function],
                        },
                        "fonts": Object {},
                        "routes": undefined,
                        "themes": Object {},
                      },
                    },
                    "version": "1.0.0",
                  },
                  "plugin-json-schema-components" => Object {
                    "categories": Array [
                      "ui",
                    ],
                    "defaultConfigs": Object {},
                    "description": "A utility to build pluggable components based on JSON schema!",
                    "enabled": true,
                    "key": "plugin-json-schema-components",
                    "name": "Json Schema Components",
                    "path": undefined,
                    "preload": false,
                    "value": Promise {
                      "_40": 0,
                      "_55": Object {
                        "assets": Object {},
                        "components": Object {
                          "BaseFormField": [Function],
                          "FormCheckboxInput": [Function],
                          "FormEmailInput": [Function],
                          "FormNumberInput": [Function],
                          "FormPasswordInput": [Function],
                          "FormPickerInput": [Function],
                          "FormRadioGroupInput": [Function],
                          "FormRangeInput": [Function],
                          "FormResetButton": [Function],
                          "FormStatus": [Function],
                          "FormStatusList": [Function],
                          "FormStatusListItem": [Function],
                          "FormSubmitButton": [Function],
                          "FormSwitchInput": [Function],
                          "FormTextInput": [Function],
                          "FormUrlInput": [Function],
                          "InlineFields": [Function],
                          "JsonForm": [Function],
                          "JsonGraphqlForm": [Function],
                          "JsonLayout": [Function],
                        },
                        "filters": Object {},
                        "fonts": Object {},
                        "routes": undefined,
                        "themes": Object {},
                      },
                      "_65": 1,
                      "_72": null,
                      "isAsync": false,
                      "loaded": true,
                      "module": Object {
                        "assets": Object {},
                        "components": Object {
                          "BaseFormField": [Function],
                          "FormCheckboxInput": [Function],
                          "FormEmailInput": [Function],
                          "FormNumberInput": [Function],
                          "FormPasswordInput": [Function],
                          "FormPickerInput": [Function],
                          "FormRadioGroupInput": [Function],
                          "FormRangeInput": [Function],
                          "FormResetButton": [Function],
                          "FormStatus": [Function],
                          "FormStatusList": [Function],
                          "FormStatusListItem": [Function],
                          "FormSubmitButton": [Function],
                          "FormSwitchInput": [Function],
                          "FormTextInput": [Function],
                          "FormUrlInput": [Function],
                          "InlineFields": [Function],
                          "JsonForm": [Function],
                          "JsonGraphqlForm": [Function],
                          "JsonLayout": [Function],
                        },
                        "filters": Object {},
                        "fonts": Object {},
                        "routes": undefined,
                        "themes": Object {},
                      },
                    },
                    "version": "0.0.1",
                  },
                },
                "subscriptions": Map {},
              },
              "Themes": ThemeRegistry {
                "BB": [Circular],
                "data": Map {
                  "bluebase-light" => Object {
                    "alternate": "bluebase-dark",
                    "key": "bluebase-light",
                    "mode": "light",
                    "name": "BlueBase Light",
                    "preload": false,
                    "value": Promise {
                      "_40": 0,
                      "_55": Object {
                        "components": Object {},
                        "elevation": [Function],
                        "palette": Object {
                          "action": Object {
                            "active": "rgba(0, 0, 0, 0.54)",
                            "disabled": "rgba(0, 0, 0, 0.26)",
                            "disabledBackground": "rgba(0, 0, 0, 0.12)",
                            "hover": "rgba(0, 0, 0, 0.08)",
                            "hoverOpacity": 0.08,
                            "selected": "rgba(0, 0, 0, 0.14)",
                          },
                          "background": Object {
                            "card": "#ffffff",
                            "dark": "#eeeeee",
                            "default": "#f5f5f5",
                            "light": "#fafafa",
                          },
                          "divider": "rgba(0, 0, 0, 0.12)",
                          "error": Object {
                            "contrastText": "#fff",
                            "dark": "#d32f2f",
                            "light": "#e57373",
                            "main": "#f44336",
                          },
                          "primary": Object {
                            "contrastText": "#fff",
                            "dark": "#303f9f",
                            "light": "#7986cb",
                            "main": "#3f51b5",
                          },
                          "secondary": Object {
                            "contrastText": "#fff",
                            "dark": "#c51162",
                            "light": "#ff4081",
                            "main": "#f50057",
                          },
                          "success": Object {
                            "contrastText": "#fff",
                            "dark": "#388e3c",
                            "light": "#81c784",
                            "main": "#4caf50",
                          },
                          "text": Object {
                            "disabled": "rgba(0, 0, 0, 0.38)",
                            "hint": "rgba(0, 0, 0, 0.38)",
                            "icon": "rgba(0, 0, 0, 0.38)",
                            "primary": "rgba(0, 0, 0, 0.87)",
                            "secondary": "rgba(0, 0, 0, 0.54)",
                          },
                          "warning": Object {
                            "contrastText": "#fff",
                            "dark": "#ffa000",
                            "light": "#ffd54f",
                            "main": "#ffc107",
                          },
                        },
                        "shape": Object {
                          "borderRadius": 4,
                        },
                        "spacing": Object {
                          "unit": 8,
                        },
                        "typography": Object {
                          "body1": Object {
                            "color": "rgba(0, 0, 0, 0.87)",
                            "fontFamily": undefined,
                            "fontSize": 16,
                            "fontWeight": "400",
                          },
                          "body2": Object {
                            "color": "rgba(0, 0, 0, 0.87)",
                            "fontFamily": undefined,
                            "fontSize": 14,
                            "fontWeight": "400",
                          },
                          "button": Object {
                            "color": "rgba(0, 0, 0, 0.87)",
                            "fontFamily": undefined,
                            "fontSize": 14,
                            "fontWeight": "500",
                            "textTransform": "uppercase",
                          },
                          "caption": Object {
                            "color": "rgba(0, 0, 0, 0.87)",
                            "fontFamily": undefined,
                            "fontSize": 12,
                            "fontWeight": "400",
                          },
                          "h1": Object {
                            "color": "rgba(0, 0, 0, 0.87)",
                            "fontFamily": undefined,
                            "fontSize": 96,
                            "fontWeight": "300",
                          },
                          "h2": Object {
                            "color": "rgba(0, 0, 0, 0.87)",
                            "fontFamily": undefined,
                            "fontSize": 60,
                            "fontWeight": "300",
                          },
                          "h3": Object {
                            "color": "rgba(0, 0, 0, 0.87)",
                            "fontFamily": undefined,
                            "fontSize": 48,
                            "fontWeight": "400",
                          },
                          "h4": Object {
                            "color": "rgba(0, 0, 0, 0.87)",
                            "fontFamily": undefined,
                            "fontSize": 34,
                            "fontWeight": "400",
                          },
                          "h5": Object {
                            "color": "rgba(0, 0, 0, 0.87)",
                            "fontFamily": undefined,
                            "fontSize": 24,
                            "fontWeight": "400",
                          },
                          "h6": Object {
                            "color": "rgba(0, 0, 0, 0.87)",
                            "fontFamily": undefined,
                            "fontSize": 20,
                            "fontWeight": "500",
                          },
                          "overline": Object {
                            "color": "rgba(0, 0, 0, 0.87)",
                            "fontFamily": undefined,
                            "fontSize": 12,
                            "fontWeight": "400",
                            "textTransform": "uppercase",
                          },
                          "subtitle1": Object {
                            "color": "rgba(0, 0, 0, 0.87)",
                            "fontFamily": undefined,
                            "fontSize": 16,
                            "fontWeight": "400",
                          },
                          "subtitle2": Object {
                            "color": "rgba(0, 0, 0, 0.87)",
                            "fontFamily": undefined,
                            "fontSize": 14,
                            "fontWeight": "500",
                          },
                        },
                      },
                      "_65": 1,
                      "_72": null,
                      "isAsync": false,
                      "loaded": true,
                      "module": Object {
                        "components": Object {},
                        "elevation": [Function],
                        "palette": Object {
                          "action": Object {
                            "active": "rgba(0, 0, 0, 0.54)",
                            "disabled": "rgba(0, 0, 0, 0.26)",
                            "disabledBackground": "rgba(0, 0, 0, 0.12)",
                            "hover": "rgba(0, 0, 0, 0.08)",
                            "hoverOpacity": 0.08,
                            "selected": "rgba(0, 0, 0, 0.14)",
                          },
                          "background": Object {
                            "card": "#ffffff",
                            "dark": "#eeeeee",
                            "default": "#f5f5f5",
                            "light": "#fafafa",
                          },
                          "divider": "rgba(0, 0, 0, 0.12)",
                          "error": Object {
                            "contrastText": "#fff",
                            "dark": "#d32f2f",
                            "light": "#e57373",
                            "main": "#f44336",
                          },
                          "primary": Object {
                            "contrastText": "#fff",
                            "dark": "#303f9f",
                            "light": "#7986cb",
                            "main": "#3f51b5",
                          },
                          "secondary": Object {
                            "contrastText": "#fff",
                            "dark": "#c51162",
                            "light": "#ff4081",
                            "main": "#f50057",
                          },
                          "success": Object {
                            "contrastText": "#fff",
                            "dark": "#388e3c",
                            "light": "#81c784",
                            "main": "#4caf50",
                          },
                          "text": Object {
                            "disabled": "rgba(0, 0, 0, 0.38)",
                            "hint": "rgba(0, 0, 0, 0.38)",
                            "icon": "rgba(0, 0, 0, 0.38)",
                            "primary": "rgba(0, 0, 0, 0.87)",
                            "secondary": "rgba(0, 0, 0, 0.54)",
                          },
                          "warning": Object {
                            "contrastText": "#fff",
                            "dark": "#ffa000",
                            "light": "#ffd54f",
                            "main": "#ffc107",
                          },
                        },
                        "shape": Object {
                          "borderRadius": 4,
                        },
                        "spacing": Object {
                          "unit": 8,
                        },
                        "typography": Object {
                          "body1": Object {
                            "color": "rgba(0, 0, 0, 0.87)",
                            "fontFamily": undefined,
                            "fontSize": 16,
                            "fontWeight": "400",
                          },
                          "body2": Object {
                            "color": "rgba(0, 0, 0, 0.87)",
                            "fontFamily": undefined,
                            "fontSize": 14,
                            "fontWeight": "400",
                          },
                          "button": Object {
                            "color": "rgba(0, 0, 0, 0.87)",
                            "fontFamily": undefined,
                            "fontSize": 14,
                            "fontWeight": "500",
                            "textTransform": "uppercase",
                          },
                          "caption": Object {
                            "color": "rgba(0, 0, 0, 0.87)",
                            "fontFamily": undefined,
                            "fontSize": 12,
                            "fontWeight": "400",
                          },
                          "h1": Object {
                            "color": "rgba(0, 0, 0, 0.87)",
                            "fontFamily": undefined,
                            "fontSize": 96,
                            "fontWeight": "300",
                          },
                          "h2": Object {
                            "color": "rgba(0, 0, 0, 0.87)",
                            "fontFamily": undefined,
                            "fontSize": 60,
                            "fontWeight": "300",
                          },
                          "h3": Object {
                            "color": "rgba(0, 0, 0, 0.87)",
                            "fontFamily": undefined,
                            "fontSize": 48,
                            "fontWeight": "400",
                          },
                          "h4": Object {
                            "color": "rgba(0, 0, 0, 0.87)",
                            "fontFamily": undefined,
                            "fontSize": 34,
                            "fontWeight": "400",
                          },
                          "h5": Object {
                            "color": "rgba(0, 0, 0, 0.87)",
                            "fontFamily": undefined,
                            "fontSize": 24,
                            "fontWeight": "400",
                          },
                          "h6": Object {
                            "color": "rgba(0, 0, 0, 0.87)",
                            "fontFamily": undefined,
                            "fontSize": 20,
                            "fontWeight": "500",
                          },
                          "overline": Object {
                            "color": "rgba(0, 0, 0, 0.87)",
                            "fontFamily": undefined,
                            "fontSize": 12,
                            "fontWeight": "400",
                            "textTransform": "uppercase",
                          },
                          "subtitle1": Object {
                            "color": "rgba(0, 0, 0, 0.87)",
                            "fontFamily": undefined,
                            "fontSize": 16,
                            "fontWeight": "400",
                          },
                          "subtitle2": Object {
                            "color": "rgba(0, 0, 0, 0.87)",
                            "fontFamily": undefined,
                            "fontSize": 14,
                            "fontWeight": "500",
                          },
                        },
                      },
                    },
                  },
                  "bluebase-dark" => Object {
                    "alternate": "bluebase-light",
                    "key": "bluebase-dark",
                    "mode": "dark",
                    "name": "BlueBase Dark",
                    "preload": false,
                    "value": Promise {
                      "_40": 0,
                      "_55": Object {
                        "components": Object {},
                        "elevation": [Function],
                        "palette": Object {
                          "action": Object {
                            "active": "#ffffff",
                            "disabled": "rgba(255, 255, 255, 0.3)",
                            "disabledBackground": "rgba(255, 255, 255, 0.12)",
                            "hover": "rgba(255, 255, 255, 0.1)",
                            "hoverOpacity": 0.1,
                            "selected": "rgba(255, 255, 255, 0.2)",
                          },
                          "background": Object {
                            "card": "#424242",
                            "dark": "#202020",
                            "default": "#303030",
                            "light": "#404040",
                          },
                          "divider": "rgba(255, 255, 255, 0.12)",
                          "error": Object {
                            "contrastText": "#fff",
                            "dark": "#d32f2f",
                            "light": "#e57373",
                            "main": "#f44336",
                          },
                          "primary": Object {
                            "contrastText": "#fff",
                            "dark": "#303f9f",
                            "light": "#7986cb",
                            "main": "#3f51b5",
                          },
                          "secondary": Object {
                            "contrastText": "#fff",
                            "dark": "#c51162",
                            "light": "#ff4081",
                            "main": "#f50057",
                          },
                          "success": Object {
                            "contrastText": "#fff",
                            "dark": "#388e3c",
                            "light": "#81c784",
                            "main": "#4caf50",
                          },
                          "text": Object {
                            "disabled": "rgba(255, 255, 255, 0.5)",
                            "hint": "rgba(255, 255, 255, 0.5)",
                            "icon": "rgba(255, 255, 255, 0.5)",
                            "primary": "#ffffff",
                            "secondary": "rgba(255, 255, 255, 0.7)",
                          },
                          "warning": Object {
                            "contrastText": "#fff",
                            "dark": "#ffa000",
                            "light": "#ffd54f",
                            "main": "#ffc107",
                          },
                        },
                        "shape": Object {
                          "borderRadius": 4,
                        },
                        "spacing": Object {
                          "unit": 8,
                        },
                        "typography": Object {
                          "body1": Object {
                            "color": "#ffffff",
                            "fontFamily": undefined,
                            "fontSize": 16,
                            "fontWeight": "400",
                          },
                          "body2": Object {
                            "color": "#ffffff",
                            "fontFamily": undefined,
                            "fontSize": 14,
                            "fontWeight": "400",
                          },
                          "button": Object {
                            "color": "#ffffff",
                            "fontFamily": undefined,
                            "fontSize": 14,
                            "fontWeight": "500",
                            "textTransform": "uppercase",
                          },
                          "caption": Object {
                            "color": "#ffffff",
                            "fontFamily": undefined,
                            "fontSize": 12,
                            "fontWeight": "400",
                          },
                          "h1": Object {
                            "color": "#ffffff",
                            "fontFamily": undefined,
                            "fontSize": 96,
                            "fontWeight": "300",
                          },
                          "h2": Object {
                            "color": "#ffffff",
                            "fontFamily": undefined,
                            "fontSize": 60,
                            "fontWeight": "300",
                          },
                          "h3": Object {
                            "color": "#ffffff",
                            "fontFamily": undefined,
                            "fontSize": 48,
                            "fontWeight": "400",
                          },
                          "h4": Object {
                            "color": "#ffffff",
                            "fontFamily": undefined,
                            "fontSize": 34,
                            "fontWeight": "400",
                          },
                          "h5": Object {
                            "color": "#ffffff",
                            "fontFamily": undefined,
                            "fontSize": 24,
                            "fontWeight": "400",
                          },
                          "h6": Object {
                            "color": "#ffffff",
                            "fontFamily": undefined,
                            "fontSize": 20,
                            "fontWeight": "500",
                          },
                          "overline": Object {
                            "color": "#ffffff",
                            "fontFamily": undefined,
                            "fontSize": 12,
                            "fontWeight": "400",
                            "textTransform": "uppercase",
                          },
                          "subtitle1": Object {
                            "color": "#ffffff",
                            "fontFamily": undefined,
                            "fontSize": 16,
                            "fontWeight": "400",
                          },
                          "subtitle2": Object {
                            "color": "#ffffff",
                            "fontFamily": undefined,
                            "fontSize": 14,
                            "fontWeight": "500",
                          },
                        },
                      },
                      "_65": 1,
                      "_72": null,
                      "isAsync": false,
                      "loaded": true,
                      "module": Object {
                        "components": Object {},
                        "elevation": [Function],
                        "palette": Object {
                          "action": Object {
                            "active": "#ffffff",
                            "disabled": "rgba(255, 255, 255, 0.3)",
                            "disabledBackground": "rgba(255, 255, 255, 0.12)",
                            "hover": "rgba(255, 255, 255, 0.1)",
                            "hoverOpacity": 0.1,
                            "selected": "rgba(255, 255, 255, 0.2)",
                          },
                          "background": Object {
                            "card": "#424242",
                            "dark": "#202020",
                            "default": "#303030",
                            "light": "#404040",
                          },
                          "divider": "rgba(255, 255, 255, 0.12)",
                          "error": Object {
                            "contrastText": "#fff",
                            "dark": "#d32f2f",
                            "light": "#e57373",
                            "main": "#f44336",
                          },
                          "primary": Object {
                            "contrastText": "#fff",
                            "dark": "#303f9f",
                            "light": "#7986cb",
                            "main": "#3f51b5",
                          },
                          "secondary": Object {
                            "contrastText": "#fff",
                            "dark": "#c51162",
                            "light": "#ff4081",
                            "main": "#f50057",
                          },
                          "success": Object {
                            "contrastText": "#fff",
                            "dark": "#388e3c",
                            "light": "#81c784",
                            "main": "#4caf50",
                          },
                          "text": Object {
                            "disabled": "rgba(255, 255, 255, 0.5)",
                            "hint": "rgba(255, 255, 255, 0.5)",
                            "icon": "rgba(255, 255, 255, 0.5)",
                            "primary": "#ffffff",
                            "secondary": "rgba(255, 255, 255, 0.7)",
                          },
                          "warning": Object {
                            "contrastText": "#fff",
                            "dark": "#ffa000",
                            "light": "#ffd54f",
                            "main": "#ffc107",
                          },
                        },
                        "shape": Object {
                          "borderRadius": 4,
                        },
                        "spacing": Object {
                          "unit": 8,
                        },
                        "typography": Object {
                          "body1": Object {
                            "color": "#ffffff",
                            "fontFamily": undefined,
                            "fontSize": 16,
                            "fontWeight": "400",
                          },
                          "body2": Object {
                            "color": "#ffffff",
                            "fontFamily": undefined,
                            "fontSize": 14,
                            "fontWeight": "400",
                          },
                          "button": Object {
                            "color": "#ffffff",
                            "fontFamily": undefined,
                            "fontSize": 14,
                            "fontWeight": "500",
                            "textTransform": "uppercase",
                          },
                          "caption": Object {
                            "color": "#ffffff",
                            "fontFamily": undefined,
                            "fontSize": 12,
                            "fontWeight": "400",
                          },
                          "h1": Object {
                            "color": "#ffffff",
                            "fontFamily": undefined,
                            "fontSize": 96,
                            "fontWeight": "300",
                          },
                          "h2": Object {
                            "color": "#ffffff",
                            "fontFamily": undefined,
                            "fontSize": 60,
                            "fontWeight": "300",
                          },
                          "h3": Object {
                            "color": "#ffffff",
                            "fontFamily": undefined,
                            "fontSize": 48,
                            "fontWeight": "400",
                          },
                          "h4": Object {
                            "color": "#ffffff",
                            "fontFamily": undefined,
                            "fontSize": 34,
                            "fontWeight": "400",
                          },
                          "h5": Object {
                            "color": "#ffffff",
                            "fontFamily": undefined,
                            "fontSize": 24,
                            "fontWeight": "400",
                          },
                          "h6": Object {
                            "color": "#ffffff",
                            "fontFamily": undefined,
                            "fontSize": 20,
                            "fontWeight": "500",
                          },
                          "overline": Object {
                            "color": "#ffffff",
                            "fontFamily": undefined,
                            "fontSize": 12,
                            "fontWeight": "400",
                            "textTransform": "uppercase",
                          },
                          "subtitle1": Object {
                            "color": "#ffffff",
                            "fontFamily": undefined,
                            "fontSize": 16,
                            "fontWeight": "400",
                          },
                          "subtitle2": Object {
                            "color": "#ffffff",
                            "fontFamily": undefined,
                            "fontSize": 14,
                            "fontWeight": "500",
                          },
                        },
                      },
                    },
                  },
                },
                "subscriptions": Map {},
              },
              "bootOptions": Object {
                "assets": Object {},
                "children": <Unknown />,
                "components": Object {},
                "configs": Object {
                  "plugin.apollo.httpLinkOptions": Object {
                    "uri": "http://graphql",
                  },
                },
                "filters": Object {},
                "fonts": Object {},
                "plugins": Array [
                  Object {
                    "categories": Array [],
                    "defaultConfigs": Object {
                      "plugin.apollo.clientOptions": Object {},
                      "plugin.apollo.httpLinkOptions": Object {},
                    },
                    "description": "🌍 A BlueBase Plugin that integrates Apollo GraphQL Client",
                    "enabled": true,
                    "key": "plugin-apollo",
                    "name": "Apollo Plugin",
                    "value": Object {
                      "assets": Object {},
                      "components": Object {
                        "ApolloConsumer": [Function],
                        "GraphqlMutation": [Function],
                        "GraphqlQuery": [Function],
                        "GraphqlSubscription": [Function],
                      },
                      "filters": Object {
                        "bluebase.boot.end": [Function],
                      },
                      "fonts": Object {},
                      "routes": undefined,
                      "themes": Object {},
                    },
                    "version": "1.0.0",
                  },
                  Object {
                    "categories": Array [
                      "ui",
                    ],
                    "defaultConfigs": Object {},
                    "description": "A utility to build pluggable components based on JSON schema!",
                    "enabled": true,
                    "key": "plugin-json-schema-components",
                    "name": "Json Schema Components",
                    "value": Object {
                      "assets": Object {},
                      "components": Object {
                        "BaseFormField": [Function],
                        "FormCheckboxInput": [Function],
                        "FormEmailInput": [Function],
                        "FormNumberInput": [Function],
                        "FormPasswordInput": [Function],
                        "FormPickerInput": [Function],
                        "FormRadioGroupInput": [Function],
                        "FormRangeInput": [Function],
                        "FormResetButton": [Function],
                        "FormStatus": [Function],
                        "FormStatusList": [Function],
                        "FormStatusListItem": [Function],
                        "FormSubmitButton": [Function],
                        "FormSwitchInput": [Function],
                        "FormTextInput": [Function],
                        "FormUrlInput": [Function],
                        "InlineFields": [Function],
                        "JsonForm": [Function],
                        "JsonGraphqlForm": [Function],
                        "JsonLayout": [Function],
                      },
                      "filters": Object {},
                      "fonts": Object {},
                      "routes": undefined,
                      "themes": Object {},
                    },
                    "version": "0.0.1",
                  },
                ],
                "themes": Array [],
              },
              "booted": true,
            }
          }
          navigator={
            Object {
              "initialRouteName": "Root",
              "routes": Array [
                Object {
                  "name": "Root",
                  "navigationOptions": Object {
                    "header": null,
                  },
                  "navigator": Object {
                    "initialRouteName": "Home",
                    "routes": Array [
                      Object {
                        "exact": true,
                        "name": "Home",
                        "navigationOptions": Object {
                          "headerLeft": null,
                          "title": "BlueBase",
                        },
                        "path": "",
                        "screen": "HomeScreen",
                      },
                    ],
                    "type": "stack",
                  },
                  "path": "",
                },
              ],
              "type": "switch",
            }
          }
        >
          <Component
            BB={
              BlueBase {
                "Analytics": Analytics {
                  "BB": [Circular],
                },
                "Assets": AssetRegistry {
                  "BB": [Circular],
                  "data": Map {
                    "Logo" => Object {
                      "key": "Logo",
                      "preload": false,
                      "type": "unknown",
                      "value": Object {
                        "uri": "test-file-stub",
                      },
                    },
                    "LogoSquare" => Object {
                      "key": "LogoSquare",
                      "preload": false,
                      "type": "unknown",
                      "value": Object {
                        "uri": "test-file-stub",
                      },
                    },
                  },
                  "subscriptions": Map {},
                },
                "Components": ComponentRegistry {
                  "BB": [Circular],
                  "data": Map {
                    "BlueBaseContent" => Object {
                      "applyStyles": true,
                      "hocs": Array [
                        [Function],
                      ],
                      "isAsync": false,
                      "key": "BlueBaseContent",
                      "preload": false,
                      "value": Promise {
                        "_40": 0,
                        "_55": [Function],
                        "_65": 1,
                        "_72": null,
                        "isAsync": false,
                        "loaded": true,
                        "module": [Function],
                      },
                    },
                    "BlueBaseFilter" => Object {
                      "applyStyles": false,
                      "hocs": Array [],
                      "isAsync": false,
                      "key": "BlueBaseFilter",
                      "preload": false,
                      "value": Promise {
                        "_40": 0,
                        "_55": [Function],
                        "_65": 1,
                        "_72": null,
                        "isAsync": false,
                        "loaded": true,
                        "module": [Function],
                      },
                    },
                    "BlueBaseImage" => Object {
                      "applyStyles": true,
                      "hocs": Array [],
                      "isAsync": false,
                      "key": "BlueBaseImage",
                      "preload": false,
                      "value": Promise {
                        "_40": 0,
                        "_55": [Function],
                        "_65": 1,
                        "_72": null,
                        "isAsync": false,
                        "loaded": true,
                        "module": [Function],
                      },
                    },
                    "ComponentState" => Object {
                      "applyStyles": true,
                      "hocs": Array [],
                      "isAsync": false,
                      "key": "ComponentState",
                      "preload": false,
                      "value": Promise {
                        "_40": 0,
                        "_55": [Function],
                        "_65": 1,
                        "_72": null,
                        "isAsync": false,
                        "loaded": true,
                        "module": [Function],
                      },
                    },
                    "DataObserver" => Object {
                      "applyStyles": true,
                      "hocs": Array [],
                      "isAsync": false,
                      "key": "DataObserver",
                      "preload": false,
                      "value": Promise {
                        "_40": 0,
                        "_55": [Function],
                        "_65": 1,
                        "_72": null,
                        "isAsync": false,
                        "loaded": true,
                        "module": [Function],
                      },
                    },
                    "DynamicIcon" => Object {
                      "applyStyles": true,
                      "hocs": Array [],
                      "isAsync": false,
                      "key": "DynamicIcon",
                      "preload": false,
                      "value": Promise {
                        "_40": 0,
                        "_55": [Function],
                        "_65": 1,
                        "_72": null,
                        "isAsync": false,
                        "loaded": true,
                        "module": [Function],
                      },
                    },
                    "EmptyState" => Object {
                      "applyStyles": true,
                      "hocs": Array [],
                      "isAsync": false,
                      "key": "EmptyState",
                      "preload": false,
                      "value": Promise {
                        "_40": 0,
                        "_55": [Function],
                        "_65": 1,
                        "_72": null,
                        "isAsync": false,
                        "loaded": true,
                        "module": [Function],
                      },
                    },
                    "ErrorObserver" => Object {
                      "applyStyles": true,
                      "hocs": Array [],
                      "isAsync": false,
                      "key": "ErrorObserver",
                      "preload": false,
                      "value": Promise {
                        "_40": 0,
                        "_55": [Function],
                        "_65": 1,
                        "_72": null,
                        "isAsync": false,
                        "loaded": true,
                        "module": [Function],
                      },
                    },
                    "ErrorState" => Object {
                      "applyStyles": true,
                      "hocs": Array [],
                      "isAsync": false,
                      "key": "ErrorState",
                      "preload": false,
                      "value": Promise {
                        "_40": 0,
                        "_55": [Function],
                        "_65": 1,
                        "_72": null,
                        "isAsync": false,
                        "loaded": true,
                        "module": [Function],
                      },
                    },
                    "FormattedMessage" => Object {
                      "applyStyles": true,
                      "hocs": Array [],
                      "isAsync": false,
                      "key": "FormattedMessage",
                      "preload": false,
                      "value": Promise {
                        "_40": 0,
                        "_55": [Function],
                        "_65": 1,
                        "_72": null,
                        "isAsync": false,
                        "loaded": true,
                        "module": [Function],
                      },
                    },
                    "HomeScreen" => Object {
                      "applyStyles": true,
                      "hocs": Array [],
                      "isAsync": false,
                      "key": "HomeScreen",
                      "preload": false,
                      "value": Promise {
                        "_40": 0,
                        "_55": [Function],
                        "_65": 1,
                        "_72": null,
                        "isAsync": false,
                        "loaded": true,
                        "module": [Function],
                      },
                    },
                    "HoverObserver" => Object {
                      "applyStyles": true,
                      "hocs": Array [],
                      "isAsync": false,
                      "key": "HoverObserver",
                      "preload": false,
                      "value": Promise {
                        "_40": 0,
                        "_55": [Function],
                        "_65": 1,
                        "_72": null,
                        "isAsync": false,
                        "loaded": true,
                        "module": [Function],
                      },
                    },
                    "Icon" => Object {
                      "applyStyles": true,
                      "hocs": Array [],
                      "isAsync": false,
                      "key": "Icon",
                      "preload": false,
                      "value": Promise {
                        "_40": 0,
                        "_55": [Function],
                        "_65": 1,
                        "_72": null,
                        "isAsync": false,
                        "loaded": true,
                        "module": [Function],
                      },
                    },
                    "Link" => Object {
                      "applyStyles": true,
                      "hocs": Array [],
                      "isAsync": false,
                      "key": "Link",
                      "preload": false,
                      "value": Promise {
                        "_40": 0,
                        "_55": [Function],
                        "_65": 1,
                        "_72": null,
                        "isAsync": false,
                        "loaded": true,
                        "module": [Function],
                      },
                    },
                    "LoadingState" => Object {
                      "applyStyles": true,
                      "hocs": Array [],
                      "isAsync": false,
                      "key": "LoadingState",
                      "preload": false,
                      "value": Promise {
                        "_40": 0,
                        "_55": [Function],
                        "_65": 1,
                        "_72": null,
                        "isAsync": false,
                        "loaded": true,
                        "module": [Function],
                      },
                    },
                    "Navigation" => Object {
                      "applyStyles": true,
                      "hocs": Array [],
                      "isAsync": false,
                      "key": "Navigation",
                      "preload": false,
                      "value": Promise {
                        "_40": 0,
                        "_55": [Function],
                        "_65": 1,
                        "_72": null,
                        "isAsync": false,
                        "loaded": true,
                        "module": [Function],
                      },
                    },
                    "NavigationActions" => Object {
                      "applyStyles": true,
                      "hocs": Array [],
                      "isAsync": false,
                      "key": "NavigationActions",
                      "preload": false,
                      "value": Promise {
                        "_40": 0,
                        "_55": [Function],
                        "_65": 1,
                        "_72": null,
                        "isAsync": false,
                        "loaded": true,
                        "module": [Function],
                      },
                    },
                    "Noop" => Object {
                      "applyStyles": false,
                      "hocs": Array [],
                      "isAsync": false,
                      "key": "Noop",
                      "preload": false,
                      "value": Promise {
                        "_40": 0,
                        "_55": [Function],
                        "_65": 1,
                        "_72": null,
                        "isAsync": false,
                        "loaded": true,
                        "module": [Function],
                      },
                    },
                    "PluginIcon" => Object {
                      "applyStyles": true,
                      "hocs": Array [],
                      "isAsync": false,
                      "key": "PluginIcon",
                      "preload": false,
                      "value": Promise {
                        "_40": 0,
                        "_55": [Function],
                        "_65": 1,
                        "_72": null,
                        "isAsync": false,
                        "loaded": true,
                        "module": [Function],
                      },
                    },
                    "Redirect" => Object {
                      "applyStyles": false,
                      "hocs": Array [],
                      "isAsync": false,
                      "key": "Redirect",
                      "preload": false,
                      "value": Promise {
                        "_40": 0,
                        "_55": [Function],
                        "_65": 1,
                        "_72": null,
                        "isAsync": false,
                        "loaded": true,
                        "module": [Function],
                      },
                    },
                    "StatefulComponent" => Object {
                      "applyStyles": true,
                      "hocs": Array [],
                      "isAsync": false,
                      "key": "StatefulComponent",
                      "preload": false,
                      "value": Promise {
                        "_40": 0,
                        "_55": [Function],
                        "_65": 1,
                        "_72": null,
                        "isAsync": false,
                        "loaded": true,
                        "module": [Function],
                      },
                    },
                    "TouchableItem" => Object {
                      "applyStyles": true,
                      "hocs": Array [],
                      "isAsync": false,
                      "key": "TouchableItem",
                      "preload": false,
                      "value": Promise {
                        "_40": 0,
                        "_55": [Function],
                        "_65": 1,
                        "_72": null,
                        "isAsync": false,
                        "loaded": true,
                        "module": [Function],
                      },
                    },
                    "WaitObserver" => Object {
                      "applyStyles": true,
                      "hocs": Array [],
                      "isAsync": false,
                      "key": "WaitObserver",
                      "preload": false,
                      "value": Promise {
                        "_40": 0,
                        "_55": [Function],
                        "_65": 1,
                        "_72": null,
                        "isAsync": false,
                        "loaded": true,
                        "module": [Function],
                      },
                    },
                    "ActivityIndicator" => Object {
                      "applyStyles": true,
                      "hocs": Array [],
                      "isAsync": false,
                      "key": "ActivityIndicator",
                      "preload": false,
                      "value": Promise {
                        "_40": 0,
                        "_55": [Function],
                        "_65": 1,
                        "_72": null,
                        "isAsync": false,
                        "loaded": true,
                        "module": [Function],
                      },
                    },
                    "Button" => Object {
                      "applyStyles": true,
                      "hocs": Array [],
                      "isAsync": false,
                      "key": "Button",
                      "preload": false,
                      "value": Promise {
                        "_40": 0,
                        "_55": [Function],
                        "_65": 1,
                        "_72": null,
                        "isAsync": false,
                        "loaded": true,
                        "module": [Function],
                      },
                    },
                    "FlatList" => Object {
                      "applyStyles": true,
                      "hocs": Array [],
                      "isAsync": false,
                      "key": "FlatList",
                      "preload": false,
                      "value": Promise {
                        "_40": 0,
                        "_55": [Function],
                        "_65": 1,
                        "_72": null,
                        "isAsync": false,
                        "loaded": true,
                        "module": [Function],
                      },
                    },
                    "Image" => Object {
                      "applyStyles": true,
                      "hocs": Array [],
                      "isAsync": false,
                      "key": "Image",
                      "preload": false,
                      "value": Promise {
                        "_40": 0,
                        "_55": [Function],
                        "_65": 1,
                        "_72": null,
                        "isAsync": false,
                        "loaded": true,
                        "module": [Function],
                      },
                    },
                    "ImageBackground" => Object {
                      "applyStyles": true,
                      "hocs": Array [],
                      "isAsync": false,
                      "key": "ImageBackground",
                      "preload": false,
                      "value": Promise {
                        "_40": 0,
                        "_55": [Function],
                        "_65": 1,
                        "_72": null,
                        "isAsync": false,
                        "loaded": true,
                        "module": [Function],
                      },
                    },
                    "Picker" => Object {
                      "applyStyles": true,
                      "hocs": Array [],
                      "isAsync": false,
                      "key": "Picker",
                      "preload": false,
                      "value": Promise {
                        "_40": 0,
                        "_55": [Function],
                        "_65": 1,
                        "_72": null,
                        "isAsync": false,
                        "loaded": true,
                        "module": [Function],
                      },
                    },
                    "SafeAreaView" => Object {
                      "applyStyles": true,
                      "hocs": Array [],
                      "isAsync": false,
                      "key": "SafeAreaView",
                      "preload": false,
                      "value": Promise {
                        "_40": 0,
                        "_55": [Function],
                        "_65": 1,
                        "_72": null,
                        "isAsync": false,
                        "loaded": true,
                        "module": [Function],
                      },
                    },
                    "ScrollView" => Object {
                      "applyStyles": true,
                      "hocs": Array [],
                      "isAsync": false,
                      "key": "ScrollView",
                      "preload": false,
                      "value": Promise {
                        "_40": 0,
                        "_55": [MockFunction],
                        "_65": 1,
                        "_72": null,
                        "isAsync": false,
                        "loaded": true,
                        "module": [MockFunction],
                      },
                    },
                    "Slider" => Object {
                      "applyStyles": true,
                      "hocs": Array [],
                      "isAsync": false,
                      "key": "Slider",
                      "preload": false,
                      "value": Promise {
                        "_40": 0,
                        "_55": Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "defaultProps": Object {
                            "disabled": false,
                            "maximumValue": 1,
                            "minimumValue": 0,
                            "step": 0,
                            "value": 0,
                          },
                          "render": [Function],
                        },
                        "_65": 1,
                        "_72": null,
                        "isAsync": false,
                        "loaded": true,
                        "module": Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "defaultProps": Object {
                            "disabled": false,
                            "maximumValue": 1,
                            "minimumValue": 0,
                            "step": 0,
                            "value": 0,
                          },
                          "render": [Function],
                        },
                      },
                    },
                    "Switch" => Object {
                      "applyStyles": true,
                      "hocs": Array [],
                      "isAsync": false,
                      "key": "Switch",
                      "preload": false,
                      "value": Promise {
                        "_40": 0,
                        "_55": [Function],
                        "_65": 1,
                        "_72": null,
                        "isAsync": false,
                        "loaded": true,
                        "module": [Function],
                      },
                    },
                    "Text" => Object {
                      "applyStyles": true,
                      "hocs": Array [],
                      "isAsync": false,
                      "key": "Text",
                      "preload": false,
                      "value": Promise {
                        "_40": 0,
                        "_55": [Function],
                        "_65": 1,
                        "_72": null,
                        "isAsync": false,
                        "loaded": true,
                        "module": [Function],
                      },
                    },
                    "TextInput" => Object {
                      "applyStyles": true,
                      "hocs": Array [],
                      "isAsync": false,
                      "key": "TextInput",
                      "preload": false,
                      "value": Promise {
                        "_40": 0,
                        "_55": [Function],
                        "_65": 1,
                        "_72": null,
                        "isAsync": false,
                        "loaded": true,
                        "module": [Function],
                      },
                    },
                    "View" => Object {
                      "applyStyles": false,
                      "hocs": Array [],
                      "isAsync": false,
                      "key": "View",
                      "preload": false,
                      "value": Promise {
                        "_40": 0,
                        "_55": [Function],
                        "_65": 1,
                        "_72": null,
                        "isAsync": false,
                        "loaded": true,
                        "module": [Function],
                      },
                    },
                    "H1" => Object {
                      "applyStyles": true,
                      "hocs": Array [],
                      "isAsync": false,
                      "key": "H1",
                      "preload": false,
                      "styles": [Function],
                      "value": Promise {
                        "_40": 0,
                        "_55": [Function],
                        "_65": 1,
                        "_72": null,
                        "isAsync": false,
                        "loaded": true,
                        "module": [Function],
                      },
                    },
                    "H2" => Object {
                      "applyStyles": true,
                      "hocs": Array [],
                      "isAsync": false,
                      "key": "H2",
                      "preload": false,
                      "styles": [Function],
                      "value": Promise {
                        "_40": 0,
                        "_55": [Function],
                        "_65": 1,
                        "_72": null,
                        "isAsync": false,
                        "loaded": true,
                        "module": [Function],
                      },
                    },
                    "H3" => Object {
                      "applyStyles": true,
                      "hocs": Array [],
                      "isAsync": false,
                      "key": "H3",
                      "preload": false,
                      "styles": [Function],
                      "value": Promise {
                        "_40": 0,
                        "_55": [Function],
                        "_65": 1,
                        "_72": null,
                        "isAsync": false,
                        "loaded": true,
                        "module": [Function],
                      },
                    },
                    "H4" => Object {
                      "applyStyles": true,
                      "hocs": Array [],
                      "isAsync": false,
                      "key": "H4",
                      "preload": false,
                      "styles": [Function],
                      "value": Promise {
                        "_40": 0,
                        "_55": [Function],
                        "_65": 1,
                        "_72": null,
                        "isAsync": false,
                        "loaded": true,
                        "module": [Function],
                      },
                    },
                    "H5" => Object {
                      "applyStyles": true,
                      "hocs": Array [],
                      "isAsync": false,
                      "key": "H5",
                      "preload": false,
                      "styles": [Function],
                      "value": Promise {
                        "_40": 0,
                        "_55": [Function],
                        "_65": 1,
                        "_72": null,
                        "isAsync": false,
                        "loaded": true,
                        "module": [Function],
                      },
                    },
                    "H6" => Object {
                      "applyStyles": true,
                      "hocs": Array [],
                      "isAsync": false,
                      "key": "H6",
                      "preload": false,
                      "styles": [Function],
                      "value": Promise {
                        "_40": 0,
                        "_55": [Function],
                        "_65": 1,
                        "_72": null,
                        "isAsync": false,
                        "loaded": true,
                        "module": [Function],
                      },
                    },
                    "Subtitle1" => Object {
                      "applyStyles": true,
                      "hocs": Array [],
                      "isAsync": false,
                      "key": "Subtitle1",
                      "preload": false,
                      "styles": [Function],
                      "value": Promise {
                        "_40": 0,
                        "_55": [Function],
                        "_65": 1,
                        "_72": null,
                        "isAsync": false,
                        "loaded": true,
                        "module": [Function],
                      },
                    },
                    "Subtitle2" => Object {
                      "applyStyles": true,
                      "hocs": Array [],
                      "isAsync": false,
                      "key": "Subtitle2",
                      "preload": false,
                      "styles": [Function],
                      "value": Promise {
                        "_40": 0,
                        "_55": [Function],
                        "_65": 1,
                        "_72": null,
                        "isAsync": false,
                        "loaded": true,
                        "module": [Function],
                      },
                    },
                    "Body1" => Object {
                      "applyStyles": true,
                      "hocs": Array [],
                      "isAsync": false,
                      "key": "Body1",
                      "preload": false,
                      "styles": [Function],
                      "value": Promise {
                        "_40": 0,
                        "_55": [Function],
                        "_65": 1,
                        "_72": null,
                        "isAsync": false,
                        "loaded": true,
                        "module": [Function],
                      },
                    },
                    "Body2" => Object {
                      "applyStyles": true,
                      "hocs": Array [],
                      "isAsync": false,
                      "key": "Body2",
                      "preload": false,
                      "styles": [Function],
                      "value": Promise {
                        "_40": 0,
                        "_55": [Function],
                        "_65": 1,
                        "_72": null,
                        "isAsync": false,
                        "loaded": true,
                        "module": [Function],
                      },
                    },
                    "Caption" => Object {
                      "applyStyles": true,
                      "hocs": Array [],
                      "isAsync": false,
                      "key": "Caption",
                      "preload": false,
                      "styles": [Function],
                      "value": Promise {
                        "_40": 0,
                        "_55": [Function],
                        "_65": 1,
                        "_72": null,
                        "isAsync": false,
                        "loaded": true,
                        "module": [Function],
                      },
                    },
                    "Overline" => Object {
                      "applyStyles": true,
                      "hocs": Array [],
                      "isAsync": false,
                      "key": "Overline",
                      "preload": false,
                      "styles": [Function],
                      "value": Promise {
                        "_40": 0,
                        "_55": [Function],
                        "_65": 1,
                        "_72": null,
                        "isAsync": false,
                        "loaded": true,
                        "module": [Function],
                      },
                    },
                    "ApolloConsumer" => Object {
                      "applyStyles": true,
                      "hocs": Array [],
                      "isAsync": false,
                      "key": "ApolloConsumer",
                      "preload": false,
                      "value": Promise {
                        "_40": 0,
                        "_55": [Function],
                        "_65": 1,
                        "_72": null,
                        "isAsync": false,
                        "loaded": true,
                        "module": [Function],
                      },
                    },
                    "GraphqlMutation" => Object {
                      "applyStyles": true,
                      "hocs": Array [],
                      "isAsync": false,
                      "key": "GraphqlMutation",
                      "preload": false,
                      "value": Promise {
                        "_40": 0,
                        "_55": [Function],
                        "_65": 1,
                        "_72": null,
                        "isAsync": false,
                        "loaded": true,
                        "module": [Function],
                      },
                    },
                    "GraphqlQuery" => Object {
                      "applyStyles": true,
                      "hocs": Array [],
                      "isAsync": false,
                      "key": "GraphqlQuery",
                      "preload": false,
                      "value": Promise {
                        "_40": 0,
                        "_55": [Function],
                        "_65": 1,
                        "_72": null,
                        "isAsync": false,
                        "loaded": true,
                        "module": [Function],
                      },
                    },
                    "GraphqlSubscription" => Object {
                      "applyStyles": true,
                      "hocs": Array [],
                      "isAsync": false,
                      "key": "GraphqlSubscription",
                      "preload": false,
                      "value": Promise {
                        "_40": 0,
                        "_55": [Function],
                        "_65": 1,
                        "_72": null,
                        "isAsync": false,
                        "loaded": true,
                        "module": [Function],
                      },
                    },
                    "BaseFormField" => Object {
                      "applyStyles": true,
                      "hocs": Array [],
                      "isAsync": false,
                      "key": "BaseFormField",
                      "preload": false,
                      "value": Promise {
                        "_40": 0,
                        "_55": [Function],
                        "_65": 1,
                        "_72": null,
                        "isAsync": false,
                        "loaded": true,
                        "module": [Function],
                      },
                    },
                    "FormCheckboxInput" => Object {
                      "applyStyles": true,
                      "hocs": Array [],
                      "isAsync": false,
                      "key": "FormCheckboxInput",
                      "preload": false,
                      "value": Promise {
                        "_40": 0,
                        "_55": [Function],
                        "_65": 1,
                        "_72": null,
                        "isAsync": false,
                        "loaded": true,
                        "module": [Function],
                      },
                    },
                    "FormEmailInput" => Object {
                      "applyStyles": true,
                      "hocs": Array [],
                      "isAsync": false,
                      "key": "FormEmailInput",
                      "preload": false,
                      "value": Promise {
                        "_40": 0,
                        "_55": [Function],
                        "_65": 1,
                        "_72": null,
                        "isAsync": false,
                        "loaded": true,
                        "module": [Function],
                      },
                    },
                    "FormNumberInput" => Object {
                      "applyStyles": true,
                      "hocs": Array [],
                      "isAsync": false,
                      "key": "FormNumberInput",
                      "preload": false,
                      "value": Promise {
                        "_40": 0,
                        "_55": [Function],
                        "_65": 1,
                        "_72": null,
                        "isAsync": false,
                        "loaded": true,
                        "module": [Function],
                      },
                    },
                    "FormPasswordInput" => Object {
                      "applyStyles": true,
                      "hocs": Array [],
                      "isAsync": false,
                      "key": "FormPasswordInput",
                      "preload": false,
                      "value": Promise {
                        "_40": 0,
                        "_55": [Function],
                        "_65": 1,
                        "_72": null,
                        "isAsync": false,
                        "loaded": true,
                        "module": [Function],
                      },
                    },
                    "FormPickerInput" => Object {
                      "applyStyles": true,
                      "hocs": Array [],
                      "isAsync": false,
                      "key": "FormPickerInput",
                      "preload": false,
                      "value": Promise {
                        "_40": 0,
                        "_55": [Function],
                        "_65": 1,
                        "_72": null,
                        "isAsync": false,
                        "loaded": true,
                        "module": [Function],
                      },
                    },
                    "FormRadioGroupInput" => Object {
                      "applyStyles": true,
                      "hocs": Array [],
                      "isAsync": false,
                      "key": "FormRadioGroupInput",
                      "preload": false,
                      "value": Promise {
                        "_40": 0,
                        "_55": [Function],
                        "_65": 1,
                        "_72": null,
                        "isAsync": false,
                        "loaded": true,
                        "module": [Function],
                      },
                    },
                    "FormRangeInput" => Object {
                      "applyStyles": true,
                      "hocs": Array [],
                      "isAsync": false,
                      "key": "FormRangeInput",
                      "preload": false,
                      "value": Promise {
                        "_40": 0,
                        "_55": [Function],
                        "_65": 1,
                        "_72": null,
                        "isAsync": false,
                        "loaded": true,
                        "module": [Function],
                      },
                    },
                    "FormResetButton" => Object {
                      "applyStyles": true,
                      "hocs": Array [],
                      "isAsync": false,
                      "key": "FormResetButton",
                      "preload": false,
                      "value": Promise {
                        "_40": 0,
                        "_55": [Function],
                        "_65": 1,
                        "_72": null,
                        "isAsync": false,
                        "loaded": true,
                        "module": [Function],
                      },
                    },
                    "FormStatus" => Object {
                      "applyStyles": true,
                      "hocs": Array [],
                      "isAsync": false,
                      "key": "FormStatus",
                      "preload": false,
                      "value": Promise {
                        "_40": 0,
                        "_55": [Function],
                        "_65": 1,
                        "_72": null,
                        "isAsync": false,
                        "loaded": true,
                        "module": [Function],
                      },
                    },
                    "FormStatusList" => Object {
                      "applyStyles": true,
                      "hocs": Array [],
                      "isAsync": false,
                      "key": "FormStatusList",
                      "preload": false,
                      "value": Promise {
                        "_40": 0,
                        "_55": [Function],
                        "_65": 1,
                        "_72": null,
                        "isAsync": false,
                        "loaded": true,
                        "module": [Function],
                      },
                    },
                    "FormStatusListItem" => Object {
                      "applyStyles": true,
                      "hocs": Array [],
                      "isAsync": false,
                      "key": "FormStatusListItem",
                      "preload": false,
                      "value": Promise {
                        "_40": 0,
                        "_55": [Function],
                        "_65": 1,
                        "_72": null,
                        "isAsync": false,
                        "loaded": true,
                        "module": [Function],
                      },
                    },
                    "FormSubmitButton" => Object {
                      "applyStyles": true,
                      "hocs": Array [],
                      "isAsync": false,
                      "key": "FormSubmitButton",
                      "preload": false,
                      "value": Promise {
                        "_40": 0,
                        "_55": [Function],
                        "_65": 1,
                        "_72": null,
                        "isAsync": false,
                        "loaded": true,
                        "module": [Function],
                      },
                    },
                    "FormSwitchInput" => Object {
                      "applyStyles": true,
                      "hocs": Array [],
                      "isAsync": false,
                      "key": "FormSwitchInput",
                      "preload": false,
                      "value": Promise {
                        "_40": 0,
                        "_55": [Function],
                        "_65": 1,
                        "_72": null,
                        "isAsync": false,
                        "loaded": true,
                        "module": [Function],
                      },
                    },
                    "FormTextInput" => Object {
                      "applyStyles": true,
                      "hocs": Array [],
                      "isAsync": false,
                      "key": "FormTextInput",
                      "preload": false,
                      "value": Promise {
                        "_40": 0,
                        "_55": [Function],
                        "_65": 1,
                        "_72": null,
                        "isAsync": false,
                        "loaded": true,
                        "module": [Function],
                      },
                    },
                    "FormUrlInput" => Object {
                      "applyStyles": true,
                      "hocs": Array [],
                      "isAsync": false,
                      "key": "FormUrlInput",
                      "preload": false,
                      "value": Promise {
                        "_40": 0,
                        "_55": [Function],
                        "_65": 1,
                        "_72": null,
                        "isAsync": false,
                        "loaded": true,
                        "module": [Function],
                      },
                    },
                    "InlineFields" => Object {
                      "applyStyles": true,
                      "hocs": Array [],
                      "isAsync": false,
                      "key": "InlineFields",
                      "preload": false,
                      "value": Promise {
                        "_40": 0,
                        "_55": [Function],
                        "_65": 1,
                        "_72": null,
                        "isAsync": false,
                        "loaded": true,
                        "module": [Function],
                      },
                    },
                    "JsonForm" => Object {
                      "applyStyles": true,
                      "hocs": Array [],
                      "isAsync": false,
                      "key": "JsonForm",
                      "preload": false,
                      "value": Promise {
                        "_40": 0,
                        "_55": [Function],
                        "_65": 1,
                        "_72": null,
                        "isAsync": false,
                        "loaded": true,
                        "module": [Function],
                      },
                    },
                    "JsonGraphqlForm" => Object {
                      "applyStyles": true,
                      "hocs": Array [],
                      "isAsync": false,
                      "key": "JsonGraphqlForm",
                      "preload": false,
                      "value": Promise {
                        "_40": 0,
                        "_55": [Function],
                        "_65": 1,
                        "_72": null,
                        "isAsync": false,
                        "loaded": true,
                        "module": [Function],
                      },
                    },
                    "JsonLayout" => Object {
                      "applyStyles": true,
                      "hocs": Array [],
                      "isAsync": false,
                      "key": "JsonLayout",
                      "preload": false,
                      "value": Promise {
                        "_40": 0,
                        "_55": [Function],
                        "_65": 1,
                        "_72": null,
                        "isAsync": false,
                        "loaded": true,
                        "module": [Function],
                      },
                    },
                  },
                  "subscriptions": Map {},
                },
                "Configs": ConfigRegistry {
                  "BB": [Circular],
                  "data": Map {
                    "debug" => Object {
                      "key": "debug",
                      "value": true,
                    },
                    "development" => Object {
                      "key": "development",
                      "value": true,
                    },
                    "direction" => Object {
                      "key": "direction",
                      "value": "auto",
                    },
                    "locale" => Object {
                      "key": "locale",
                      "value": "en",
                    },
                    "locale.options" => Object {
                      "key": "locale.options",
                      "value": Object {
                        "en": "English",
                        "ur": "اُردُو",
                      },
                    },
                    "pluginRoutePathPrefix" => Object {
                      "key": "pluginRoutePathPrefix",
                      "value": "p",
                    },
                    "statusBarStyle" => Object {
                      "key": "statusBarStyle",
                      "value": "light-content",
                    },
                    "theme.mode" => Object {
                      "key": "theme.mode",
                      "value": "light",
                    },
                    "theme.name" => Object {
                      "key": "theme.name",
                      "value": "bluebase-light",
                    },
                    "theme.overrides" => Object {
                      "key": "theme.overrides",
                      "value": Object {},
                    },
                    "title" => Object {
                      "key": "title",
                      "value": "BlueBase",
                    },
                    "plugin.apollo.httpLinkOptions" => Object {
                      "key": "plugin.apollo.httpLinkOptions",
                      "value": Object {
                        "uri": "http://graphql",
                      },
                    },
                    "plugin.apollo.clientOptions" => Object {
                      "key": "plugin.apollo.clientOptions",
                      "value": Object {},
                    },
                  },
                  "subscriptions": Map {
                    "theme.name" => Map {
                      "_wmv3luo" => [Function],
                    },
                    "locale" => Map {
                      "_pyjjq59" => [Function],
                    },
                    "direction" => Map {
                      "_xwtcvgc" => [Function],
                    },
                  },
                },
                "Filters": FilterRegistry {
                  "BB": [Circular],
                  "data": Map {
                    "bluebase-assets-register-internal-default" => Object {
                      "event": "bluebase.assets.register.internal",
                      "key": "bluebase-assets-register-internal-default",
                      "preload": false,
                      "priority": 5,
                      "value": Promise {
                        "_40": 0,
                        "_55": [Function],
                        "_65": 1,
                        "_72": null,
                        "isAsync": false,
                        "loaded": true,
                        "module": [Function],
                      },
                    },
                    "bluebase-assets-register-default" => Object {
                      "event": "bluebase.assets.register",
                      "key": "bluebase-assets-register-default",
                      "preload": false,
                      "priority": 5,
                      "value": Promise {
                        "_40": 0,
                        "_55": [Function],
                        "_65": 1,
                        "_72": null,
                        "isAsync": false,
                        "loaded": true,
                        "module": [Function],
                      },
                    },
                    "bluebase-boot-default" => Object {
                      "event": "bluebase.boot",
                      "key": "bluebase-boot-default",
                      "preload": false,
                      "priority": 5,
                      "value": Promise {
                        "_40": 0,
                        "_55": [Function],
                        "_65": 1,
                        "_72": null,
                        "isAsync": false,
                        "loaded": true,
                        "module": [Function],
                      },
                    },
                    "system-boot-start-default" => Object {
                      "event": "bluebase.boot.start",
                      "key": "system-boot-start-default",
                      "preload": false,
                      "priority": 5,
                      "value": Promise {
                        "_40": 0,
                        "_55": [Function],
                        "_65": 1,
                        "_72": null,
                        "isAsync": false,
                        "loaded": true,
                        "module": [Function],
                      },
                    },
                    "system-preload-default" => Object {
                      "event": "bluebase.preload",
                      "key": "system-preload-default",
                      "preload": false,
                      "priority": 5,
                      "value": Promise {
                        "_40": 0,
                        "_55": [Function],
                        "_65": 1,
                        "_72": null,
                        "isAsync": false,
                        "loaded": true,
                        "module": [Function],
                      },
                    },
                    "bluebase-components-register-internal-default" => Object {
                      "event": "bluebase.components.register.internal",
                      "key": "bluebase-components-register-internal-default",
                      "preload": false,
                      "priority": 5,
                      "value": Promise {
                        "_40": 0,
                        "_55": [Function],
                        "_65": 1,
                        "_72": null,
                        "isAsync": false,
                        "loaded": true,
                        "module": [Function],
                      },
                    },
                    "bluebase-components-register-default" => Object {
                      "event": "bluebase.components.register",
                      "key": "bluebase-components-register-default",
                      "preload": false,
                      "priority": 5,
                      "value": Promise {
                        "_40": 0,
                        "_55": [Function],
                        "_65": 1,
                        "_72": null,
                        "isAsync": false,
                        "loaded": true,
                        "module": [Function],
                      },
                    },
                    "bluebase-configs-register-default" => Object {
                      "event": "bluebase.configs.register",
                      "key": "bluebase-configs-register-default",
                      "preload": false,
                      "priority": 5,
                      "value": Promise {
                        "_40": 0,
                        "_55": [Function],
                        "_65": 1,
                        "_72": null,
                        "isAsync": false,
                        "loaded": true,
                        "module": [Function],
                      },
                    },
                    "bluebase-fonts-register-default" => Object {
                      "event": "bluebase.fonts.register",
                      "key": "bluebase-fonts-register-default",
                      "preload": false,
                      "priority": 5,
                      "value": Promise {
                        "_40": 0,
                        "_55": [Function],
                        "_65": 1,
                        "_72": null,
                        "isAsync": false,
                        "loaded": true,
                        "module": [Function],
                      },
                    },
                    "bluebase-plugins-register-default" => Object {
                      "event": "bluebase.plugins.register",
                      "key": "bluebase-plugins-register-default",
                      "preload": false,
                      "priority": 5,
                      "value": Promise {
                        "_40": 0,
                        "_55": [Function],
                        "_65": 1,
                        "_72": null,
                        "isAsync": false,
                        "loaded": true,
                        "module": [Function],
                      },
                    },
                    "bluebase-plugins-initialize-all-default" => Object {
                      "event": "bluebase.plugins.initialize.all",
                      "key": "bluebase-plugins-initialize-all-default",
                      "preload": false,
                      "priority": 5,
                      "value": Promise {
                        "_40": 0,
                        "_55": [Function],
                        "_65": 1,
                        "_72": null,
                        "isAsync": false,
                        "loaded": true,
                        "module": [Function],
                      },
                    },
                    "bluebase-plugins-initialize-default" => Object {
                      "event": "bluebase.plugins.initialize",
                      "key": "bluebase-plugins-initialize-default",
                      "preload": false,
                      "priority": 5,
                      "value": Promise {
                        "_40": 0,
                        "_55": [Function],
                        "_65": 1,
                        "_72": null,
                        "isAsync": false,
                        "loaded": true,
                        "module": [Function],
                      },
                    },
                    "bluebase-navigator-root-internal-default" => Object {
                      "event": "bluebase.navigator.root",
                      "key": "bluebase-navigator-root-internal-default",
                      "preload": false,
                      "priority": 5,
                      "value": Promise {
                        "_40": 0,
                        "_55": [Function],
                        "_65": 1,
                        "_72": null,
                        "isAsync": false,
                        "loaded": true,
                        "module": [Function],
                      },
                    },
                    "bluebase-navigator-main-internal-default" => Object {
                      "event": "bluebase.navigator.main",
                      "key": "bluebase-navigator-main-internal-default",
                      "preload": false,
                      "priority": 5,
                      "value": Promise {
                        "_40": 0,
                        "_55": [Function],
                        "_65": 1,
                        "_72": null,
                        "isAsync": false,
                        "loaded": true,
                        "module": [Function],
                      },
                    },
                    "bluebase-themes-register-internal-default" => Object {
                      "event": "bluebase.themes.register",
                      "key": "bluebase-themes-register-internal-default",
                      "preload": false,
                      "priority": 5,
                      "value": Promise {
                        "_40": 0,
                        "_55": [Function],
                        "_65": 1,
                        "_72": null,
                        "isAsync": false,
                        "loaded": true,
                        "module": [Function],
                      },
                    },
                    "_kxselc3" => Object {
                      "event": "bluebase.boot.end",
                      "key": "_kxselc3",
                      "preload": false,
                      "priority": 10,
                      "value": Promise {
                        "_40": 0,
                        "_55": [Function],
                        "_65": 1,
                        "_72": null,
                        "isAsync": false,
                        "loaded": true,
                        "module": [Function],
                      },
                    },
                  },
                  "subscriptions": Map {},
                },
                "Fonts": FontRegistry {
                  "BB": [Circular],
                  "data": Map {},
                  "subscriptions": Map {},
                },
                "Logger": Logger {
                  "BB": [Circular],
                },
                "Plugins": PluginRegistry {
                  "BB": [Circular],
                  "data": Map {
                    "plugin-apollo" => Object {
                      "categories": Array [],
                      "defaultConfigs": Object {
                        "plugin.apollo.clientOptions": Object {},
                        "plugin.apollo.httpLinkOptions": Object {},
                      },
                      "description": "🌍 A BlueBase Plugin that integrates Apollo GraphQL Client",
                      "enabled": true,
                      "key": "plugin-apollo",
                      "name": "Apollo Plugin",
                      "path": undefined,
                      "preload": false,
                      "value": Promise {
                        "_40": 0,
                        "_55": Object {
                          "assets": Object {},
                          "components": Object {
                            "ApolloConsumer": [Function],
                            "GraphqlMutation": [Function],
                            "GraphqlQuery": [Function],
                            "GraphqlSubscription": [Function],
                          },
                          "filters": Object {
                            "bluebase.boot.end": [Function],
                          },
                          "fonts": Object {},
                          "routes": undefined,
                          "themes": Object {},
                        },
                        "_65": 1,
                        "_72": null,
                        "isAsync": false,
                        "loaded": true,
                        "module": Object {
                          "assets": Object {},
                          "components": Object {
                            "ApolloConsumer": [Function],
                            "GraphqlMutation": [Function],
                            "GraphqlQuery": [Function],
                            "GraphqlSubscription": [Function],
                          },
                          "filters": Object {
                            "bluebase.boot.end": [Function],
                          },
                          "fonts": Object {},
                          "routes": undefined,
                          "themes": Object {},
                        },
                      },
                      "version": "1.0.0",
                    },
                    "plugin-json-schema-components" => Object {
                      "categories": Array [
                        "ui",
                      ],
                      "defaultConfigs": Object {},
                      "description": "A utility to build pluggable components based on JSON schema!",
                      "enabled": true,
                      "key": "plugin-json-schema-components",
                      "name": "Json Schema Components",
                      "path": undefined,
                      "preload": false,
                      "value": Promise {
                        "_40": 0,
                        "_55": Object {
                          "assets": Object {},
                          "components": Object {
                            "BaseFormField": [Function],
                            "FormCheckboxInput": [Function],
                            "FormEmailInput": [Function],
                            "FormNumberInput": [Function],
                            "FormPasswordInput": [Function],
                            "FormPickerInput": [Function],
                            "FormRadioGroupInput": [Function],
                            "FormRangeInput": [Function],
                            "FormResetButton": [Function],
                            "FormStatus": [Function],
                            "FormStatusList": [Function],
                            "FormStatusListItem": [Function],
                            "FormSubmitButton": [Function],
                            "FormSwitchInput": [Function],
                            "FormTextInput": [Function],
                            "FormUrlInput": [Function],
                            "InlineFields": [Function],
                            "JsonForm": [Function],
                            "JsonGraphqlForm": [Function],
                            "JsonLayout": [Function],
                          },
                          "filters": Object {},
                          "fonts": Object {},
                          "routes": undefined,
                          "themes": Object {},
                        },
                        "_65": 1,
                        "_72": null,
                        "isAsync": false,
                        "loaded": true,
                        "module": Object {
                          "assets": Object {},
                          "components": Object {
                            "BaseFormField": [Function],
                            "FormCheckboxInput": [Function],
                            "FormEmailInput": [Function],
                            "FormNumberInput": [Function],
                            "FormPasswordInput": [Function],
                            "FormPickerInput": [Function],
                            "FormRadioGroupInput": [Function],
                            "FormRangeInput": [Function],
                            "FormResetButton": [Function],
                            "FormStatus": [Function],
                            "FormStatusList": [Function],
                            "FormStatusListItem": [Function],
                            "FormSubmitButton": [Function],
                            "FormSwitchInput": [Function],
                            "FormTextInput": [Function],
                            "FormUrlInput": [Function],
                            "InlineFields": [Function],
                            "JsonForm": [Function],
                            "JsonGraphqlForm": [Function],
                            "JsonLayout": [Function],
                          },
                          "filters": Object {},
                          "fonts": Object {},
                          "routes": undefined,
                          "themes": Object {},
                        },
                      },
                      "version": "0.0.1",
                    },
                  },
                  "subscriptions": Map {},
                },
                "Themes": ThemeRegistry {
                  "BB": [Circular],
                  "data": Map {
                    "bluebase-light" => Object {
                      "alternate": "bluebase-dark",
                      "key": "bluebase-light",
                      "mode": "light",
                      "name": "BlueBase Light",
                      "preload": false,
                      "value": Promise {
                        "_40": 0,
                        "_55": Object {
                          "components": Object {},
                          "elevation": [Function],
                          "palette": Object {
                            "action": Object {
                              "active": "rgba(0, 0, 0, 0.54)",
                              "disabled": "rgba(0, 0, 0, 0.26)",
                              "disabledBackground": "rgba(0, 0, 0, 0.12)",
                              "hover": "rgba(0, 0, 0, 0.08)",
                              "hoverOpacity": 0.08,
                              "selected": "rgba(0, 0, 0, 0.14)",
                            },
                            "background": Object {
                              "card": "#ffffff",
                              "dark": "#eeeeee",
                              "default": "#f5f5f5",
                              "light": "#fafafa",
                            },
                            "divider": "rgba(0, 0, 0, 0.12)",
                            "error": Object {
                              "contrastText": "#fff",
                              "dark": "#d32f2f",
                              "light": "#e57373",
                              "main": "#f44336",
                            },
                            "primary": Object {
                              "contrastText": "#fff",
                              "dark": "#303f9f",
                              "light": "#7986cb",
                              "main": "#3f51b5",
                            },
                            "secondary": Object {
                              "contrastText": "#fff",
                              "dark": "#c51162",
                              "light": "#ff4081",
                              "main": "#f50057",
                            },
                            "success": Object {
                              "contrastText": "#fff",
                              "dark": "#388e3c",
                              "light": "#81c784",
                              "main": "#4caf50",
                            },
                            "text": Object {
                              "disabled": "rgba(0, 0, 0, 0.38)",
                              "hint": "rgba(0, 0, 0, 0.38)",
                              "icon": "rgba(0, 0, 0, 0.38)",
                              "primary": "rgba(0, 0, 0, 0.87)",
                              "secondary": "rgba(0, 0, 0, 0.54)",
                            },
                            "warning": Object {
                              "contrastText": "#fff",
                              "dark": "#ffa000",
                              "light": "#ffd54f",
                              "main": "#ffc107",
                            },
                          },
                          "shape": Object {
                            "borderRadius": 4,
                          },
                          "spacing": Object {
                            "unit": 8,
                          },
                          "typography": Object {
                            "body1": Object {
                              "color": "rgba(0, 0, 0, 0.87)",
                              "fontFamily": undefined,
                              "fontSize": 16,
                              "fontWeight": "400",
                            },
                            "body2": Object {
                              "color": "rgba(0, 0, 0, 0.87)",
                              "fontFamily": undefined,
                              "fontSize": 14,
                              "fontWeight": "400",
                            },
                            "button": Object {
                              "color": "rgba(0, 0, 0, 0.87)",
                              "fontFamily": undefined,
                              "fontSize": 14,
                              "fontWeight": "500",
                              "textTransform": "uppercase",
                            },
                            "caption": Object {
                              "color": "rgba(0, 0, 0, 0.87)",
                              "fontFamily": undefined,
                              "fontSize": 12,
                              "fontWeight": "400",
                            },
                            "h1": Object {
                              "color": "rgba(0, 0, 0, 0.87)",
                              "fontFamily": undefined,
                              "fontSize": 96,
                              "fontWeight": "300",
                            },
                            "h2": Object {
                              "color": "rgba(0, 0, 0, 0.87)",
                              "fontFamily": undefined,
                              "fontSize": 60,
                              "fontWeight": "300",
                            },
                            "h3": Object {
                              "color": "rgba(0, 0, 0, 0.87)",
                              "fontFamily": undefined,
                              "fontSize": 48,
                              "fontWeight": "400",
                            },
                            "h4": Object {
                              "color": "rgba(0, 0, 0, 0.87)",
                              "fontFamily": undefined,
                              "fontSize": 34,
                              "fontWeight": "400",
                            },
                            "h5": Object {
                              "color": "rgba(0, 0, 0, 0.87)",
                              "fontFamily": undefined,
                              "fontSize": 24,
                              "fontWeight": "400",
                            },
                            "h6": Object {
                              "color": "rgba(0, 0, 0, 0.87)",
                              "fontFamily": undefined,
                              "fontSize": 20,
                              "fontWeight": "500",
                            },
                            "overline": Object {
                              "color": "rgba(0, 0, 0, 0.87)",
                              "fontFamily": undefined,
                              "fontSize": 12,
                              "fontWeight": "400",
                              "textTransform": "uppercase",
                            },
                            "subtitle1": Object {
                              "color": "rgba(0, 0, 0, 0.87)",
                              "fontFamily": undefined,
                              "fontSize": 16,
                              "fontWeight": "400",
                            },
                            "subtitle2": Object {
                              "color": "rgba(0, 0, 0, 0.87)",
                              "fontFamily": undefined,
                              "fontSize": 14,
                              "fontWeight": "500",
                            },
                          },
                        },
                        "_65": 1,
                        "_72": null,
                        "isAsync": false,
                        "loaded": true,
                        "module": Object {
                          "components": Object {},
                          "elevation": [Function],
                          "palette": Object {
                            "action": Object {
                              "active": "rgba(0, 0, 0, 0.54)",
                              "disabled": "rgba(0, 0, 0, 0.26)",
                              "disabledBackground": "rgba(0, 0, 0, 0.12)",
                              "hover": "rgba(0, 0, 0, 0.08)",
                              "hoverOpacity": 0.08,
                              "selected": "rgba(0, 0, 0, 0.14)",
                            },
                            "background": Object {
                              "card": "#ffffff",
                              "dark": "#eeeeee",
                              "default": "#f5f5f5",
                              "light": "#fafafa",
                            },
                            "divider": "rgba(0, 0, 0, 0.12)",
                            "error": Object {
                              "contrastText": "#fff",
                              "dark": "#d32f2f",
                              "light": "#e57373",
                              "main": "#f44336",
                            },
                            "primary": Object {
                              "contrastText": "#fff",
                              "dark": "#303f9f",
                              "light": "#7986cb",
                              "main": "#3f51b5",
                            },
                            "secondary": Object {
                              "contrastText": "#fff",
                              "dark": "#c51162",
                              "light": "#ff4081",
                              "main": "#f50057",
                            },
                            "success": Object {
                              "contrastText": "#fff",
                              "dark": "#388e3c",
                              "light": "#81c784",
                              "main": "#4caf50",
                            },
                            "text": Object {
                              "disabled": "rgba(0, 0, 0, 0.38)",
                              "hint": "rgba(0, 0, 0, 0.38)",
                              "icon": "rgba(0, 0, 0, 0.38)",
                              "primary": "rgba(0, 0, 0, 0.87)",
                              "secondary": "rgba(0, 0, 0, 0.54)",
                            },
                            "warning": Object {
                              "contrastText": "#fff",
                              "dark": "#ffa000",
                              "light": "#ffd54f",
                              "main": "#ffc107",
                            },
                          },
                          "shape": Object {
                            "borderRadius": 4,
                          },
                          "spacing": Object {
                            "unit": 8,
                          },
                          "typography": Object {
                            "body1": Object {
                              "color": "rgba(0, 0, 0, 0.87)",
                              "fontFamily": undefined,
                              "fontSize": 16,
                              "fontWeight": "400",
                            },
                            "body2": Object {
                              "color": "rgba(0, 0, 0, 0.87)",
                              "fontFamily": undefined,
                              "fontSize": 14,
                              "fontWeight": "400",
                            },
                            "button": Object {
                              "color": "rgba(0, 0, 0, 0.87)",
                              "fontFamily": undefined,
                              "fontSize": 14,
                              "fontWeight": "500",
                              "textTransform": "uppercase",
                            },
                            "caption": Object {
                              "color": "rgba(0, 0, 0, 0.87)",
                              "fontFamily": undefined,
                              "fontSize": 12,
                              "fontWeight": "400",
                            },
                            "h1": Object {
                              "color": "rgba(0, 0, 0, 0.87)",
                              "fontFamily": undefined,
                              "fontSize": 96,
                              "fontWeight": "300",
                            },
                            "h2": Object {
                              "color": "rgba(0, 0, 0, 0.87)",
                              "fontFamily": undefined,
                              "fontSize": 60,
                              "fontWeight": "300",
                            },
                            "h3": Object {
                              "color": "rgba(0, 0, 0, 0.87)",
                              "fontFamily": undefined,
                              "fontSize": 48,
                              "fontWeight": "400",
                            },
                            "h4": Object {
                              "color": "rgba(0, 0, 0, 0.87)",
                              "fontFamily": undefined,
                              "fontSize": 34,
                              "fontWeight": "400",
                            },
                            "h5": Object {
                              "color": "rgba(0, 0, 0, 0.87)",
                              "fontFamily": undefined,
                              "fontSize": 24,
                              "fontWeight": "400",
                            },
                            "h6": Object {
                              "color": "rgba(0, 0, 0, 0.87)",
                              "fontFamily": undefined,
                              "fontSize": 20,
                              "fontWeight": "500",
                            },
                            "overline": Object {
                              "color": "rgba(0, 0, 0, 0.87)",
                              "fontFamily": undefined,
                              "fontSize": 12,
                              "fontWeight": "400",
                              "textTransform": "uppercase",
                            },
                            "subtitle1": Object {
                              "color": "rgba(0, 0, 0, 0.87)",
                              "fontFamily": undefined,
                              "fontSize": 16,
                              "fontWeight": "400",
                            },
                            "subtitle2": Object {
                              "color": "rgba(0, 0, 0, 0.87)",
                              "fontFamily": undefined,
                              "fontSize": 14,
                              "fontWeight": "500",
                            },
                          },
                        },
                      },
                    },
                    "bluebase-dark" => Object {
                      "alternate": "bluebase-light",
                      "key": "bluebase-dark",
                      "mode": "dark",
                      "name": "BlueBase Dark",
                      "preload": false,
                      "value": Promise {
                        "_40": 0,
                        "_55": Object {
                          "components": Object {},
                          "elevation": [Function],
                          "palette": Object {
                            "action": Object {
                              "active": "#ffffff",
                              "disabled": "rgba(255, 255, 255, 0.3)",
                              "disabledBackground": "rgba(255, 255, 255, 0.12)",
                              "hover": "rgba(255, 255, 255, 0.1)",
                              "hoverOpacity": 0.1,
                              "selected": "rgba(255, 255, 255, 0.2)",
                            },
                            "background": Object {
                              "card": "#424242",
                              "dark": "#202020",
                              "default": "#303030",
                              "light": "#404040",
                            },
                            "divider": "rgba(255, 255, 255, 0.12)",
                            "error": Object {
                              "contrastText": "#fff",
                              "dark": "#d32f2f",
                              "light": "#e57373",
                              "main": "#f44336",
                            },
                            "primary": Object {
                              "contrastText": "#fff",
                              "dark": "#303f9f",
                              "light": "#7986cb",
                              "main": "#3f51b5",
                            },
                            "secondary": Object {
                              "contrastText": "#fff",
                              "dark": "#c51162",
                              "light": "#ff4081",
                              "main": "#f50057",
                            },
                            "success": Object {
                              "contrastText": "#fff",
                              "dark": "#388e3c",
                              "light": "#81c784",
                              "main": "#4caf50",
                            },
                            "text": Object {
                              "disabled": "rgba(255, 255, 255, 0.5)",
                              "hint": "rgba(255, 255, 255, 0.5)",
                              "icon": "rgba(255, 255, 255, 0.5)",
                              "primary": "#ffffff",
                              "secondary": "rgba(255, 255, 255, 0.7)",
                            },
                            "warning": Object {
                              "contrastText": "#fff",
                              "dark": "#ffa000",
                              "light": "#ffd54f",
                              "main": "#ffc107",
                            },
                          },
                          "shape": Object {
                            "borderRadius": 4,
                          },
                          "spacing": Object {
                            "unit": 8,
                          },
                          "typography": Object {
                            "body1": Object {
                              "color": "#ffffff",
                              "fontFamily": undefined,
                              "fontSize": 16,
                              "fontWeight": "400",
                            },
                            "body2": Object {
                              "color": "#ffffff",
                              "fontFamily": undefined,
                              "fontSize": 14,
                              "fontWeight": "400",
                            },
                            "button": Object {
                              "color": "#ffffff",
                              "fontFamily": undefined,
                              "fontSize": 14,
                              "fontWeight": "500",
                              "textTransform": "uppercase",
                            },
                            "caption": Object {
                              "color": "#ffffff",
                              "fontFamily": undefined,
                              "fontSize": 12,
                              "fontWeight": "400",
                            },
                            "h1": Object {
                              "color": "#ffffff",
                              "fontFamily": undefined,
                              "fontSize": 96,
                              "fontWeight": "300",
                            },
                            "h2": Object {
                              "color": "#ffffff",
                              "fontFamily": undefined,
                              "fontSize": 60,
                              "fontWeight": "300",
                            },
                            "h3": Object {
                              "color": "#ffffff",
                              "fontFamily": undefined,
                              "fontSize": 48,
                              "fontWeight": "400",
                            },
                            "h4": Object {
                              "color": "#ffffff",
                              "fontFamily": undefined,
                              "fontSize": 34,
                              "fontWeight": "400",
                            },
                            "h5": Object {
                              "color": "#ffffff",
                              "fontFamily": undefined,
                              "fontSize": 24,
                              "fontWeight": "400",
                            },
                            "h6": Object {
                              "color": "#ffffff",
                              "fontFamily": undefined,
                              "fontSize": 20,
                              "fontWeight": "500",
                            },
                            "overline": Object {
                              "color": "#ffffff",
                              "fontFamily": undefined,
                              "fontSize": 12,
                              "fontWeight": "400",
                              "textTransform": "uppercase",
                            },
                            "subtitle1": Object {
                              "color": "#ffffff",
                              "fontFamily": undefined,
                              "fontSize": 16,
                              "fontWeight": "400",
                            },
                            "subtitle2": Object {
                              "color": "#ffffff",
                              "fontFamily": undefined,
                              "fontSize": 14,
                              "fontWeight": "500",
                            },
                          },
                        },
                        "_65": 1,
                        "_72": null,
                        "isAsync": false,
                        "loaded": true,
                        "module": Object {
                          "components": Object {},
                          "elevation": [Function],
                          "palette": Object {
                            "action": Object {
                              "active": "#ffffff",
                              "disabled": "rgba(255, 255, 255, 0.3)",
                              "disabledBackground": "rgba(255, 255, 255, 0.12)",
                              "hover": "rgba(255, 255, 255, 0.1)",
                              "hoverOpacity": 0.1,
                              "selected": "rgba(255, 255, 255, 0.2)",
                            },
                            "background": Object {
                              "card": "#424242",
                              "dark": "#202020",
                              "default": "#303030",
                              "light": "#404040",
                            },
                            "divider": "rgba(255, 255, 255, 0.12)",
                            "error": Object {
                              "contrastText": "#fff",
                              "dark": "#d32f2f",
                              "light": "#e57373",
                              "main": "#f44336",
                            },
                            "primary": Object {
                              "contrastText": "#fff",
                              "dark": "#303f9f",
                              "light": "#7986cb",
                              "main": "#3f51b5",
                            },
                            "secondary": Object {
                              "contrastText": "#fff",
                              "dark": "#c51162",
                              "light": "#ff4081",
                              "main": "#f50057",
                            },
                            "success": Object {
                              "contrastText": "#fff",
                              "dark": "#388e3c",
                              "light": "#81c784",
                              "main": "#4caf50",
                            },
                            "text": Object {
                              "disabled": "rgba(255, 255, 255, 0.5)",
                              "hint": "rgba(255, 255, 255, 0.5)",
                              "icon": "rgba(255, 255, 255, 0.5)",
                              "primary": "#ffffff",
                              "secondary": "rgba(255, 255, 255, 0.7)",
                            },
                            "warning": Object {
                              "contrastText": "#fff",
                              "dark": "#ffa000",
                              "light": "#ffd54f",
                              "main": "#ffc107",
                            },
                          },
                          "shape": Object {
                            "borderRadius": 4,
                          },
                          "spacing": Object {
                            "unit": 8,
                          },
                          "typography": Object {
                            "body1": Object {
                              "color": "#ffffff",
                              "fontFamily": undefined,
                              "fontSize": 16,
                              "fontWeight": "400",
                            },
                            "body2": Object {
                              "color": "#ffffff",
                              "fontFamily": undefined,
                              "fontSize": 14,
                              "fontWeight": "400",
                            },
                            "button": Object {
                              "color": "#ffffff",
                              "fontFamily": undefined,
                              "fontSize": 14,
                              "fontWeight": "500",
                              "textTransform": "uppercase",
                            },
                            "caption": Object {
                              "color": "#ffffff",
                              "fontFamily": undefined,
                              "fontSize": 12,
                              "fontWeight": "400",
                            },
                            "h1": Object {
                              "color": "#ffffff",
                              "fontFamily": undefined,
                              "fontSize": 96,
                              "fontWeight": "300",
                            },
                            "h2": Object {
                              "color": "#ffffff",
                              "fontFamily": undefined,
                              "fontSize": 60,
                              "fontWeight": "300",
                            },
                            "h3": Object {
                              "color": "#ffffff",
                              "fontFamily": undefined,
                              "fontSize": 48,
                              "fontWeight": "400",
                            },
                            "h4": Object {
                              "color": "#ffffff",
                              "fontFamily": undefined,
                              "fontSize": 34,
                              "fontWeight": "400",
                            },
                            "h5": Object {
                              "color": "#ffffff",
                              "fontFamily": undefined,
                              "fontSize": 24,
                              "fontWeight": "400",
                            },
                            "h6": Object {
                              "color": "#ffffff",
                              "fontFamily": undefined,
                              "fontSize": 20,
                              "fontWeight": "500",
                            },
                            "overline": Object {
                              "color": "#ffffff",
                              "fontFamily": undefined,
                              "fontSize": 12,
                              "fontWeight": "400",
                              "textTransform": "uppercase",
                            },
                            "subtitle1": Object {
                              "color": "#ffffff",
                              "fontFamily": undefined,
                              "fontSize": 16,
                              "fontWeight": "400",
                            },
                            "subtitle2": Object {
                              "color": "#ffffff",
                              "fontFamily": undefined,
                              "fontSize": 14,
                              "fontWeight": "500",
                            },
                          },
                        },
                      },
                    },
                  },
                  "subscriptions": Map {},
                },
                "bootOptions": Object {
                  "assets": Object {},
                  "children": <Unknown />,
                  "components": Object {},
                  "configs": Object {
                    "plugin.apollo.httpLinkOptions": Object {
                      "uri": "http://graphql",
                    },
                  },
                  "filters": Object {},
                  "fonts": Object {},
                  "plugins": Array [
                    Object {
                      "categories": Array [],
                      "defaultConfigs": Object {
                        "plugin.apollo.clientOptions": Object {},
                        "plugin.apollo.httpLinkOptions": Object {},
                      },
                      "description": "🌍 A BlueBase Plugin that integrates Apollo GraphQL Client",
                      "enabled": true,
                      "key": "plugin-apollo",
                      "name": "Apollo Plugin",
                      "value": Object {
                        "assets": Object {},
                        "components": Object {
                          "ApolloConsumer": [Function],
                          "GraphqlMutation": [Function],
                          "GraphqlQuery": [Function],
                          "GraphqlSubscription": [Function],
                        },
                        "filters": Object {
                          "bluebase.boot.end": [Function],
                        },
                        "fonts": Object {},
                        "routes": undefined,
                        "themes": Object {},
                      },
                      "version": "1.0.0",
                    },
                    Object {
                      "categories": Array [
                        "ui",
                      ],
                      "defaultConfigs": Object {},
                      "description": "A utility to build pluggable components based on JSON schema!",
                      "enabled": true,
                      "key": "plugin-json-schema-components",
                      "name": "Json Schema Components",
                      "value": Object {
                        "assets": Object {},
                        "components": Object {
                          "BaseFormField": [Function],
                          "FormCheckboxInput": [Function],
                          "FormEmailInput": [Function],
                          "FormNumberInput": [Function],
                          "FormPasswordInput": [Function],
                          "FormPickerInput": [Function],
                          "FormRadioGroupInput": [Function],
                          "FormRangeInput": [Function],
                          "FormResetButton": [Function],
                          "FormStatus": [Function],
                          "FormStatusList": [Function],
                          "FormStatusListItem": [Function],
                          "FormSubmitButton": [Function],
                          "FormSwitchInput": [Function],
                          "FormTextInput": [Function],
                          "FormUrlInput": [Function],
                          "InlineFields": [Function],
                          "JsonForm": [Function],
                          "JsonGraphqlForm": [Function],
                          "JsonLayout": [Function],
                        },
                        "filters": Object {},
                        "fonts": Object {},
                        "routes": undefined,
                        "themes": Object {},
                      },
                      "version": "0.0.1",
                    },
                  ],
                  "themes": Array [],
                },
                "booted": true,
              }
            }
            navigator={
              Object {
                "initialRouteName": "Root",
                "routes": Array [
                  Object {
                    "name": "Root",
                    "navigationOptions": Object {
                      "header": null,
                    },
                    "navigator": Object {
                      "initialRouteName": "Home",
                      "routes": Array [
                        Object {
                          "exact": true,
                          "name": "Home",
                          "navigationOptions": Object {
                            "headerLeft": null,
                            "title": "BlueBase",
                          },
                          "path": "",
                          "screen": "HomeScreen",
                        },
                      ],
                      "type": "stack",
                    },
                    "path": "",
                  },
                ],
                "type": "switch",
              }
            }
          >
            <ApolloProvider
              client={
                ApolloClient {
                  "__operations_cache__": Map {},
                  "cache": InMemoryCache {
                    "addTypename": true,
                    "cacheKeyRoot": CacheKeyNode {
                      "children": null,
                      "key": null,
                    },
                    "config": Object {
                      "addTypename": true,
                      "dataIdFromObject": [Function],
                      "fragmentMatcher": HeuristicFragmentMatcher {},
                      "resultCaching": true,
                    },
                    "data": DepTrackingCache {
                      "data": Object {},
                      "depend": [Function],
                    },
                    "maybeBroadcastWatch": [Function],
                    "optimisticData": DepTrackingCache {
                      "data": Object {},
                      "depend": [Function],
                    },
                    "silenceBroadcast": false,
                    "storeReader": StoreReader {
                      "cacheKeyRoot": CacheKeyNode {
                        "children": null,
                        "key": null,
                      },
                      "executeSelectionSet": [Function],
                      "executeStoreQuery": [Function],
                    },
                    "storeWriter": StoreWriter {},
                    "typenameDocumentCache": Map {
                      Object {
                        "definitions": Array [
                          Object {
                            "directives": Array [],
                            "kind": "OperationDefinition",
                            "name": Object {
                              "kind": "Name",
                              "value": "SignupMutation",
                            },
                            "operation": "mutation",
                            "selectionSet": Object {
                              "kind": "SelectionSet",
                              "selections": Array [
                                Object {
                                  "alias": undefined,
                                  "arguments": Array [
                                    Object {
                                      "kind": "Argument",
                                      "name": Object {
                                        "kind": "Name",
                                        "value": "input",
                                      },
                                      "value": Object {
                                        "fields": Array [
                                          Object {
                                            "kind": "ObjectField",
                                            "name": Object {
                                              "kind": "Name",
                                              "value": "data",
                                            },
                                            "value": Object {
                                              "kind": "Variable",
                                              "name": Object {
                                                "kind": "Name",
                                                "value": "data",
                                              },
                                            },
                                          },
                                        ],
                                        "kind": "ObjectValue",
                                      },
                                    },
                                  ],
                                  "directives": Array [],
                                  "kind": "Field",
                                  "name": Object {
                                    "kind": "Name",
                                    "value": "signup",
                                  },
                                  "selectionSet": Object {
                                    "kind": "SelectionSet",
                                    "selections": Array [
                                      Object {
                                        "alias": undefined,
                                        "arguments": Array [],
                                        "directives": Array [],
                                        "kind": "Field",
                                        "name": Object {
                                          "kind": "Name",
                                          "value": "id",
                                        },
                                        "selectionSet": undefined,
                                      },
                                      Object {
                                        "alias": undefined,
                                        "arguments": Array [],
                                        "directives": Array [],
                                        "kind": "Field",
                                        "name": Object {
                                          "kind": "Name",
                                          "value": "firstName",
                                        },
                                        "selectionSet": undefined,
                                      },
                                      Object {
                                        "alias": undefined,
                                        "arguments": Array [],
                                        "directives": Array [],
                                        "kind": "Field",
                                        "name": Object {
                                          "kind": "Name",
                                          "value": "lastName",
                                        },
                                        "selectionSet": undefined,
                                      },
                                      Object {
                                        "alias": undefined,
                                        "arguments": Array [],
                                        "directives": Array [],
                                        "kind": "Field",
                                        "name": Object {
                                          "kind": "Name",
                                          "value": "email",
                                        },
                                        "selectionSet": undefined,
                                      },
                                      Object {
                                        "alias": undefined,
                                        "arguments": Array [],
                                        "directives": Array [],
                                        "kind": "Field",
                                        "name": Object {
                                          "kind": "Name",
                                          "value": "accessToken",
                                        },
                                        "selectionSet": undefined,
                                      },
                                    ],
                                  },
                                },
                              ],
                            },
                            "variableDefinitions": Array [
                              Object {
                                "defaultValue": undefined,
                                "directives": Array [],
                                "kind": "VariableDefinition",
                                "type": Object {
                                  "kind": "NamedType",
                                  "name": Object {
                                    "kind": "Name",
                                    "value": "JSON",
                                  },
                                },
                                "variable": Object {
                                  "kind": "Variable",
                                  "name": Object {
                                    "kind": "Name",
                                    "value": "data",
                                  },
                                },
                              },
                            ],
                          },
                        ],
                        "kind": "Document",
                        "loc": Object {
                          "end": 142,
                          "start": 0,
                        },
                      } => Object {
                        "definitions": Array [
                          Object {
                            "directives": Array [],
                            "kind": "OperationDefinition",
                            "name": Object {
                              "kind": "Name",
                              "value": "SignupMutation",
                            },
                            "operation": "mutation",
                            "selectionSet": Object {
                              "kind": "SelectionSet",
                              "selections": Array [
                                Object {
                                  "alias": undefined,
                                  "arguments": Array [
                                    Object {
                                      "kind": "Argument",
                                      "name": Object {
                                        "kind": "Name",
                                        "value": "input",
                                      },
                                      "value": Object {
                                        "fields": Array [
                                          Object {
                                            "kind": "ObjectField",
                                            "name": Object {
                                              "kind": "Name",
                                              "value": "data",
                                            },
                                            "value": Object {
                                              "kind": "Variable",
                                              "name": Object {
                                                "kind": "Name",
                                                "value": "data",
                                              },
                                            },
                                          },
                                        ],
                                        "kind": "ObjectValue",
                                      },
                                    },
                                  ],
                                  "directives": Array [],
                                  "kind": "Field",
                                  "name": Object {
                                    "kind": "Name",
                                    "value": "signup",
                                  },
                                  "selectionSet": Object {
                                    "kind": "SelectionSet",
                                    "selections": Array [
                                      Object {
                                        "alias": undefined,
                                        "arguments": Array [],
                                        "directives": Array [],
                                        "kind": "Field",
                                        "name": Object {
                                          "kind": "Name",
                                          "value": "id",
                                        },
                                        "selectionSet": undefined,
                                      },
                                      Object {
                                        "alias": undefined,
                                        "arguments": Array [],
                                        "directives": Array [],
                                        "kind": "Field",
                                        "name": Object {
                                          "kind": "Name",
                                          "value": "firstName",
                                        },
                                        "selectionSet": undefined,
                                      },
                                      Object {
                                        "alias": undefined,
                                        "arguments": Array [],
                                        "directives": Array [],
                                        "kind": "Field",
                                        "name": Object {
                                          "kind": "Name",
                                          "value": "lastName",
                                        },
                                        "selectionSet": undefined,
                                      },
                                      Object {
                                        "alias": undefined,
                                        "arguments": Array [],
                                        "directives": Array [],
                                        "kind": "Field",
                                        "name": Object {
                                          "kind": "Name",
                                          "value": "email",
                                        },
                                        "selectionSet": undefined,
                                      },
                                      Object {
                                        "alias": undefined,
                                        "arguments": Array [],
                                        "directives": Array [],
                                        "kind": "Field",
                                        "name": Object {
                                          "kind": "Name",
                                          "value": "accessToken",
                                        },
                                        "selectionSet": undefined,
                                      },
                                      Object {
                                        "kind": "Field",
                                        "name": Object {
                                          "kind": "Name",
                                          "value": "__typename",
                                        },
                                      },
                                    ],
                                  },
                                },
                              ],
                            },
                            "variableDefinitions": Array [
                              Object {
                                "defaultValue": undefined,
                                "directives": Array [],
                                "kind": "VariableDefinition",
                                "type": Object {
                                  "kind": "NamedType",
                                  "name": Object {
                                    "kind": "Name",
                                    "value": "JSON",
                                  },
                                },
                                "variable": Object {
                                  "kind": "Variable",
                                  "name": Object {
                                    "kind": "Name",
                                    "value": "data",
                                  },
                                },
                              },
                            ],
                          },
                        ],
                        "kind": "Document",
                        "loc": Object {
                          "end": 142,
                          "start": 0,
                        },
                      },
                      Object {
                        "definitions": Array [
                          Object {
                            "directives": Array [],
                            "kind": "OperationDefinition",
                            "name": Object {
                              "kind": "Name",
                              "value": "SignupMutation",
                            },
                            "operation": "mutation",
                            "selectionSet": Object {
                              "kind": "SelectionSet",
                              "selections": Array [
                                Object {
                                  "alias": undefined,
                                  "arguments": Array [
                                    Object {
                                      "kind": "Argument",
                                      "name": Object {
                                        "kind": "Name",
                                        "value": "input",
                                      },
                                      "value": Object {
                                        "fields": Array [
                                          Object {
                                            "kind": "ObjectField",
                                            "name": Object {
                                              "kind": "Name",
                                              "value": "data",
                                            },
                                            "value": Object {
                                              "kind": "Variable",
                                              "name": Object {
                                                "kind": "Name",
                                                "value": "data",
                                              },
                                            },
                                          },
                                        ],
                                        "kind": "ObjectValue",
                                      },
                                    },
                                  ],
                                  "directives": Array [],
                                  "kind": "Field",
                                  "name": Object {
                                    "kind": "Name",
                                    "value": "signup",
                                  },
                                  "selectionSet": Object {
                                    "kind": "SelectionSet",
                                    "selections": Array [
                                      Object {
                                        "alias": undefined,
                                        "arguments": Array [],
                                        "directives": Array [],
                                        "kind": "Field",
                                        "name": Object {
                                          "kind": "Name",
                                          "value": "id",
                                        },
                                        "selectionSet": undefined,
                                      },
                                      Object {
                                        "alias": undefined,
                                        "arguments": Array [],
                                        "directives": Array [],
                                        "kind": "Field",
                                        "name": Object {
                                          "kind": "Name",
                                          "value": "firstName",
                                        },
                                        "selectionSet": undefined,
                                      },
                                      Object {
                                        "alias": undefined,
                                        "arguments": Array [],
                                        "directives": Array [],
                                        "kind": "Field",
                                        "name": Object {
                                          "kind": "Name",
                                          "value": "lastName",
                                        },
                                        "selectionSet": undefined,
                                      },
                                      Object {
                                        "alias": undefined,
                                        "arguments": Array [],
                                        "directives": Array [],
                                        "kind": "Field",
                                        "name": Object {
                                          "kind": "Name",
                                          "value": "email",
                                        },
                                        "selectionSet": undefined,
                                      },
                                      Object {
                                        "alias": undefined,
                                        "arguments": Array [],
                                        "directives": Array [],
                                        "kind": "Field",
                                        "name": Object {
                                          "kind": "Name",
                                          "value": "accessToken",
                                        },
                                        "selectionSet": undefined,
                                      },
                                      Object {
                                        "kind": "Field",
                                        "name": Object {
                                          "kind": "Name",
                                          "value": "__typename",
                                        },
                                      },
                                    ],
                                  },
                                },
                              ],
                            },
                            "variableDefinitions": Array [
                              Object {
                                "defaultValue": undefined,
                                "directives": Array [],
                                "kind": "VariableDefinition",
                                "type": Object {
                                  "kind": "NamedType",
                                  "name": Object {
                                    "kind": "Name",
                                    "value": "JSON",
                                  },
                                },
                                "variable": Object {
                                  "kind": "Variable",
                                  "name": Object {
                                    "kind": "Name",
                                    "value": "data",
                                  },
                                },
                              },
                            ],
                          },
                        ],
                        "kind": "Document",
                        "loc": Object {
                          "end": 142,
                          "start": 0,
                        },
                      } => Object {
                        "definitions": Array [
                          Object {
                            "directives": Array [],
                            "kind": "OperationDefinition",
                            "name": Object {
                              "kind": "Name",
                              "value": "SignupMutation",
                            },
                            "operation": "mutation",
                            "selectionSet": Object {
                              "kind": "SelectionSet",
                              "selections": Array [
                                Object {
                                  "alias": undefined,
                                  "arguments": Array [
                                    Object {
                                      "kind": "Argument",
                                      "name": Object {
                                        "kind": "Name",
                                        "value": "input",
                                      },
                                      "value": Object {
                                        "fields": Array [
                                          Object {
                                            "kind": "ObjectField",
                                            "name": Object {
                                              "kind": "Name",
                                              "value": "data",
                                            },
                                            "value": Object {
                                              "kind": "Variable",
                                              "name": Object {
                                                "kind": "Name",
                                                "value": "data",
                                              },
                                            },
                                          },
                                        ],
                                        "kind": "ObjectValue",
                                      },
                                    },
                                  ],
                                  "directives": Array [],
                                  "kind": "Field",
                                  "name": Object {
                                    "kind": "Name",
                                    "value": "signup",
                                  },
                                  "selectionSet": Object {
                                    "kind": "SelectionSet",
                                    "selections": Array [
                                      Object {
                                        "alias": undefined,
                                        "arguments": Array [],
                                        "directives": Array [],
                                        "kind": "Field",
                                        "name": Object {
                                          "kind": "Name",
                                          "value": "id",
                                        },
                                        "selectionSet": undefined,
                                      },
                                      Object {
                                        "alias": undefined,
                                        "arguments": Array [],
                                        "directives": Array [],
                                        "kind": "Field",
                                        "name": Object {
                                          "kind": "Name",
                                          "value": "firstName",
                                        },
                                        "selectionSet": undefined,
                                      },
                                      Object {
                                        "alias": undefined,
                                        "arguments": Array [],
                                        "directives": Array [],
                                        "kind": "Field",
                                        "name": Object {
                                          "kind": "Name",
                                          "value": "lastName",
                                        },
                                        "selectionSet": undefined,
                                      },
                                      Object {
                                        "alias": undefined,
                                        "arguments": Array [],
                                        "directives": Array [],
                                        "kind": "Field",
                                        "name": Object {
                                          "kind": "Name",
                                          "value": "email",
                                        },
                                        "selectionSet": undefined,
                                      },
                                      Object {
                                        "alias": undefined,
                                        "arguments": Array [],
                                        "directives": Array [],
                                        "kind": "Field",
                                        "name": Object {
                                          "kind": "Name",
                                          "value": "accessToken",
                                        },
                                        "selectionSet": undefined,
                                      },
                                      Object {
                                        "kind": "Field",
                                        "name": Object {
                                          "kind": "Name",
                                          "value": "__typename",
                                        },
                                      },
                                    ],
                                  },
                                },
                              ],
                            },
                            "variableDefinitions": Array [
                              Object {
                                "defaultValue": undefined,
                                "directives": Array [],
                                "kind": "VariableDefinition",
                                "type": Object {
                                  "kind": "NamedType",
                                  "name": Object {
                                    "kind": "Name",
                                    "value": "JSON",
                                  },
                                },
                                "variable": Object {
                                  "kind": "Variable",
                                  "name": Object {
                                    "kind": "Name",
                                    "value": "data",
                                  },
                                },
                              },
                            ],
                          },
                        ],
                        "kind": "Document",
                        "loc": Object {
                          "end": 142,
                          "start": 0,
                        },
                      },
                    },
                    "watches": Set {},
                  },
                  "clearStoreCallbacks": Array [],
                  "clientAwareness": Object {},
                  "defaultOptions": Object {},
                  "disableNetworkFetches": false,
                  "link": ApolloLink {
                    "request": [Function],
                  },
                  "localState": LocalState {
                    "cache": InMemoryCache {
                      "addTypename": true,
                      "cacheKeyRoot": CacheKeyNode {
                        "children": null,
                        "key": null,
                      },
                      "config": Object {
                        "addTypename": true,
                        "dataIdFromObject": [Function],
                        "fragmentMatcher": HeuristicFragmentMatcher {},
                        "resultCaching": true,
                      },
                      "data": DepTrackingCache {
                        "data": Object {},
                        "depend": [Function],
                      },
                      "maybeBroadcastWatch": [Function],
                      "optimisticData": DepTrackingCache {
                        "data": Object {},
                        "depend": [Function],
                      },
                      "silenceBroadcast": false,
                      "storeReader": StoreReader {
                        "cacheKeyRoot": CacheKeyNode {
                          "children": null,
                          "key": null,
                        },
                        "executeSelectionSet": [Function],
                        "executeStoreQuery": [Function],
                      },
                      "storeWriter": StoreWriter {},
                      "typenameDocumentCache": Map {
                        Object {
                          "definitions": Array [
                            Object {
                              "directives": Array [],
                              "kind": "OperationDefinition",
                              "name": Object {
                                "kind": "Name",
                                "value": "SignupMutation",
                              },
                              "operation": "mutation",
                              "selectionSet": Object {
                                "kind": "SelectionSet",
                                "selections": Array [
                                  Object {
                                    "alias": undefined,
                                    "arguments": Array [
                                      Object {
                                        "kind": "Argument",
                                        "name": Object {
                                          "kind": "Name",
                                          "value": "input",
                                        },
                                        "value": Object {
                                          "fields": Array [
                                            Object {
                                              "kind": "ObjectField",
                                              "name": Object {
                                                "kind": "Name",
                                                "value": "data",
                                              },
                                              "value": Object {
                                                "kind": "Variable",
                                                "name": Object {
                                                  "kind": "Name",
                                                  "value": "data",
                                                },
                                              },
                                            },
                                          ],
                                          "kind": "ObjectValue",
                                        },
                                      },
                                    ],
                                    "directives": Array [],
                                    "kind": "Field",
                                    "name": Object {
                                      "kind": "Name",
                                      "value": "signup",
                                    },
                                    "selectionSet": Object {
                                      "kind": "SelectionSet",
                                      "selections": Array [
                                        Object {
                                          "alias": undefined,
                                          "arguments": Array [],
                                          "directives": Array [],
                                          "kind": "Field",
                                          "name": Object {
                                            "kind": "Name",
                                            "value": "id",
                                          },
                                          "selectionSet": undefined,
                                        },
                                        Object {
                                          "alias": undefined,
                                          "arguments": Array [],
                                          "directives": Array [],
                                          "kind": "Field",
                                          "name": Object {
                                            "kind": "Name",
                                            "value": "firstName",
                                          },
                                          "selectionSet": undefined,
                                        },
                                        Object {
                                          "alias": undefined,
                                          "arguments": Array [],
                                          "directives": Array [],
                                          "kind": "Field",
                                          "name": Object {
                                            "kind": "Name",
                                            "value": "lastName",
                                          },
                                          "selectionSet": undefined,
                                        },
                                        Object {
                                          "alias": undefined,
                                          "arguments": Array [],
                                          "directives": Array [],
                                          "kind": "Field",
                                          "name": Object {
                                            "kind": "Name",
                                            "value": "email",
                                          },
                                          "selectionSet": undefined,
                                        },
                                        Object {
                                          "alias": undefined,
                                          "arguments": Array [],
                                          "directives": Array [],
                                          "kind": "Field",
                                          "name": Object {
                                            "kind": "Name",
                                            "value": "accessToken",
                                          },
                                          "selectionSet": undefined,
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                              "variableDefinitions": Array [
                                Object {
                                  "defaultValue": undefined,
                                  "directives": Array [],
                                  "kind": "VariableDefinition",
                                  "type": Object {
                                    "kind": "NamedType",
                                    "name": Object {
                                      "kind": "Name",
                                      "value": "JSON",
                                    },
                                  },
                                  "variable": Object {
                                    "kind": "Variable",
                                    "name": Object {
                                      "kind": "Name",
                                      "value": "data",
                                    },
                                  },
                                },
                              ],
                            },
                          ],
                          "kind": "Document",
                          "loc": Object {
                            "end": 142,
                            "start": 0,
                          },
                        } => Object {
                          "definitions": Array [
                            Object {
                              "directives": Array [],
                              "kind": "OperationDefinition",
                              "name": Object {
                                "kind": "Name",
                                "value": "SignupMutation",
                              },
                              "operation": "mutation",
                              "selectionSet": Object {
                                "kind": "SelectionSet",
                                "selections": Array [
                                  Object {
                                    "alias": undefined,
                                    "arguments": Array [
                                      Object {
                                        "kind": "Argument",
                                        "name": Object {
                                          "kind": "Name",
                                          "value": "input",
                                        },
                                        "value": Object {
                                          "fields": Array [
                                            Object {
                                              "kind": "ObjectField",
                                              "name": Object {
                                                "kind": "Name",
                                                "value": "data",
                                              },
                                              "value": Object {
                                                "kind": "Variable",
                                                "name": Object {
                                                  "kind": "Name",
                                                  "value": "data",
                                                },
                                              },
                                            },
                                          ],
                                          "kind": "ObjectValue",
                                        },
                                      },
                                    ],
                                    "directives": Array [],
                                    "kind": "Field",
                                    "name": Object {
                                      "kind": "Name",
                                      "value": "signup",
                                    },
                                    "selectionSet": Object {
                                      "kind": "SelectionSet",
                                      "selections": Array [
                                        Object {
                                          "alias": undefined,
                                          "arguments": Array [],
                                          "directives": Array [],
                                          "kind": "Field",
                                          "name": Object {
                                            "kind": "Name",
                                            "value": "id",
                                          },
                                          "selectionSet": undefined,
                                        },
                                        Object {
                                          "alias": undefined,
                                          "arguments": Array [],
                                          "directives": Array [],
                                          "kind": "Field",
                                          "name": Object {
                                            "kind": "Name",
                                            "value": "firstName",
                                          },
                                          "selectionSet": undefined,
                                        },
                                        Object {
                                          "alias": undefined,
                                          "arguments": Array [],
                                          "directives": Array [],
                                          "kind": "Field",
                                          "name": Object {
                                            "kind": "Name",
                                            "value": "lastName",
                                          },
                                          "selectionSet": undefined,
                                        },
                                        Object {
                                          "alias": undefined,
                                          "arguments": Array [],
                                          "directives": Array [],
                                          "kind": "Field",
                                          "name": Object {
                                            "kind": "Name",
                                            "value": "email",
                                          },
                                          "selectionSet": undefined,
                                        },
                                        Object {
                                          "alias": undefined,
                                          "arguments": Array [],
                                          "directives": Array [],
                                          "kind": "Field",
                                          "name": Object {
                                            "kind": "Name",
                                            "value": "accessToken",
                                          },
                                          "selectionSet": undefined,
                                        },
                                        Object {
                                          "kind": "Field",
                                          "name": Object {
                                            "kind": "Name",
                                            "value": "__typename",
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                              "variableDefinitions": Array [
                                Object {
                                  "defaultValue": undefined,
                                  "directives": Array [],
                                  "kind": "VariableDefinition",
                                  "type": Object {
                                    "kind": "NamedType",
                                    "name": Object {
                                      "kind": "Name",
                                      "value": "JSON",
                                    },
                                  },
                                  "variable": Object {
                                    "kind": "Variable",
                                    "name": Object {
                                      "kind": "Name",
                                      "value": "data",
                                    },
                                  },
                                },
                              ],
                            },
                          ],
                          "kind": "Document",
                          "loc": Object {
                            "end": 142,
                            "start": 0,
                          },
                        },
                        Object {
                          "definitions": Array [
                            Object {
                              "directives": Array [],
                              "kind": "OperationDefinition",
                              "name": Object {
                                "kind": "Name",
                                "value": "SignupMutation",
                              },
                              "operation": "mutation",
                              "selectionSet": Object {
                                "kind": "SelectionSet",
                                "selections": Array [
                                  Object {
                                    "alias": undefined,
                                    "arguments": Array [
                                      Object {
                                        "kind": "Argument",
                                        "name": Object {
                                          "kind": "Name",
                                          "value": "input",
                                        },
                                        "value": Object {
                                          "fields": Array [
                                            Object {
                                              "kind": "ObjectField",
                                              "name": Object {
                                                "kind": "Name",
                                                "value": "data",
                                              },
                                              "value": Object {
                                                "kind": "Variable",
                                                "name": Object {
                                                  "kind": "Name",
                                                  "value": "data",
                                                },
                                              },
                                            },
                                          ],
                                          "kind": "ObjectValue",
                                        },
                                      },
                                    ],
                                    "directives": Array [],
                                    "kind": "Field",
                                    "name": Object {
                                      "kind": "Name",
                                      "value": "signup",
                                    },
                                    "selectionSet": Object {
                                      "kind": "SelectionSet",
                                      "selections": Array [
                                        Object {
                                          "alias": undefined,
                                          "arguments": Array [],
                                          "directives": Array [],
                                          "kind": "Field",
                                          "name": Object {
                                            "kind": "Name",
                                            "value": "id",
                                          },
                                          "selectionSet": undefined,
                                        },
                                        Object {
                                          "alias": undefined,
                                          "arguments": Array [],
                                          "directives": Array [],
                                          "kind": "Field",
                                          "name": Object {
                                            "kind": "Name",
                                            "value": "firstName",
                                          },
                                          "selectionSet": undefined,
                                        },
                                        Object {
                                          "alias": undefined,
                                          "arguments": Array [],
                                          "directives": Array [],
                                          "kind": "Field",
                                          "name": Object {
                                            "kind": "Name",
                                            "value": "lastName",
                                          },
                                          "selectionSet": undefined,
                                        },
                                        Object {
                                          "alias": undefined,
                                          "arguments": Array [],
                                          "directives": Array [],
                                          "kind": "Field",
                                          "name": Object {
                                            "kind": "Name",
                                            "value": "email",
                                          },
                                          "selectionSet": undefined,
                                        },
                                        Object {
                                          "alias": undefined,
                                          "arguments": Array [],
                                          "directives": Array [],
                                          "kind": "Field",
                                          "name": Object {
                                            "kind": "Name",
                                            "value": "accessToken",
                                          },
                                          "selectionSet": undefined,
                                        },
                                        Object {
                                          "kind": "Field",
                                          "name": Object {
                                            "kind": "Name",
                                            "value": "__typename",
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                              "variableDefinitions": Array [
                                Object {
                                  "defaultValue": undefined,
                                  "directives": Array [],
                                  "kind": "VariableDefinition",
                                  "type": Object {
                                    "kind": "NamedType",
                                    "name": Object {
                                      "kind": "Name",
                                      "value": "JSON",
                                    },
                                  },
                                  "variable": Object {
                                    "kind": "Variable",
                                    "name": Object {
                                      "kind": "Name",
                                      "value": "data",
                                    },
                                  },
                                },
                              ],
                            },
                          ],
                          "kind": "Document",
                          "loc": Object {
                            "end": 142,
                            "start": 0,
                          },
                        } => Object {
                          "definitions": Array [
                            Object {
                              "directives": Array [],
                              "kind": "OperationDefinition",
                              "name": Object {
                                "kind": "Name",
                                "value": "SignupMutation",
                              },
                              "operation": "mutation",
                              "selectionSet": Object {
                                "kind": "SelectionSet",
                                "selections": Array [
                                  Object {
                                    "alias": undefined,
                                    "arguments": Array [
                                      Object {
                                        "kind": "Argument",
                                        "name": Object {
                                          "kind": "Name",
                                          "value": "input",
                                        },
                                        "value": Object {
                                          "fields": Array [
                                            Object {
                                              "kind": "ObjectField",
                                              "name": Object {
                                                "kind": "Name",
                                                "value": "data",
                                              },
                                              "value": Object {
                                                "kind": "Variable",
                                                "name": Object {
                                                  "kind": "Name",
                                                  "value": "data",
                                                },
                                              },
                                            },
                                          ],
                                          "kind": "ObjectValue",
                                        },
                                      },
                                    ],
                                    "directives": Array [],
                                    "kind": "Field",
                                    "name": Object {
                                      "kind": "Name",
                                      "value": "signup",
                                    },
                                    "selectionSet": Object {
                                      "kind": "SelectionSet",
                                      "selections": Array [
                                        Object {
                                          "alias": undefined,
                                          "arguments": Array [],
                                          "directives": Array [],
                                          "kind": "Field",
                                          "name": Object {
                                            "kind": "Name",
                                            "value": "id",
                                          },
                                          "selectionSet": undefined,
                                        },
                                        Object {
                                          "alias": undefined,
                                          "arguments": Array [],
                                          "directives": Array [],
                                          "kind": "Field",
                                          "name": Object {
                                            "kind": "Name",
                                            "value": "firstName",
                                          },
                                          "selectionSet": undefined,
                                        },
                                        Object {
                                          "alias": undefined,
                                          "arguments": Array [],
                                          "directives": Array [],
                                          "kind": "Field",
                                          "name": Object {
                                            "kind": "Name",
                                            "value": "lastName",
                                          },
                                          "selectionSet": undefined,
                                        },
                                        Object {
                                          "alias": undefined,
                                          "arguments": Array [],
                                          "directives": Array [],
                                          "kind": "Field",
                                          "name": Object {
                                            "kind": "Name",
                                            "value": "email",
                                          },
                                          "selectionSet": undefined,
                                        },
                                        Object {
                                          "alias": undefined,
                                          "arguments": Array [],
                                          "directives": Array [],
                                          "kind": "Field",
                                          "name": Object {
                                            "kind": "Name",
                                            "value": "accessToken",
                                          },
                                          "selectionSet": undefined,
                                        },
                                        Object {
                                          "kind": "Field",
                                          "name": Object {
                                            "kind": "Name",
                                            "value": "__typename",
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                              "variableDefinitions": Array [
                                Object {
                                  "defaultValue": undefined,
                                  "directives": Array [],
                                  "kind": "VariableDefinition",
                                  "type": Object {
                                    "kind": "NamedType",
                                    "name": Object {
                                      "kind": "Name",
                                      "value": "JSON",
                                    },
                                  },
                                  "variable": Object {
                                    "kind": "Variable",
                                    "name": Object {
                                      "kind": "Name",
                                      "value": "data",
                                    },
                                  },
                                },
                              ],
                            },
                          ],
                          "kind": "Document",
                          "loc": Object {
                            "end": 142,
                            "start": 0,
                          },
                        },
                      },
                      "watches": Set {},
                    },
                    "client": [Circular],
                  },
                  "mutate": [Function],
                  "query": [Function],
                  "queryDeduplication": true,
                  "queryManager": QueryManager {
                    "clientAwareness": Object {},
                    "dataStore": DataStore {
                      "cache": InMemoryCache {
                        "addTypename": true,
                        "cacheKeyRoot": CacheKeyNode {
                          "children": null,
                          "key": null,
                        },
                        "config": Object {
                          "addTypename": true,
                          "dataIdFromObject": [Function],
                          "fragmentMatcher": HeuristicFragmentMatcher {},
                          "resultCaching": true,
                        },
                        "data": DepTrackingCache {
                          "data": Object {},
                          "depend": [Function],
                        },
                        "maybeBroadcastWatch": [Function],
                        "optimisticData": DepTrackingCache {
                          "data": Object {},
                          "depend": [Function],
                        },
                        "silenceBroadcast": false,
                        "storeReader": StoreReader {
                          "cacheKeyRoot": CacheKeyNode {
                            "children": null,
                            "key": null,
                          },
                          "executeSelectionSet": [Function],
                          "executeStoreQuery": [Function],
                        },
                        "storeWriter": StoreWriter {},
                        "typenameDocumentCache": Map {
                          Object {
                            "definitions": Array [
                              Object {
                                "directives": Array [],
                                "kind": "OperationDefinition",
                                "name": Object {
                                  "kind": "Name",
                                  "value": "SignupMutation",
                                },
                                "operation": "mutation",
                                "selectionSet": Object {
                                  "kind": "SelectionSet",
                                  "selections": Array [
                                    Object {
                                      "alias": undefined,
                                      "arguments": Array [
                                        Object {
                                          "kind": "Argument",
                                          "name": Object {
                                            "kind": "Name",
                                            "value": "input",
                                          },
                                          "value": Object {
                                            "fields": Array [
                                              Object {
                                                "kind": "ObjectField",
                                                "name": Object {
                                                  "kind": "Name",
                                                  "value": "data",
                                                },
                                                "value": Object {
                                                  "kind": "Variable",
                                                  "name": Object {
                                                    "kind": "Name",
                                                    "value": "data",
                                                  },
                                                },
                                              },
                                            ],
                                            "kind": "ObjectValue",
                                          },
                                        },
                                      ],
                                      "directives": Array [],
                                      "kind": "Field",
                                      "name": Object {
                                        "kind": "Name",
                                        "value": "signup",
                                      },
                                      "selectionSet": Object {
                                        "kind": "SelectionSet",
                                        "selections": Array [
                                          Object {
                                            "alias": undefined,
                                            "arguments": Array [],
                                            "directives": Array [],
                                            "kind": "Field",
                                            "name": Object {
                                              "kind": "Name",
                                              "value": "id",
                                            },
                                            "selectionSet": undefined,
                                          },
                                          Object {
                                            "alias": undefined,
                                            "arguments": Array [],
                                            "directives": Array [],
                                            "kind": "Field",
                                            "name": Object {
                                              "kind": "Name",
                                              "value": "firstName",
                                            },
                                            "selectionSet": undefined,
                                          },
                                          Object {
                                            "alias": undefined,
                                            "arguments": Array [],
                                            "directives": Array [],
                                            "kind": "Field",
                                            "name": Object {
                                              "kind": "Name",
                                              "value": "lastName",
                                            },
                                            "selectionSet": undefined,
                                          },
                                          Object {
                                            "alias": undefined,
                                            "arguments": Array [],
                                            "directives": Array [],
                                            "kind": "Field",
                                            "name": Object {
                                              "kind": "Name",
                                              "value": "email",
                                            },
                                            "selectionSet": undefined,
                                          },
                                          Object {
                                            "alias": undefined,
                                            "arguments": Array [],
                                            "directives": Array [],
                                            "kind": "Field",
                                            "name": Object {
                                              "kind": "Name",
                                              "value": "accessToken",
                                            },
                                            "selectionSet": undefined,
                                          },
                                        ],
                                      },
                                    },
                                  ],
                                },
                                "variableDefinitions": Array [
                                  Object {
                                    "defaultValue": undefined,
                                    "directives": Array [],
                                    "kind": "VariableDefinition",
                                    "type": Object {
                                      "kind": "NamedType",
                                      "name": Object {
                                        "kind": "Name",
                                        "value": "JSON",
                                      },
                                    },
                                    "variable": Object {
                                      "kind": "Variable",
                                      "name": Object {
                                        "kind": "Name",
                                        "value": "data",
                                      },
                                    },
                                  },
                                ],
                              },
                            ],
                            "kind": "Document",
                            "loc": Object {
                              "end": 142,
                              "start": 0,
                            },
                          } => Object {
                            "definitions": Array [
                              Object {
                                "directives": Array [],
                                "kind": "OperationDefinition",
                                "name": Object {
                                  "kind": "Name",
                                  "value": "SignupMutation",
                                },
                                "operation": "mutation",
                                "selectionSet": Object {
                                  "kind": "SelectionSet",
                                  "selections": Array [
                                    Object {
                                      "alias": undefined,
                                      "arguments": Array [
                                        Object {
                                          "kind": "Argument",
                                          "name": Object {
                                            "kind": "Name",
                                            "value": "input",
                                          },
                                          "value": Object {
                                            "fields": Array [
                                              Object {
                                                "kind": "ObjectField",
                                                "name": Object {
                                                  "kind": "Name",
                                                  "value": "data",
                                                },
                                                "value": Object {
                                                  "kind": "Variable",
                                                  "name": Object {
                                                    "kind": "Name",
                                                    "value": "data",
                                                  },
                                                },
                                              },
                                            ],
                                            "kind": "ObjectValue",
                                          },
                                        },
                                      ],
                                      "directives": Array [],
                                      "kind": "Field",
                                      "name": Object {
                                        "kind": "Name",
                                        "value": "signup",
                                      },
                                      "selectionSet": Object {
                                        "kind": "SelectionSet",
                                        "selections": Array [
                                          Object {
                                            "alias": undefined,
                                            "arguments": Array [],
                                            "directives": Array [],
                                            "kind": "Field",
                                            "name": Object {
                                              "kind": "Name",
                                              "value": "id",
                                            },
                                            "selectionSet": undefined,
                                          },
                                          Object {
                                            "alias": undefined,
                                            "arguments": Array [],
                                            "directives": Array [],
                                            "kind": "Field",
                                            "name": Object {
                                              "kind": "Name",
                                              "value": "firstName",
                                            },
                                            "selectionSet": undefined,
                                          },
                                          Object {
                                            "alias": undefined,
                                            "arguments": Array [],
                                            "directives": Array [],
                                            "kind": "Field",
                                            "name": Object {
                                              "kind": "Name",
                                              "value": "lastName",
                                            },
                                            "selectionSet": undefined,
                                          },
                                          Object {
                                            "alias": undefined,
                                            "arguments": Array [],
                                            "directives": Array [],
                                            "kind": "Field",
                                            "name": Object {
                                              "kind": "Name",
                                              "value": "email",
                                            },
                                            "selectionSet": undefined,
                                          },
                                          Object {
                                            "alias": undefined,
                                            "arguments": Array [],
                                            "directives": Array [],
                                            "kind": "Field",
                                            "name": Object {
                                              "kind": "Name",
                                              "value": "accessToken",
                                            },
                                            "selectionSet": undefined,
                                          },
                                          Object {
                                            "kind": "Field",
                                            "name": Object {
                                              "kind": "Name",
                                              "value": "__typename",
                                            },
                                          },
                                        ],
                                      },
                                    },
                                  ],
                                },
                                "variableDefinitions": Array [
                                  Object {
                                    "defaultValue": undefined,
                                    "directives": Array [],
                                    "kind": "VariableDefinition",
                                    "type": Object {
                                      "kind": "NamedType",
                                      "name": Object {
                                        "kind": "Name",
                                        "value": "JSON",
                                      },
                                    },
                                    "variable": Object {
                                      "kind": "Variable",
                                      "name": Object {
                                        "kind": "Name",
                                        "value": "data",
                                      },
                                    },
                                  },
                                ],
                              },
                            ],
                            "kind": "Document",
                            "loc": Object {
                              "end": 142,
                              "start": 0,
                            },
                          },
                          Object {
                            "definitions": Array [
                              Object {
                                "directives": Array [],
                                "kind": "OperationDefinition",
                                "name": Object {
                                  "kind": "Name",
                                  "value": "SignupMutation",
                                },
                                "operation": "mutation",
                                "selectionSet": Object {
                                  "kind": "SelectionSet",
                                  "selections": Array [
                                    Object {
                                      "alias": undefined,
                                      "arguments": Array [
                                        Object {
                                          "kind": "Argument",
                                          "name": Object {
                                            "kind": "Name",
                                            "value": "input",
                                          },
                                          "value": Object {
                                            "fields": Array [
                                              Object {
                                                "kind": "ObjectField",
                                                "name": Object {
                                                  "kind": "Name",
                                                  "value": "data",
                                                },
                                                "value": Object {
                                                  "kind": "Variable",
                                                  "name": Object {
                                                    "kind": "Name",
                                                    "value": "data",
                                                  },
                                                },
                                              },
                                            ],
                                            "kind": "ObjectValue",
                                          },
                                        },
                                      ],
                                      "directives": Array [],
                                      "kind": "Field",
                                      "name": Object {
                                        "kind": "Name",
                                        "value": "signup",
                                      },
                                      "selectionSet": Object {
                                        "kind": "SelectionSet",
                                        "selections": Array [
                                          Object {
                                            "alias": undefined,
                                            "arguments": Array [],
                                            "directives": Array [],
                                            "kind": "Field",
                                            "name": Object {
                                              "kind": "Name",
                                              "value": "id",
                                            },
                                            "selectionSet": undefined,
                                          },
                                          Object {
                                            "alias": undefined,
                                            "arguments": Array [],
                                            "directives": Array [],
                                            "kind": "Field",
                                            "name": Object {
                                              "kind": "Name",
                                              "value": "firstName",
                                            },
                                            "selectionSet": undefined,
                                          },
                                          Object {
                                            "alias": undefined,
                                            "arguments": Array [],
                                            "directives": Array [],
                                            "kind": "Field",
                                            "name": Object {
                                              "kind": "Name",
                                              "value": "lastName",
                                            },
                                            "selectionSet": undefined,
                                          },
                                          Object {
                                            "alias": undefined,
                                            "arguments": Array [],
                                            "directives": Array [],
                                            "kind": "Field",
                                            "name": Object {
                                              "kind": "Name",
                                              "value": "email",
                                            },
                                            "selectionSet": undefined,
                                          },
                                          Object {
                                            "alias": undefined,
                                            "arguments": Array [],
                                            "directives": Array [],
                                            "kind": "Field",
                                            "name": Object {
                                              "kind": "Name",
                                              "value": "accessToken",
                                            },
                                            "selectionSet": undefined,
                                          },
                                          Object {
                                            "kind": "Field",
                                            "name": Object {
                                              "kind": "Name",
                                              "value": "__typename",
                                            },
                                          },
                                        ],
                                      },
                                    },
                                  ],
                                },
                                "variableDefinitions": Array [
                                  Object {
                                    "defaultValue": undefined,
                                    "directives": Array [],
                                    "kind": "VariableDefinition",
                                    "type": Object {
                                      "kind": "NamedType",
                                      "name": Object {
                                        "kind": "Name",
                                        "value": "JSON",
                                      },
                                    },
                                    "variable": Object {
                                      "kind": "Variable",
                                      "name": Object {
                                        "kind": "Name",
                                        "value": "data",
                                      },
                                    },
                                  },
                                ],
                              },
                            ],
                            "kind": "Document",
                            "loc": Object {
                              "end": 142,
                              "start": 0,
                            },
                          } => Object {
                            "definitions": Array [
                              Object {
                                "directives": Array [],
                                "kind": "OperationDefinition",
                                "name": Object {
                                  "kind": "Name",
                                  "value": "SignupMutation",
                                },
                                "operation": "mutation",
                                "selectionSet": Object {
                                  "kind": "SelectionSet",
                                  "selections": Array [
                                    Object {
                                      "alias": undefined,
                                      "arguments": Array [
                                        Object {
                                          "kind": "Argument",
                                          "name": Object {
                                            "kind": "Name",
                                            "value": "input",
                                          },
                                          "value": Object {
                                            "fields": Array [
                                              Object {
                                                "kind": "ObjectField",
                                                "name": Object {
                                                  "kind": "Name",
                                                  "value": "data",
                                                },
                                                "value": Object {
                                                  "kind": "Variable",
                                                  "name": Object {
                                                    "kind": "Name",
                                                    "value": "data",
                                                  },
                                                },
                                              },
                                            ],
                                            "kind": "ObjectValue",
                                          },
                                        },
                                      ],
                                      "directives": Array [],
                                      "kind": "Field",
                                      "name": Object {
                                        "kind": "Name",
                                        "value": "signup",
                                      },
                                      "selectionSet": Object {
                                        "kind": "SelectionSet",
                                        "selections": Array [
                                          Object {
                                            "alias": undefined,
                                            "arguments": Array [],
                                            "directives": Array [],
                                            "kind": "Field",
                                            "name": Object {
                                              "kind": "Name",
                                              "value": "id",
                                            },
                                            "selectionSet": undefined,
                                          },
                                          Object {
                                            "alias": undefined,
                                            "arguments": Array [],
                                            "directives": Array [],
                                            "kind": "Field",
                                            "name": Object {
                                              "kind": "Name",
                                              "value": "firstName",
                                            },
                                            "selectionSet": undefined,
                                          },
                                          Object {
                                            "alias": undefined,
                                            "arguments": Array [],
                                            "directives": Array [],
                                            "kind": "Field",
                                            "name": Object {
                                              "kind": "Name",
                                              "value": "lastName",
                                            },
                                            "selectionSet": undefined,
                                          },
                                          Object {
                                            "alias": undefined,
                                            "arguments": Array [],
                                            "directives": Array [],
                                            "kind": "Field",
                                            "name": Object {
                                              "kind": "Name",
                                              "value": "email",
                                            },
                                            "selectionSet": undefined,
                                          },
                                          Object {
                                            "alias": undefined,
                                            "arguments": Array [],
                                            "directives": Array [],
                                            "kind": "Field",
                                            "name": Object {
                                              "kind": "Name",
                                              "value": "accessToken",
                                            },
                                            "selectionSet": undefined,
                                          },
                                          Object {
                                            "kind": "Field",
                                            "name": Object {
                                              "kind": "Name",
                                              "value": "__typename",
                                            },
                                          },
                                        ],
                                      },
                                    },
                                  ],
                                },
                                "variableDefinitions": Array [
                                  Object {
                                    "defaultValue": undefined,
                                    "directives": Array [],
                                    "kind": "VariableDefinition",
                                    "type": Object {
                                      "kind": "NamedType",
                                      "name": Object {
                                        "kind": "Name",
                                        "value": "JSON",
                                      },
                                    },
                                    "variable": Object {
                                      "kind": "Variable",
                                      "name": Object {
                                        "kind": "Name",
                                        "value": "data",
                                      },
                                    },
                                  },
                                ],
                              },
                            ],
                            "kind": "Document",
                            "loc": Object {
                              "end": 142,
                              "start": 0,
                            },
                          },
                        },
                        "watches": Set {},
                      },
                    },
                    "deduplicator": ApolloLink {
                      "request": [Function],
                    },
                    "fetchQueryRejectFns": Map {},
                    "idCounter": 2,
                    "link": ApolloLink {
                      "request": [Function],
                    },
                    "localState": LocalState {
                      "cache": InMemoryCache {
                        "addTypename": true,
                        "cacheKeyRoot": CacheKeyNode {
                          "children": null,
                          "key": null,
                        },
                        "config": Object {
                          "addTypename": true,
                          "dataIdFromObject": [Function],
                          "fragmentMatcher": HeuristicFragmentMatcher {},
                          "resultCaching": true,
                        },
                        "data": DepTrackingCache {
                          "data": Object {},
                          "depend": [Function],
                        },
                        "maybeBroadcastWatch": [Function],
                        "optimisticData": DepTrackingCache {
                          "data": Object {},
                          "depend": [Function],
                        },
                        "silenceBroadcast": false,
                        "storeReader": StoreReader {
                          "cacheKeyRoot": CacheKeyNode {
                            "children": null,
                            "key": null,
                          },
                          "executeSelectionSet": [Function],
                          "executeStoreQuery": [Function],
                        },
                        "storeWriter": StoreWriter {},
                        "typenameDocumentCache": Map {
                          Object {
                            "definitions": Array [
                              Object {
                                "directives": Array [],
                                "kind": "OperationDefinition",
                                "name": Object {
                                  "kind": "Name",
                                  "value": "SignupMutation",
                                },
                                "operation": "mutation",
                                "selectionSet": Object {
                                  "kind": "SelectionSet",
                                  "selections": Array [
                                    Object {
                                      "alias": undefined,
                                      "arguments": Array [
                                        Object {
                                          "kind": "Argument",
                                          "name": Object {
                                            "kind": "Name",
                                            "value": "input",
                                          },
                                          "value": Object {
                                            "fields": Array [
                                              Object {
                                                "kind": "ObjectField",
                                                "name": Object {
                                                  "kind": "Name",
                                                  "value": "data",
                                                },
                                                "value": Object {
                                                  "kind": "Variable",
                                                  "name": Object {
                                                    "kind": "Name",
                                                    "value": "data",
                                                  },
                                                },
                                              },
                                            ],
                                            "kind": "ObjectValue",
                                          },
                                        },
                                      ],
                                      "directives": Array [],
                                      "kind": "Field",
                                      "name": Object {
                                        "kind": "Name",
                                        "value": "signup",
                                      },
                                      "selectionSet": Object {
                                        "kind": "SelectionSet",
                                        "selections": Array [
                                          Object {
                                            "alias": undefined,
                                            "arguments": Array [],
                                            "directives": Array [],
                                            "kind": "Field",
                                            "name": Object {
                                              "kind": "Name",
                                              "value": "id",
                                            },
                                            "selectionSet": undefined,
                                          },
                                          Object {
                                            "alias": undefined,
                                            "arguments": Array [],
                                            "directives": Array [],
                                            "kind": "Field",
                                            "name": Object {
                                              "kind": "Name",
                                              "value": "firstName",
                                            },
                                            "selectionSet": undefined,
                                          },
                                          Object {
                                            "alias": undefined,
                                            "arguments": Array [],
                                            "directives": Array [],
                                            "kind": "Field",
                                            "name": Object {
                                              "kind": "Name",
                                              "value": "lastName",
                                            },
                                            "selectionSet": undefined,
                                          },
                                          Object {
                                            "alias": undefined,
                                            "arguments": Array [],
                                            "directives": Array [],
                                            "kind": "Field",
                                            "name": Object {
                                              "kind": "Name",
                                              "value": "email",
                                            },
                                            "selectionSet": undefined,
                                          },
                                          Object {
                                            "alias": undefined,
                                            "arguments": Array [],
                                            "directives": Array [],
                                            "kind": "Field",
                                            "name": Object {
                                              "kind": "Name",
                                              "value": "accessToken",
                                            },
                                            "selectionSet": undefined,
                                          },
                                        ],
                                      },
                                    },
                                  ],
                                },
                                "variableDefinitions": Array [
                                  Object {
                                    "defaultValue": undefined,
                                    "directives": Array [],
                                    "kind": "VariableDefinition",
                                    "type": Object {
                                      "kind": "NamedType",
                                      "name": Object {
                                        "kind": "Name",
                                        "value": "JSON",
                                      },
                                    },
                                    "variable": Object {
                                      "kind": "Variable",
                                      "name": Object {
                                        "kind": "Name",
                                        "value": "data",
                                      },
                                    },
                                  },
                                ],
                              },
                            ],
                            "kind": "Document",
                            "loc": Object {
                              "end": 142,
                              "start": 0,
                            },
                          } => Object {
                            "definitions": Array [
                              Object {
                                "directives": Array [],
                                "kind": "OperationDefinition",
                                "name": Object {
                                  "kind": "Name",
                                  "value": "SignupMutation",
                                },
                                "operation": "mutation",
                                "selectionSet": Object {
                                  "kind": "SelectionSet",
                                  "selections": Array [
                                    Object {
                                      "alias": undefined,
                                      "arguments": Array [
                                        Object {
                                          "kind": "Argument",
                                          "name": Object {
                                            "kind": "Name",
                                            "value": "input",
                                          },
                                          "value": Object {
                                            "fields": Array [
                                              Object {
                                                "kind": "ObjectField",
                                                "name": Object {
                                                  "kind": "Name",
                                                  "value": "data",
                                                },
                                                "value": Object {
                                                  "kind": "Variable",
                                                  "name": Object {
                                                    "kind": "Name",
                                                    "value": "data",
                                                  },
                                                },
                                              },
                                            ],
                                            "kind": "ObjectValue",
                                          },
                                        },
                                      ],
                                      "directives": Array [],
                                      "kind": "Field",
                                      "name": Object {
                                        "kind": "Name",
                                        "value": "signup",
                                      },
                                      "selectionSet": Object {
                                        "kind": "SelectionSet",
                                        "selections": Array [
                                          Object {
                                            "alias": undefined,
                                            "arguments": Array [],
                                            "directives": Array [],
                                            "kind": "Field",
                                            "name": Object {
                                              "kind": "Name",
                                              "value": "id",
                                            },
                                            "selectionSet": undefined,
                                          },
                                          Object {
                                            "alias": undefined,
                                            "arguments": Array [],
                                            "directives": Array [],
                                            "kind": "Field",
                                            "name": Object {
                                              "kind": "Name",
                                              "value": "firstName",
                                            },
                                            "selectionSet": undefined,
                                          },
                                          Object {
                                            "alias": undefined,
                                            "arguments": Array [],
                                            "directives": Array [],
                                            "kind": "Field",
                                            "name": Object {
                                              "kind": "Name",
                                              "value": "lastName",
                                            },
                                            "selectionSet": undefined,
                                          },
                                          Object {
                                            "alias": undefined,
                                            "arguments": Array [],
                                            "directives": Array [],
                                            "kind": "Field",
                                            "name": Object {
                                              "kind": "Name",
                                              "value": "email",
                                            },
                                            "selectionSet": undefined,
                                          },
                                          Object {
                                            "alias": undefined,
                                            "arguments": Array [],
                                            "directives": Array [],
                                            "kind": "Field",
                                            "name": Object {
                                              "kind": "Name",
                                              "value": "accessToken",
                                            },
                                            "selectionSet": undefined,
                                          },
                                          Object {
                                            "kind": "Field",
                                            "name": Object {
                                              "kind": "Name",
                                              "value": "__typename",
                                            },
                                          },
                                        ],
                                      },
                                    },
                                  ],
                                },
                                "variableDefinitions": Array [
                                  Object {
                                    "defaultValue": undefined,
                                    "directives": Array [],
                                    "kind": "VariableDefinition",
                                    "type": Object {
                                      "kind": "NamedType",
                                      "name": Object {
                                        "kind": "Name",
                                        "value": "JSON",
                                      },
                                    },
                                    "variable": Object {
                                      "kind": "Variable",
                                      "name": Object {
                                        "kind": "Name",
                                        "value": "data",
                                      },
                                    },
                                  },
                                ],
                              },
                            ],
                            "kind": "Document",
                            "loc": Object {
                              "end": 142,
                              "start": 0,
                            },
                          },
                          Object {
                            "definitions": Array [
                              Object {
                                "directives": Array [],
                                "kind": "OperationDefinition",
                                "name": Object {
                                  "kind": "Name",
                                  "value": "SignupMutation",
                                },
                                "operation": "mutation",
                                "selectionSet": Object {
                                  "kind": "SelectionSet",
                                  "selections": Array [
                                    Object {
                                      "alias": undefined,
                                      "arguments": Array [
                                        Object {
                                          "kind": "Argument",
                                          "name": Object {
                                            "kind": "Name",
                                            "value": "input",
                                          },
                                          "value": Object {
                                            "fields": Array [
                                              Object {
                                                "kind": "ObjectField",
                                                "name": Object {
                                                  "kind": "Name",
                                                  "value": "data",
                                                },
                                                "value": Object {
                                                  "kind": "Variable",
                                                  "name": Object {
                                                    "kind": "Name",
                                                    "value": "data",
                                                  },
                                                },
                                              },
                                            ],
                                            "kind": "ObjectValue",
                                          },
                                        },
                                      ],
                                      "directives": Array [],
                                      "kind": "Field",
                                      "name": Object {
                                        "kind": "Name",
                                        "value": "signup",
                                      },
                                      "selectionSet": Object {
                                        "kind": "SelectionSet",
                                        "selections": Array [
                                          Object {
                                            "alias": undefined,
                                            "arguments": Array [],
                                            "directives": Array [],
                                            "kind": "Field",
                                            "name": Object {
                                              "kind": "Name",
                                              "value": "id",
                                            },
                                            "selectionSet": undefined,
                                          },
                                          Object {
                                            "alias": undefined,
                                            "arguments": Array [],
                                            "directives": Array [],
                                            "kind": "Field",
                                            "name": Object {
                                              "kind": "Name",
                                              "value": "firstName",
                                            },
                                            "selectionSet": undefined,
                                          },
                                          Object {
                                            "alias": undefined,
                                            "arguments": Array [],
                                            "directives": Array [],
                                            "kind": "Field",
                                            "name": Object {
                                              "kind": "Name",
                                              "value": "lastName",
                                            },
                                            "selectionSet": undefined,
                                          },
                                          Object {
                                            "alias": undefined,
                                            "arguments": Array [],
                                            "directives": Array [],
                                            "kind": "Field",
                                            "name": Object {
                                              "kind": "Name",
                                              "value": "email",
                                            },
                                            "selectionSet": undefined,
                                          },
                                          Object {
                                            "alias": undefined,
                                            "arguments": Array [],
                                            "directives": Array [],
                                            "kind": "Field",
                                            "name": Object {
                                              "kind": "Name",
                                              "value": "accessToken",
                                            },
                                            "selectionSet": undefined,
                                          },
                                          Object {
                                            "kind": "Field",
                                            "name": Object {
                                              "kind": "Name",
                                              "value": "__typename",
                                            },
                                          },
                                        ],
                                      },
                                    },
                                  ],
                                },
                                "variableDefinitions": Array [
                                  Object {
                                    "defaultValue": undefined,
                                    "directives": Array [],
                                    "kind": "VariableDefinition",
                                    "type": Object {
                                      "kind": "NamedType",
                                      "name": Object {
                                        "kind": "Name",
                                        "value": "JSON",
                                      },
                                    },
                                    "variable": Object {
                                      "kind": "Variable",
                                      "name": Object {
                                        "kind": "Name",
                                        "value": "data",
                                      },
                                    },
                                  },
                                ],
                              },
                            ],
                            "kind": "Document",
                            "loc": Object {
                              "end": 142,
                              "start": 0,
                            },
                          } => Object {
                            "definitions": Array [
                              Object {
                                "directives": Array [],
                                "kind": "OperationDefinition",
                                "name": Object {
                                  "kind": "Name",
                                  "value": "SignupMutation",
                                },
                                "operation": "mutation",
                                "selectionSet": Object {
                                  "kind": "SelectionSet",
                                  "selections": Array [
                                    Object {
                                      "alias": undefined,
                                      "arguments": Array [
                                        Object {
                                          "kind": "Argument",
                                          "name": Object {
                                            "kind": "Name",
                                            "value": "input",
                                          },
                                          "value": Object {
                                            "fields": Array [
                                              Object {
                                                "kind": "ObjectField",
                                                "name": Object {
                                                  "kind": "Name",
                                                  "value": "data",
                                                },
                                                "value": Object {
                                                  "kind": "Variable",
                                                  "name": Object {
                                                    "kind": "Name",
                                                    "value": "data",
                                                  },
                                                },
                                              },
                                            ],
                                            "kind": "ObjectValue",
                                          },
                                        },
                                      ],
                                      "directives": Array [],
                                      "kind": "Field",
                                      "name": Object {
                                        "kind": "Name",
                                        "value": "signup",
                                      },
                                      "selectionSet": Object {
                                        "kind": "SelectionSet",
                                        "selections": Array [
                                          Object {
                                            "alias": undefined,
                                            "arguments": Array [],
                                            "directives": Array [],
                                            "kind": "Field",
                                            "name": Object {
                                              "kind": "Name",
                                              "value": "id",
                                            },
                                            "selectionSet": undefined,
                                          },
                                          Object {
                                            "alias": undefined,
                                            "arguments": Array [],
                                            "directives": Array [],
                                            "kind": "Field",
                                            "name": Object {
                                              "kind": "Name",
                                              "value": "firstName",
                                            },
                                            "selectionSet": undefined,
                                          },
                                          Object {
                                            "alias": undefined,
                                            "arguments": Array [],
                                            "directives": Array [],
                                            "kind": "Field",
                                            "name": Object {
                                              "kind": "Name",
                                              "value": "lastName",
                                            },
                                            "selectionSet": undefined,
                                          },
                                          Object {
                                            "alias": undefined,
                                            "arguments": Array [],
                                            "directives": Array [],
                                            "kind": "Field",
                                            "name": Object {
                                              "kind": "Name",
                                              "value": "email",
                                            },
                                            "selectionSet": undefined,
                                          },
                                          Object {
                                            "alias": undefined,
                                            "arguments": Array [],
                                            "directives": Array [],
                                            "kind": "Field",
                                            "name": Object {
                                              "kind": "Name",
                                              "value": "accessToken",
                                            },
                                            "selectionSet": undefined,
                                          },
                                          Object {
                                            "kind": "Field",
                                            "name": Object {
                                              "kind": "Name",
                                              "value": "__typename",
                                            },
                                          },
                                        ],
                                      },
                                    },
                                  ],
                                },
                                "variableDefinitions": Array [
                                  Object {
                                    "defaultValue": undefined,
                                    "directives": Array [],
                                    "kind": "VariableDefinition",
                                    "type": Object {
                                      "kind": "NamedType",
                                      "name": Object {
                                        "kind": "Name",
                                        "value": "JSON",
                                      },
                                    },
                                    "variable": Object {
                                      "kind": "Variable",
                                      "name": Object {
                                        "kind": "Name",
                                        "value": "data",
                                      },
                                    },
                                  },
                                ],
                              },
                            ],
                            "kind": "Document",
                            "loc": Object {
                              "end": 142,
                              "start": 0,
                            },
                          },
                        },
                        "watches": Set {},
                      },
                      "client": [Circular],
                    },
                    "mutationStore": MutationStore {
                      "store": Object {
                        "1": Object {
                          "error": [FetchError: request to http://graphql/ failed, reason: getaddrinfo ENOTFOUND graphql graphql:80],
                          "loading": false,
                          "mutation": Object {
                            "definitions": Array [
                              Object {
                                "directives": Array [],
                                "kind": "OperationDefinition",
                                "name": Object {
                                  "kind": "Name",
                                  "value": "SignupMutation",
                                },
                                "operation": "mutation",
                                "selectionSet": Object {
                                  "kind": "SelectionSet",
                                  "selections": Array [
                                    Object {
                                      "alias": undefined,
                                      "arguments": Array [
                                        Object {
                                          "kind": "Argument",
                                          "name": Object {
                                            "kind": "Name",
                                            "value": "input",
                                          },
                                          "value": Object {
                                            "fields": Array [
                                              Object {
                                                "kind": "ObjectField",
                                                "name": Object {
                                                  "kind": "Name",
                                                  "value": "data",
                                                },
                                                "value": Object {
                                                  "kind": "Variable",
                                                  "name": Object {
                                                    "kind": "Name",
                                                    "value": "data",
                                                  },
                                                },
                                              },
                                            ],
                                            "kind": "ObjectValue",
                                          },
                                        },
                                      ],
                                      "directives": Array [],
                                      "kind": "Field",
                                      "name": Object {
                                        "kind": "Name",
                                        "value": "signup",
                                      },
                                      "selectionSet": Object {
                                        "kind": "SelectionSet",
                                        "selections": Array [
                                          Object {
                                            "alias": undefined,
                                            "arguments": Array [],
                                            "directives": Array [],
                                            "kind": "Field",
                                            "name": Object {
                                              "kind": "Name",
                                              "value": "id",
                                            },
                                            "selectionSet": undefined,
                                          },
                                          Object {
                                            "alias": undefined,
                                            "arguments": Array [],
                                            "directives": Array [],
                                            "kind": "Field",
                                            "name": Object {
                                              "kind": "Name",
                                              "value": "firstName",
                                            },
                                            "selectionSet": undefined,
                                          },
                                          Object {
                                            "alias": undefined,
                                            "arguments": Array [],
                                            "directives": Array [],
                                            "kind": "Field",
                                            "name": Object {
                                              "kind": "Name",
                                              "value": "lastName",
                                            },
                                            "selectionSet": undefined,
                                          },
                                          Object {
                                            "alias": undefined,
                                            "arguments": Array [],
                                            "directives": Array [],
                                            "kind": "Field",
                                            "name": Object {
                                              "kind": "Name",
                                              "value": "email",
                                            },
                                            "selectionSet": undefined,
                                          },
                                          Object {
                                            "alias": undefined,
                                            "arguments": Array [],
                                            "directives": Array [],
                                            "kind": "Field",
                                            "name": Object {
                                              "kind": "Name",
                                              "value": "accessToken",
                                            },
                                            "selectionSet": undefined,
                                          },
                                          Object {
                                            "kind": "Field",
                                            "name": Object {
                                              "kind": "Name",
                                              "value": "__typename",
                                            },
                                          },
                                        ],
                                      },
                                    },
                                  ],
                                },
                                "variableDefinitions": Array [
                                  Object {
                                    "defaultValue": undefined,
                                    "directives": Array [],
                                    "kind": "VariableDefinition",
                                    "type": Object {
                                      "kind": "NamedType",
                                      "name": Object {
                                        "kind": "Name",
                                        "value": "JSON",
                                      },
                                    },
                                    "variable": Object {
                                      "kind": "Variable",
                                      "name": Object {
                                        "kind": "Name",
                                        "value": "data",
                                      },
                                    },
                                  },
                                ],
                              },
                            ],
                            "kind": "Document",
                            "loc": Object {
                              "end": 142,
                              "start": 0,
                            },
                          },
                          "variables": Object {
                            "email": "asd@as.cd",
                            "firstName": "im only",
                            "lastName": "testing",
                            "password": "abc",
                          },
                        },
                      },
                    },
                    "nextPoll": null,
                    "onBroadcast": [Function],
                    "pollingInfoByQueryId": Map {},
                    "queries": Map {
                      "1" => Object {
                        "document": null,
                        "invalidated": false,
                        "lastRequestId": null,
                        "listeners": Array [],
                        "newData": null,
                        "observableQuery": null,
                        "subscriptions": Array [],
                      },
                    },
                    "queryDeduplication": true,
                    "queryIdsByName": Object {},
                    "queryStore": QueryStore {
                      "store": Object {},
                    },
                    "ssrMode": false,
                  },
                  "reFetchObservableQueries": [Function],
                  "resetStore": [Function],
                  "resetStoreCallbacks": Array [],
                  "ssrMode": false,
                  "store": DataStore {
                    "cache": InMemoryCache {
                      "addTypename": true,
                      "cacheKeyRoot": CacheKeyNode {
                        "children": null,
                        "key": null,
                      },
                      "config": Object {
                        "addTypename": true,
                        "dataIdFromObject": [Function],
                        "fragmentMatcher": HeuristicFragmentMatcher {},
                        "resultCaching": true,
                      },
                      "data": DepTrackingCache {
                        "data": Object {},
                        "depend": [Function],
                      },
                      "maybeBroadcastWatch": [Function],
                      "optimisticData": DepTrackingCache {
                        "data": Object {},
                        "depend": [Function],
                      },
                      "silenceBroadcast": false,
                      "storeReader": StoreReader {
                        "cacheKeyRoot": CacheKeyNode {
                          "children": null,
                          "key": null,
                        },
                        "executeSelectionSet": [Function],
                        "executeStoreQuery": [Function],
                      },
                      "storeWriter": StoreWriter {},
                      "typenameDocumentCache": Map {
                        Object {
                          "definitions": Array [
                            Object {
                              "directives": Array [],
                              "kind": "OperationDefinition",
                              "name": Object {
                                "kind": "Name",
                                "value": "SignupMutation",
                              },
                              "operation": "mutation",
                              "selectionSet": Object {
                                "kind": "SelectionSet",
                                "selections": Array [
                                  Object {
                                    "alias": undefined,
                                    "arguments": Array [
                                      Object {
                                        "kind": "Argument",
                                        "name": Object {
                                          "kind": "Name",
                                          "value": "input",
                                        },
                                        "value": Object {
                                          "fields": Array [
                                            Object {
                                              "kind": "ObjectField",
                                              "name": Object {
                                                "kind": "Name",
                                                "value": "data",
                                              },
                                              "value": Object {
                                                "kind": "Variable",
                                                "name": Object {
                                                  "kind": "Name",
                                                  "value": "data",
                                                },
                                              },
                                            },
                                          ],
                                          "kind": "ObjectValue",
                                        },
                                      },
                                    ],
                                    "directives": Array [],
                                    "kind": "Field",
                                    "name": Object {
                                      "kind": "Name",
                                      "value": "signup",
                                    },
                                    "selectionSet": Object {
                                      "kind": "SelectionSet",
                                      "selections": Array [
                                        Object {
                                          "alias": undefined,
                                          "arguments": Array [],
                                          "directives": Array [],
                                          "kind": "Field",
                                          "name": Object {
                                            "kind": "Name",
                                            "value": "id",
                                          },
                                          "selectionSet": undefined,
                                        },
                                        Object {
                                          "alias": undefined,
                                          "arguments": Array [],
                                          "directives": Array [],
                                          "kind": "Field",
                                          "name": Object {
                                            "kind": "Name",
                                            "value": "firstName",
                                          },
                                          "selectionSet": undefined,
                                        },
                                        Object {
                                          "alias": undefined,
                                          "arguments": Array [],
                                          "directives": Array [],
                                          "kind": "Field",
                                          "name": Object {
                                            "kind": "Name",
                                            "value": "lastName",
                                          },
                                          "selectionSet": undefined,
                                        },
                                        Object {
                                          "alias": undefined,
                                          "arguments": Array [],
                                          "directives": Array [],
                                          "kind": "Field",
                                          "name": Object {
                                            "kind": "Name",
                                            "value": "email",
                                          },
                                          "selectionSet": undefined,
                                        },
                                        Object {
                                          "alias": undefined,
                                          "arguments": Array [],
                                          "directives": Array [],
                                          "kind": "Field",
                                          "name": Object {
                                            "kind": "Name",
                                            "value": "accessToken",
                                          },
                                          "selectionSet": undefined,
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                              "variableDefinitions": Array [
                                Object {
                                  "defaultValue": undefined,
                                  "directives": Array [],
                                  "kind": "VariableDefinition",
                                  "type": Object {
                                    "kind": "NamedType",
                                    "name": Object {
                                      "kind": "Name",
                                      "value": "JSON",
                                    },
                                  },
                                  "variable": Object {
                                    "kind": "Variable",
                                    "name": Object {
                                      "kind": "Name",
                                      "value": "data",
                                    },
                                  },
                                },
                              ],
                            },
                          ],
                          "kind": "Document",
                          "loc": Object {
                            "end": 142,
                            "start": 0,
                          },
                        } => Object {
                          "definitions": Array [
                            Object {
                              "directives": Array [],
                              "kind": "OperationDefinition",
                              "name": Object {
                                "kind": "Name",
                                "value": "SignupMutation",
                              },
                              "operation": "mutation",
                              "selectionSet": Object {
                                "kind": "SelectionSet",
                                "selections": Array [
                                  Object {
                                    "alias": undefined,
                                    "arguments": Array [
                                      Object {
                                        "kind": "Argument",
                                        "name": Object {
                                          "kind": "Name",
                                          "value": "input",
                                        },
                                        "value": Object {
                                          "fields": Array [
                                            Object {
                                              "kind": "ObjectField",
                                              "name": Object {
                                                "kind": "Name",
                                                "value": "data",
                                              },
                                              "value": Object {
                                                "kind": "Variable",
                                                "name": Object {
                                                  "kind": "Name",
                                                  "value": "data",
                                                },
                                              },
                                            },
                                          ],
                                          "kind": "ObjectValue",
                                        },
                                      },
                                    ],
                                    "directives": Array [],
                                    "kind": "Field",
                                    "name": Object {
                                      "kind": "Name",
                                      "value": "signup",
                                    },
                                    "selectionSet": Object {
                                      "kind": "SelectionSet",
                                      "selections": Array [
                                        Object {
                                          "alias": undefined,
                                          "arguments": Array [],
                                          "directives": Array [],
                                          "kind": "Field",
                                          "name": Object {
                                            "kind": "Name",
                                            "value": "id",
                                          },
                                          "selectionSet": undefined,
                                        },
                                        Object {
                                          "alias": undefined,
                                          "arguments": Array [],
                                          "directives": Array [],
                                          "kind": "Field",
                                          "name": Object {
                                            "kind": "Name",
                                            "value": "firstName",
                                          },
                                          "selectionSet": undefined,
                                        },
                                        Object {
                                          "alias": undefined,
                                          "arguments": Array [],
                                          "directives": Array [],
                                          "kind": "Field",
                                          "name": Object {
                                            "kind": "Name",
                                            "value": "lastName",
                                          },
                                          "selectionSet": undefined,
                                        },
                                        Object {
                                          "alias": undefined,
                                          "arguments": Array [],
                                          "directives": Array [],
                                          "kind": "Field",
                                          "name": Object {
                                            "kind": "Name",
                                            "value": "email",
                                          },
                                          "selectionSet": undefined,
                                        },
                                        Object {
                                          "alias": undefined,
                                          "arguments": Array [],
                                          "directives": Array [],
                                          "kind": "Field",
                                          "name": Object {
                                            "kind": "Name",
                                            "value": "accessToken",
                                          },
                                          "selectionSet": undefined,
                                        },
                                        Object {
                                          "kind": "Field",
                                          "name": Object {
                                            "kind": "Name",
                                            "value": "__typename",
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                              "variableDefinitions": Array [
                                Object {
                                  "defaultValue": undefined,
                                  "directives": Array [],
                                  "kind": "VariableDefinition",
                                  "type": Object {
                                    "kind": "NamedType",
                                    "name": Object {
                                      "kind": "Name",
                                      "value": "JSON",
                                    },
                                  },
                                  "variable": Object {
                                    "kind": "Variable",
                                    "name": Object {
                                      "kind": "Name",
                                      "value": "data",
                                    },
                                  },
                                },
                              ],
                            },
                          ],
                          "kind": "Document",
                          "loc": Object {
                            "end": 142,
                            "start": 0,
                          },
                        },
                        Object {
                          "definitions": Array [
                            Object {
                              "directives": Array [],
                              "kind": "OperationDefinition",
                              "name": Object {
                                "kind": "Name",
                                "value": "SignupMutation",
                              },
                              "operation": "mutation",
                              "selectionSet": Object {
                                "kind": "SelectionSet",
                                "selections": Array [
                                  Object {
                                    "alias": undefined,
                                    "arguments": Array [
                                      Object {
                                        "kind": "Argument",
                                        "name": Object {
                                          "kind": "Name",
                                          "value": "input",
                                        },
                                        "value": Object {
                                          "fields": Array [
                                            Object {
                                              "kind": "ObjectField",
                                              "name": Object {
                                                "kind": "Name",
                                                "value": "data",
                                              },
                                              "value": Object {
                                                "kind": "Variable",
                                                "name": Object {
                                                  "kind": "Name",
                                                  "value": "data",
                                                },
                                              },
                                            },
                                          ],
                                          "kind": "ObjectValue",
                                        },
                                      },
                                    ],
                                    "directives": Array [],
                                    "kind": "Field",
                                    "name": Object {
                                      "kind": "Name",
                                      "value": "signup",
                                    },
                                    "selectionSet": Object {
                                      "kind": "SelectionSet",
                                      "selections": Array [
                                        Object {
                                          "alias": undefined,
                                          "arguments": Array [],
                                          "directives": Array [],
                                          "kind": "Field",
                                          "name": Object {
                                            "kind": "Name",
                                            "value": "id",
                                          },
                                          "selectionSet": undefined,
                                        },
                                        Object {
                                          "alias": undefined,
                                          "arguments": Array [],
                                          "directives": Array [],
                                          "kind": "Field",
                                          "name": Object {
                                            "kind": "Name",
                                            "value": "firstName",
                                          },
                                          "selectionSet": undefined,
                                        },
                                        Object {
                                          "alias": undefined,
                                          "arguments": Array [],
                                          "directives": Array [],
                                          "kind": "Field",
                                          "name": Object {
                                            "kind": "Name",
                                            "value": "lastName",
                                          },
                                          "selectionSet": undefined,
                                        },
                                        Object {
                                          "alias": undefined,
                                          "arguments": Array [],
                                          "directives": Array [],
                                          "kind": "Field",
                                          "name": Object {
                                            "kind": "Name",
                                            "value": "email",
                                          },
                                          "selectionSet": undefined,
                                        },
                                        Object {
                                          "alias": undefined,
                                          "arguments": Array [],
                                          "directives": Array [],
                                          "kind": "Field",
                                          "name": Object {
                                            "kind": "Name",
                                            "value": "accessToken",
                                          },
                                          "selectionSet": undefined,
                                        },
                                        Object {
                                          "kind": "Field",
                                          "name": Object {
                                            "kind": "Name",
                                            "value": "__typename",
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                              "variableDefinitions": Array [
                                Object {
                                  "defaultValue": undefined,
                                  "directives": Array [],
                                  "kind": "VariableDefinition",
                                  "type": Object {
                                    "kind": "NamedType",
                                    "name": Object {
                                      "kind": "Name",
                                      "value": "JSON",
                                    },
                                  },
                                  "variable": Object {
                                    "kind": "Variable",
                                    "name": Object {
                                      "kind": "Name",
                                      "value": "data",
                                    },
                                  },
                                },
                              ],
                            },
                          ],
                          "kind": "Document",
                          "loc": Object {
                            "end": 142,
                            "start": 0,
                          },
                        } => Object {
                          "definitions": Array [
                            Object {
                              "directives": Array [],
                              "kind": "OperationDefinition",
                              "name": Object {
                                "kind": "Name",
                                "value": "SignupMutation",
                              },
                              "operation": "mutation",
                              "selectionSet": Object {
                                "kind": "SelectionSet",
                                "selections": Array [
                                  Object {
                                    "alias": undefined,
                                    "arguments": Array [
                                      Object {
                                        "kind": "Argument",
                                        "name": Object {
                                          "kind": "Name",
                                          "value": "input",
                                        },
                                        "value": Object {
                                          "fields": Array [
                                            Object {
                                              "kind": "ObjectField",
                                              "name": Object {
                                                "kind": "Name",
                                                "value": "data",
                                              },
                                              "value": Object {
                                                "kind": "Variable",
                                                "name": Object {
                                                  "kind": "Name",
                                                  "value": "data",
                                                },
                                              },
                                            },
                                          ],
                                          "kind": "ObjectValue",
                                        },
                                      },
                                    ],
                                    "directives": Array [],
                                    "kind": "Field",
                                    "name": Object {
                                      "kind": "Name",
                                      "value": "signup",
                                    },
                                    "selectionSet": Object {
                                      "kind": "SelectionSet",
                                      "selections": Array [
                                        Object {
                                          "alias": undefined,
                                          "arguments": Array [],
                                          "directives": Array [],
                                          "kind": "Field",
                                          "name": Object {
                                            "kind": "Name",
                                            "value": "id",
                                          },
                                          "selectionSet": undefined,
                                        },
                                        Object {
                                          "alias": undefined,
                                          "arguments": Array [],
                                          "directives": Array [],
                                          "kind": "Field",
                                          "name": Object {
                                            "kind": "Name",
                                            "value": "firstName",
                                          },
                                          "selectionSet": undefined,
                                        },
                                        Object {
                                          "alias": undefined,
                                          "arguments": Array [],
                                          "directives": Array [],
                                          "kind": "Field",
                                          "name": Object {
                                            "kind": "Name",
                                            "value": "lastName",
                                          },
                                          "selectionSet": undefined,
                                        },
                                        Object {
                                          "alias": undefined,
                                          "arguments": Array [],
                                          "directives": Array [],
                                          "kind": "Field",
                                          "name": Object {
                                            "kind": "Name",
                                            "value": "email",
                                          },
                                          "selectionSet": undefined,
                                        },
                                        Object {
                                          "alias": undefined,
                                          "arguments": Array [],
                                          "directives": Array [],
                                          "kind": "Field",
                                          "name": Object {
                                            "kind": "Name",
                                            "value": "accessToken",
                                          },
                                          "selectionSet": undefined,
                                        },
                                        Object {
                                          "kind": "Field",
                                          "name": Object {
                                            "kind": "Name",
                                            "value": "__typename",
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                              "variableDefinitions": Array [
                                Object {
                                  "defaultValue": undefined,
                                  "directives": Array [],
                                  "kind": "VariableDefinition",
                                  "type": Object {
                                    "kind": "NamedType",
                                    "name": Object {
                                      "kind": "Name",
                                      "value": "JSON",
                                    },
                                  },
                                  "variable": Object {
                                    "kind": "Variable",
                                    "name": Object {
                                      "kind": "Name",
                                      "value": "data",
                                    },
                                  },
                                },
                              ],
                            },
                          ],
                          "kind": "Document",
                          "loc": Object {
                            "end": 142,
                            "start": 0,
                          },
                        },
                      },
                      "watches": Set {},
                    },
                  },
                  "typeDefs": undefined,
                  "version": "2.5.1",
                  "watchQuery": [Function],
                }
              }
            >
              <ThemedComponent
                BB={
                  BlueBase {
                    "Analytics": Analytics {
                      "BB": [Circular],
                    },
                    "Assets": AssetRegistry {
                      "BB": [Circular],
                      "data": Map {
                        "Logo" => Object {
                          "key": "Logo",
                          "preload": false,
                          "type": "unknown",
                          "value": Object {
                            "uri": "test-file-stub",
                          },
                        },
                        "LogoSquare" => Object {
                          "key": "LogoSquare",
                          "preload": false,
                          "type": "unknown",
                          "value": Object {
                            "uri": "test-file-stub",
                          },
                        },
                      },
                      "subscriptions": Map {},
                    },
                    "Components": ComponentRegistry {
                      "BB": [Circular],
                      "data": Map {
                        "BlueBaseContent" => Object {
                          "applyStyles": true,
                          "hocs": Array [
                            [Function],
                          ],
                          "isAsync": false,
                          "key": "BlueBaseContent",
                          "preload": false,
                          "value": Promise {
                            "_40": 0,
                            "_55": [Function],
                            "_65": 1,
                            "_72": null,
                            "isAsync": false,
                            "loaded": true,
                            "module": [Function],
                          },
                        },
                        "BlueBaseFilter" => Object {
                          "applyStyles": false,
                          "hocs": Array [],
                          "isAsync": false,
                          "key": "BlueBaseFilter",
                          "preload": false,
                          "value": Promise {
                            "_40": 0,
                            "_55": [Function],
                            "_65": 1,
                            "_72": null,
                            "isAsync": false,
                            "loaded": true,
                            "module": [Function],
                          },
                        },
                        "BlueBaseImage" => Object {
                          "applyStyles": true,
                          "hocs": Array [],
                          "isAsync": false,
                          "key": "BlueBaseImage",
                          "preload": false,
                          "value": Promise {
                            "_40": 0,
                            "_55": [Function],
                            "_65": 1,
                            "_72": null,
                            "isAsync": false,
                            "loaded": true,
                            "module": [Function],
                          },
                        },
                        "ComponentState" => Object {
                          "applyStyles": true,
                          "hocs": Array [],
                          "isAsync": false,
                          "key": "ComponentState",
                          "preload": false,
                          "value": Promise {
                            "_40": 0,
                            "_55": [Function],
                            "_65": 1,
                            "_72": null,
                            "isAsync": false,
                            "loaded": true,
                            "module": [Function],
                          },
                        },
                        "DataObserver" => Object {
                          "applyStyles": true,
                          "hocs": Array [],
                          "isAsync": false,
                          "key": "DataObserver",
                          "preload": false,
                          "value": Promise {
                            "_40": 0,
                            "_55": [Function],
                            "_65": 1,
                            "_72": null,
                            "isAsync": false,
                            "loaded": true,
                            "module": [Function],
                          },
                        },
                        "DynamicIcon" => Object {
                          "applyStyles": true,
                          "hocs": Array [],
                          "isAsync": false,
                          "key": "DynamicIcon",
                          "preload": false,
                          "value": Promise {
                            "_40": 0,
                            "_55": [Function],
                            "_65": 1,
                            "_72": null,
                            "isAsync": false,
                            "loaded": true,
                            "module": [Function],
                          },
                        },
                        "EmptyState" => Object {
                          "applyStyles": true,
                          "hocs": Array [],
                          "isAsync": false,
                          "key": "EmptyState",
                          "preload": false,
                          "value": Promise {
                            "_40": 0,
                            "_55": [Function],
                            "_65": 1,
                            "_72": null,
                            "isAsync": false,
                            "loaded": true,
                            "module": [Function],
                          },
                        },
                        "ErrorObserver" => Object {
                          "applyStyles": true,
                          "hocs": Array [],
                          "isAsync": false,
                          "key": "ErrorObserver",
                          "preload": false,
                          "value": Promise {
                            "_40": 0,
                            "_55": [Function],
                            "_65": 1,
                            "_72": null,
                            "isAsync": false,
                            "loaded": true,
                            "module": [Function],
                          },
                        },
                        "ErrorState" => Object {
                          "applyStyles": true,
                          "hocs": Array [],
                          "isAsync": false,
                          "key": "ErrorState",
                          "preload": false,
                          "value": Promise {
                            "_40": 0,
                            "_55": [Function],
                            "_65": 1,
                            "_72": null,
                            "isAsync": false,
                            "loaded": true,
                            "module": [Function],
                          },
                        },
                        "FormattedMessage" => Object {
                          "applyStyles": true,
                          "hocs": Array [],
                          "isAsync": false,
                          "key": "FormattedMessage",
                          "preload": false,
                          "value": Promise {
                            "_40": 0,
                            "_55": [Function],
                            "_65": 1,
                            "_72": null,
                            "isAsync": false,
                            "loaded": true,
                            "module": [Function],
                          },
                        },
                        "HomeScreen" => Object {
                          "applyStyles": true,
                          "hocs": Array [],
                          "isAsync": false,
                          "key": "HomeScreen",
                          "preload": false,
                          "value": Promise {
                            "_40": 0,
                            "_55": [Function],
                            "_65": 1,
                            "_72": null,
                            "isAsync": false,
                            "loaded": true,
                            "module": [Function],
                          },
                        },
                        "HoverObserver" => Object {
                          "applyStyles": true,
                          "hocs": Array [],
                          "isAsync": false,
                          "key": "HoverObserver",
                          "preload": false,
                          "value": Promise {
                            "_40": 0,
                            "_55": [Function],
                            "_65": 1,
                            "_72": null,
                            "isAsync": false,
                            "loaded": true,
                            "module": [Function],
                          },
                        },
                        "Icon" => Object {
                          "applyStyles": true,
                          "hocs": Array [],
                          "isAsync": false,
                          "key": "Icon",
                          "preload": false,
                          "value": Promise {
                            "_40": 0,
                            "_55": [Function],
                            "_65": 1,
                            "_72": null,
                            "isAsync": false,
                            "loaded": true,
                            "module": [Function],
                          },
                        },
                        "Link" => Object {
                          "applyStyles": true,
                          "hocs": Array [],
                          "isAsync": false,
                          "key": "Link",
                          "preload": false,
                          "value": Promise {
                            "_40": 0,
                            "_55": [Function],
                            "_65": 1,
                            "_72": null,
                            "isAsync": false,
                            "loaded": true,
                            "module": [Function],
                          },
                        },
                        "LoadingState" => Object {
                          "applyStyles": true,
                          "hocs": Array [],
                          "isAsync": false,
                          "key": "LoadingState",
                          "preload": false,
                          "value": Promise {
                            "_40": 0,
                            "_55": [Function],
                            "_65": 1,
                            "_72": null,
                            "isAsync": false,
                            "loaded": true,
                            "module": [Function],
                          },
                        },
                        "Navigation" => Object {
                          "applyStyles": true,
                          "hocs": Array [],
                          "isAsync": false,
                          "key": "Navigation",
                          "preload": false,
                          "value": Promise {
                            "_40": 0,
                            "_55": [Function],
                            "_65": 1,
                            "_72": null,
                            "isAsync": false,
                            "loaded": true,
                            "module": [Function],
                          },
                        },
                        "NavigationActions" => Object {
                          "applyStyles": true,
                          "hocs": Array [],
                          "isAsync": false,
                          "key": "NavigationActions",
                          "preload": false,
                          "value": Promise {
                            "_40": 0,
                            "_55": [Function],
                            "_65": 1,
                            "_72": null,
                            "isAsync": false,
                            "loaded": true,
                            "module": [Function],
                          },
                        },
                        "Noop" => Object {
                          "applyStyles": false,
                          "hocs": Array [],
                          "isAsync": false,
                          "key": "Noop",
                          "preload": false,
                          "value": Promise {
                            "_40": 0,
                            "_55": [Function],
                            "_65": 1,
                            "_72": null,
                            "isAsync": false,
                            "loaded": true,
                            "module": [Function],
                          },
                        },
                        "PluginIcon" => Object {
                          "applyStyles": true,
                          "hocs": Array [],
                          "isAsync": false,
                          "key": "PluginIcon",
                          "preload": false,
                          "value": Promise {
                            "_40": 0,
                            "_55": [Function],
                            "_65": 1,
                            "_72": null,
                            "isAsync": false,
                            "loaded": true,
                            "module": [Function],
                          },
                        },
                        "Redirect" => Object {
                          "applyStyles": false,
                          "hocs": Array [],
                          "isAsync": false,
                          "key": "Redirect",
                          "preload": false,
                          "value": Promise {
                            "_40": 0,
                            "_55": [Function],
                            "_65": 1,
                            "_72": null,
                            "isAsync": false,
                            "loaded": true,
                            "module": [Function],
                          },
                        },
                        "StatefulComponent" => Object {
                          "applyStyles": true,
                          "hocs": Array [],
                          "isAsync": false,
                          "key": "StatefulComponent",
                          "preload": false,
                          "value": Promise {
                            "_40": 0,
                            "_55": [Function],
                            "_65": 1,
                            "_72": null,
                            "isAsync": false,
                            "loaded": true,
                            "module": [Function],
                          },
                        },
                        "TouchableItem" => Object {
                          "applyStyles": true,
                          "hocs": Array [],
                          "isAsync": false,
                          "key": "TouchableItem",
                          "preload": false,
                          "value": Promise {
                            "_40": 0,
                            "_55": [Function],
                            "_65": 1,
                            "_72": null,
                            "isAsync": false,
                            "loaded": true,
                            "module": [Function],
                          },
                        },
                        "WaitObserver" => Object {
                          "applyStyles": true,
                          "hocs": Array [],
                          "isAsync": false,
                          "key": "WaitObserver",
                          "preload": false,
                          "value": Promise {
                            "_40": 0,
                            "_55": [Function],
                            "_65": 1,
                            "_72": null,
                            "isAsync": false,
                            "loaded": true,
                            "module": [Function],
                          },
                        },
                        "ActivityIndicator" => Object {
                          "applyStyles": true,
                          "hocs": Array [],
                          "isAsync": false,
                          "key": "ActivityIndicator",
                          "preload": false,
                          "value": Promise {
                            "_40": 0,
                            "_55": [Function],
                            "_65": 1,
                            "_72": null,
                            "isAsync": false,
                            "loaded": true,
                            "module": [Function],
                          },
                        },
                        "Button" => Object {
                          "applyStyles": true,
                          "hocs": Array [],
                          "isAsync": false,
                          "key": "Button",
                          "preload": false,
                          "value": Promise {
                            "_40": 0,
                            "_55": [Function],
                            "_65": 1,
                            "_72": null,
                            "isAsync": false,
                            "loaded": true,
                            "module": [Function],
                          },
                        },
                        "FlatList" => Object {
                          "applyStyles": true,
                          "hocs": Array [],
                          "isAsync": false,
                          "key": "FlatList",
                          "preload": false,
                          "value": Promise {
                            "_40": 0,
                            "_55": [Function],
                            "_65": 1,
                            "_72": null,
                            "isAsync": false,
                            "loaded": true,
                            "module": [Function],
                          },
                        },
                        "Image" => Object {
                          "applyStyles": true,
                          "hocs": Array [],
                          "isAsync": false,
                          "key": "Image",
                          "preload": false,
                          "value": Promise {
                            "_40": 0,
                            "_55": [Function],
                            "_65": 1,
                            "_72": null,
                            "isAsync": false,
                            "loaded": true,
                            "module": [Function],
                          },
                        },
                        "ImageBackground" => Object {
                          "applyStyles": true,
                          "hocs": Array [],
                          "isAsync": false,
                          "key": "ImageBackground",
                          "preload": false,
                          "value": Promise {
                            "_40": 0,
                            "_55": [Function],
                            "_65": 1,
                            "_72": null,
                            "isAsync": false,
                            "loaded": true,
                            "module": [Function],
                          },
                        },
                        "Picker" => Object {
                          "applyStyles": true,
                          "hocs": Array [],
                          "isAsync": false,
                          "key": "Picker",
                          "preload": false,
                          "value": Promise {
                            "_40": 0,
                            "_55": [Function],
                            "_65": 1,
                            "_72": null,
                            "isAsync": false,
                            "loaded": true,
                            "module": [Function],
                          },
                        },
                        "SafeAreaView" => Object {
                          "applyStyles": true,
                          "hocs": Array [],
                          "isAsync": false,
                          "key": "SafeAreaView",
                          "preload": false,
                          "value": Promise {
                            "_40": 0,
                            "_55": [Function],
                            "_65": 1,
                            "_72": null,
                            "isAsync": false,
                            "loaded": true,
                            "module": [Function],
                          },
                        },
                        "ScrollView" => Object {
                          "applyStyles": true,
                          "hocs": Array [],
                          "isAsync": false,
                          "key": "ScrollView",
                          "preload": false,
                          "value": Promise {
                            "_40": 0,
                            "_55": [MockFunction],
                            "_65": 1,
                            "_72": null,
                            "isAsync": false,
                            "loaded": true,
                            "module": [MockFunction],
                          },
                        },
                        "Slider" => Object {
                          "applyStyles": true,
                          "hocs": Array [],
                          "isAsync": false,
                          "key": "Slider",
                          "preload": false,
                          "value": Promise {
                            "_40": 0,
                            "_55": Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "defaultProps": Object {
                                "disabled": false,
                                "maximumValue": 1,
                                "minimumValue": 0,
                                "step": 0,
                                "value": 0,
                              },
                              "render": [Function],
                            },
                            "_65": 1,
                            "_72": null,
                            "isAsync": false,
                            "loaded": true,
                            "module": Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "defaultProps": Object {
                                "disabled": false,
                                "maximumValue": 1,
                                "minimumValue": 0,
                                "step": 0,
                                "value": 0,
                              },
                              "render": [Function],
                            },
                          },
                        },
                        "Switch" => Object {
                          "applyStyles": true,
                          "hocs": Array [],
                          "isAsync": false,
                          "key": "Switch",
                          "preload": false,
                          "value": Promise {
                            "_40": 0,
                            "_55": [Function],
                            "_65": 1,
                            "_72": null,
                            "isAsync": false,
                            "loaded": true,
                            "module": [Function],
                          },
                        },
                        "Text" => Object {
                          "applyStyles": true,
                          "hocs": Array [],
                          "isAsync": false,
                          "key": "Text",
                          "preload": false,
                          "value": Promise {
                            "_40": 0,
                            "_55": [Function],
                            "_65": 1,
                            "_72": null,
                            "isAsync": false,
                            "loaded": true,
                            "module": [Function],
                          },
                        },
                        "TextInput" => Object {
                          "applyStyles": true,
                          "hocs": Array [],
                          "isAsync": false,
                          "key": "TextInput",
                          "preload": false,
                          "value": Promise {
                            "_40": 0,
                            "_55": [Function],
                            "_65": 1,
                            "_72": null,
                            "isAsync": false,
                            "loaded": true,
                            "module": [Function],
                          },
                        },
                        "View" => Object {
                          "applyStyles": false,
                          "hocs": Array [],
                          "isAsync": false,
                          "key": "View",
                          "preload": false,
                          "value": Promise {
                            "_40": 0,
                            "_55": [Function],
                            "_65": 1,
                            "_72": null,
                            "isAsync": false,
                            "loaded": true,
                            "module": [Function],
                          },
                        },
                        "H1" => Object {
                          "applyStyles": true,
                          "hocs": Array [],
                          "isAsync": false,
                          "key": "H1",
                          "preload": false,
                          "styles": [Function],
                          "value": Promise {
                            "_40": 0,
                            "_55": [Function],
                            "_65": 1,
                            "_72": null,
                            "isAsync": false,
                            "loaded": true,
                            "module": [Function],
                          },
                        },
                        "H2" => Object {
                          "applyStyles": true,
                          "hocs": Array [],
                          "isAsync": false,
                          "key": "H2",
                          "preload": false,
                          "styles": [Function],
                          "value": Promise {
                            "_40": 0,
                            "_55": [Function],
                            "_65": 1,
                            "_72": null,
                            "isAsync": false,
                            "loaded": true,
                            "module": [Function],
                          },
                        },
                        "H3" => Object {
                          "applyStyles": true,
                          "hocs": Array [],
                          "isAsync": false,
                          "key": "H3",
                          "preload": false,
                          "styles": [Function],
                          "value": Promise {
                            "_40": 0,
                            "_55": [Function],
                            "_65": 1,
                            "_72": null,
                            "isAsync": false,
                            "loaded": true,
                            "module": [Function],
                          },
                        },
                        "H4" => Object {
                          "applyStyles": true,
                          "hocs": Array [],
                          "isAsync": false,
                          "key": "H4",
                          "preload": false,
                          "styles": [Function],
                          "value": Promise {
                            "_40": 0,
                            "_55": [Function],
                            "_65": 1,
                            "_72": null,
                            "isAsync": false,
                            "loaded": true,
                            "module": [Function],
                          },
                        },
                        "H5" => Object {
                          "applyStyles": true,
                          "hocs": Array [],
                          "isAsync": false,
                          "key": "H5",
                          "preload": false,
                          "styles": [Function],
                          "value": Promise {
                            "_40": 0,
                            "_55": [Function],
                            "_65": 1,
                            "_72": null,
                            "isAsync": false,
                            "loaded": true,
                            "module": [Function],
                          },
                        },
                        "H6" => Object {
                          "applyStyles": true,
                          "hocs": Array [],
                          "isAsync": false,
                          "key": "H6",
                          "preload": false,
                          "styles": [Function],
                          "value": Promise {
                            "_40": 0,
                            "_55": [Function],
                            "_65": 1,
                            "_72": null,
                            "isAsync": false,
                            "loaded": true,
                            "module": [Function],
                          },
                        },
                        "Subtitle1" => Object {
                          "applyStyles": true,
                          "hocs": Array [],
                          "isAsync": false,
                          "key": "Subtitle1",
                          "preload": false,
                          "styles": [Function],
                          "value": Promise {
                            "_40": 0,
                            "_55": [Function],
                            "_65": 1,
                            "_72": null,
                            "isAsync": false,
                            "loaded": true,
                            "module": [Function],
                          },
                        },
                        "Subtitle2" => Object {
                          "applyStyles": true,
                          "hocs": Array [],
                          "isAsync": false,
                          "key": "Subtitle2",
                          "preload": false,
                          "styles": [Function],
                          "value": Promise {
                            "_40": 0,
                            "_55": [Function],
                            "_65": 1,
                            "_72": null,
                            "isAsync": false,
                            "loaded": true,
                            "module": [Function],
                          },
                        },
                        "Body1" => Object {
                          "applyStyles": true,
                          "hocs": Array [],
                          "isAsync": false,
                          "key": "Body1",
                          "preload": false,
                          "styles": [Function],
                          "value": Promise {
                            "_40": 0,
                            "_55": [Function],
                            "_65": 1,
                            "_72": null,
                            "isAsync": false,
                            "loaded": true,
                            "module": [Function],
                          },
                        },
                        "Body2" => Object {
                          "applyStyles": true,
                          "hocs": Array [],
                          "isAsync": false,
                          "key": "Body2",
                          "preload": false,
                          "styles": [Function],
                          "value": Promise {
                            "_40": 0,
                            "_55": [Function],
                            "_65": 1,
                            "_72": null,
                            "isAsync": false,
                            "loaded": true,
                            "module": [Function],
                          },
                        },
                        "Caption" => Object {
                          "applyStyles": true,
                          "hocs": Array [],
                          "isAsync": false,
                          "key": "Caption",
                          "preload": false,
                          "styles": [Function],
                          "value": Promise {
                            "_40": 0,
                            "_55": [Function],
                            "_65": 1,
                            "_72": null,
                            "isAsync": false,
                            "loaded": true,
                            "module": [Function],
                          },
                        },
                        "Overline" => Object {
                          "applyStyles": true,
                          "hocs": Array [],
                          "isAsync": false,
                          "key": "Overline",
                          "preload": false,
                          "styles": [Function],
                          "value": Promise {
                            "_40": 0,
                            "_55": [Function],
                            "_65": 1,
                            "_72": null,
                            "isAsync": false,
                            "loaded": true,
                            "module": [Function],
                          },
                        },
                        "ApolloConsumer" => Object {
                          "applyStyles": true,
                          "hocs": Array [],
                          "isAsync": false,
                          "key": "ApolloConsumer",
                          "preload": false,
                          "value": Promise {
                            "_40": 0,
                            "_55": [Function],
                            "_65": 1,
                            "_72": null,
                            "isAsync": false,
                            "loaded": true,
                            "module": [Function],
                          },
                        },
                        "GraphqlMutation" => Object {
                          "applyStyles": true,
                          "hocs": Array [],
                          "isAsync": false,
                          "key": "GraphqlMutation",
                          "preload": false,
                          "value": Promise {
                            "_40": 0,
                            "_55": [Function],
                            "_65": 1,
                            "_72": null,
                            "isAsync": false,
                            "loaded": true,
                            "module": [Function],
                          },
                        },
                        "GraphqlQuery" => Object {
                          "applyStyles": true,
                          "hocs": Array [],
                          "isAsync": false,
                          "key": "GraphqlQuery",
                          "preload": false,
                          "value": Promise {
                            "_40": 0,
                            "_55": [Function],
                            "_65": 1,
                            "_72": null,
                            "isAsync": false,
                            "loaded": true,
                            "module": [Function],
                          },
                        },
                        "GraphqlSubscription" => Object {
                          "applyStyles": true,
                          "hocs": Array [],
                          "isAsync": false,
                          "key": "GraphqlSubscription",
                          "preload": false,
                          "value": Promise {
                            "_40": 0,
                            "_55": [Function],
                            "_65": 1,
                            "_72": null,
                            "isAsync": false,
                            "loaded": true,
                            "module": [Function],
                          },
                        },
                        "BaseFormField" => Object {
                          "applyStyles": true,
                          "hocs": Array [],
                          "isAsync": false,
                          "key": "BaseFormField",
                          "preload": false,
                          "value": Promise {
                            "_40": 0,
                            "_55": [Function],
                            "_65": 1,
                            "_72": null,
                            "isAsync": false,
                            "loaded": true,
                            "module": [Function],
                          },
                        },
                        "FormCheckboxInput" => Object {
                          "applyStyles": true,
                          "hocs": Array [],
                          "isAsync": false,
                          "key": "FormCheckboxInput",
                          "preload": false,
                          "value": Promise {
                            "_40": 0,
                            "_55": [Function],
                            "_65": 1,
                            "_72": null,
                            "isAsync": false,
                            "loaded": true,
                            "module": [Function],
                          },
                        },
                        "FormEmailInput" => Object {
                          "applyStyles": true,
                          "hocs": Array [],
                          "isAsync": false,
                          "key": "FormEmailInput",
                          "preload": false,
                          "value": Promise {
                            "_40": 0,
                            "_55": [Function],
                            "_65": 1,
                            "_72": null,
                            "isAsync": false,
                            "loaded": true,
                            "module": [Function],
                          },
                        },
                        "FormNumberInput" => Object {
                          "applyStyles": true,
                          "hocs": Array [],
                          "isAsync": false,
                          "key": "FormNumberInput",
                          "preload": false,
                          "value": Promise {
                            "_40": 0,
                            "_55": [Function],
                            "_65": 1,
                            "_72": null,
                            "isAsync": false,
                            "loaded": true,
                            "module": [Function],
                          },
                        },
                        "FormPasswordInput" => Object {
                          "applyStyles": true,
                          "hocs": Array [],
                          "isAsync": false,
                          "key": "FormPasswordInput",
                          "preload": false,
                          "value": Promise {
                            "_40": 0,
                            "_55": [Function],
                            "_65": 1,
                            "_72": null,
                            "isAsync": false,
                            "loaded": true,
                            "module": [Function],
                          },
                        },
                        "FormPickerInput" => Object {
                          "applyStyles": true,
                          "hocs": Array [],
                          "isAsync": false,
                          "key": "FormPickerInput",
                          "preload": false,
                          "value": Promise {
                            "_40": 0,
                            "_55": [Function],
                            "_65": 1,
                            "_72": null,
                            "isAsync": false,
                            "loaded": true,
                            "module": [Function],
                          },
                        },
                        "FormRadioGroupInput" => Object {
                          "applyStyles": true,
                          "hocs": Array [],
                          "isAsync": false,
                          "key": "FormRadioGroupInput",
                          "preload": false,
                          "value": Promise {
                            "_40": 0,
                            "_55": [Function],
                            "_65": 1,
                            "_72": null,
                            "isAsync": false,
                            "loaded": true,
                            "module": [Function],
                          },
                        },
                        "FormRangeInput" => Object {
                          "applyStyles": true,
                          "hocs": Array [],
                          "isAsync": false,
                          "key": "FormRangeInput",
                          "preload": false,
                          "value": Promise {
                            "_40": 0,
                            "_55": [Function],
                            "_65": 1,
                            "_72": null,
                            "isAsync": false,
                            "loaded": true,
                            "module": [Function],
                          },
                        },
                        "FormResetButton" => Object {
                          "applyStyles": true,
                          "hocs": Array [],
                          "isAsync": false,
                          "key": "FormResetButton",
                          "preload": false,
                          "value": Promise {
                            "_40": 0,
                            "_55": [Function],
                            "_65": 1,
                            "_72": null,
                            "isAsync": false,
                            "loaded": true,
                            "module": [Function],
                          },
                        },
                        "FormStatus" => Object {
                          "applyStyles": true,
                          "hocs": Array [],
                          "isAsync": false,
                          "key": "FormStatus",
                          "preload": false,
                          "value": Promise {
                            "_40": 0,
                            "_55": [Function],
                            "_65": 1,
                            "_72": null,
                            "isAsync": false,
                            "loaded": true,
                            "module": [Function],
                          },
                        },
                        "FormStatusList" => Object {
                          "applyStyles": true,
                          "hocs": Array [],
                          "isAsync": false,
                          "key": "FormStatusList",
                          "preload": false,
                          "value": Promise {
                            "_40": 0,
                            "_55": [Function],
                            "_65": 1,
                            "_72": null,
                            "isAsync": false,
                            "loaded": true,
                            "module": [Function],
                          },
                        },
                        "FormStatusListItem" => Object {
                          "applyStyles": true,
                          "hocs": Array [],
                          "isAsync": false,
                          "key": "FormStatusListItem",
                          "preload": false,
                          "value": Promise {
                            "_40": 0,
                            "_55": [Function],
                            "_65": 1,
                            "_72": null,
                            "isAsync": false,
                            "loaded": true,
                            "module": [Function],
                          },
                        },
                        "FormSubmitButton" => Object {
                          "applyStyles": true,
                          "hocs": Array [],
                          "isAsync": false,
                          "key": "FormSubmitButton",
                          "preload": false,
                          "value": Promise {
                            "_40": 0,
                            "_55": [Function],
                            "_65": 1,
                            "_72": null,
                            "isAsync": false,
                            "loaded": true,
                            "module": [Function],
                          },
                        },
                        "FormSwitchInput" => Object {
                          "applyStyles": true,
                          "hocs": Array [],
                          "isAsync": false,
                          "key": "FormSwitchInput",
                          "preload": false,
                          "value": Promise {
                            "_40": 0,
                            "_55": [Function],
                            "_65": 1,
                            "_72": null,
                            "isAsync": false,
                            "loaded": true,
                            "module": [Function],
                          },
                        },
                        "FormTextInput" => Object {
                          "applyStyles": true,
                          "hocs": Array [],
                          "isAsync": false,
                          "key": "FormTextInput",
                          "preload": false,
                          "value": Promise {
                            "_40": 0,
                            "_55": [Function],
                            "_65": 1,
                            "_72": null,
                            "isAsync": false,
                            "loaded": true,
                            "module": [Function],
                          },
                        },
                        "FormUrlInput" => Object {
                          "applyStyles": true,
                          "hocs": Array [],
                          "isAsync": false,
                          "key": "FormUrlInput",
                          "preload": false,
                          "value": Promise {
                            "_40": 0,
                            "_55": [Function],
                            "_65": 1,
                            "_72": null,
                            "isAsync": false,
                            "loaded": true,
                            "module": [Function],
                          },
                        },
                        "InlineFields" => Object {
                          "applyStyles": true,
                          "hocs": Array [],
                          "isAsync": false,
                          "key": "InlineFields",
                          "preload": false,
                          "value": Promise {
                            "_40": 0,
                            "_55": [Function],
                            "_65": 1,
                            "_72": null,
                            "isAsync": false,
                            "loaded": true,
                            "module": [Function],
                          },
                        },
                        "JsonForm" => Object {
                          "applyStyles": true,
                          "hocs": Array [],
                          "isAsync": false,
                          "key": "JsonForm",
                          "preload": false,
                          "value": Promise {
                            "_40": 0,
                            "_55": [Function],
                            "_65": 1,
                            "_72": null,
                            "isAsync": false,
                            "loaded": true,
                            "module": [Function],
                          },
                        },
                        "JsonGraphqlForm" => Object {
                          "applyStyles": true,
                          "hocs": Array [],
                          "isAsync": false,
                          "key": "JsonGraphqlForm",
                          "preload": false,
                          "value": Promise {
                            "_40": 0,
                            "_55": [Function],
                            "_65": 1,
                            "_72": null,
                            "isAsync": false,
                            "loaded": true,
                            "module": [Function],
                          },
                        },
                        "JsonLayout" => Object {
                          "applyStyles": true,
                          "hocs": Array [],
                          "isAsync": false,
                          "key": "JsonLayout",
                          "preload": false,
                          "value": Promise {
                            "_40": 0,
                            "_55": [Function],
                            "_65": 1,
                            "_72": null,
                            "isAsync": false,
                            "loaded": true,
                            "module": [Function],
                          },
                        },
                      },
                      "subscriptions": Map {},
                    },
                    "Configs": ConfigRegistry {
                      "BB": [Circular],
                      "data": Map {
                        "debug" => Object {
                          "key": "debug",
                          "value": true,
                        },
                        "development" => Object {
                          "key": "development",
                          "value": true,
                        },
                        "direction" => Object {
                          "key": "direction",
                          "value": "auto",
                        },
                        "locale" => Object {
                          "key": "locale",
                          "value": "en",
                        },
                        "locale.options" => Object {
                          "key": "locale.options",
                          "value": Object {
                            "en": "English",
                            "ur": "اُردُو",
                          },
                        },
                        "pluginRoutePathPrefix" => Object {
                          "key": "pluginRoutePathPrefix",
                          "value": "p",
                        },
                        "statusBarStyle" => Object {
                          "key": "statusBarStyle",
                          "value": "light-content",
                        },
                        "theme.mode" => Object {
                          "key": "theme.mode",
                          "value": "light",
                        },
                        "theme.name" => Object {
                          "key": "theme.name",
                          "value": "bluebase-light",
                        },
                        "theme.overrides" => Object {
                          "key": "theme.overrides",
                          "value": Object {},
                        },
                        "title" => Object {
                          "key": "title",
                          "value": "BlueBase",
                        },
                        "plugin.apollo.httpLinkOptions" => Object {
                          "key": "plugin.apollo.httpLinkOptions",
                          "value": Object {
                            "uri": "http://graphql",
                          },
                        },
                        "plugin.apollo.clientOptions" => Object {
                          "key": "plugin.apollo.clientOptions",
                          "value": Object {},
                        },
                      },
                      "subscriptions": Map {
                        "theme.name" => Map {
                          "_wmv3luo" => [Function],
                        },
                        "locale" => Map {
                          "_pyjjq59" => [Function],
                        },
                        "direction" => Map {
                          "_xwtcvgc" => [Function],
                        },
                      },
                    },
                    "Filters": FilterRegistry {
                      "BB": [Circular],
                      "data": Map {
                        "bluebase-assets-register-internal-default" => Object {
                          "event": "bluebase.assets.register.internal",
                          "key": "bluebase-assets-register-internal-default",
                          "preload": false,
                          "priority": 5,
                          "value": Promise {
                            "_40": 0,
                            "_55": [Function],
                            "_65": 1,
                            "_72": null,
                            "isAsync": false,
                            "loaded": true,
                            "module": [Function],
                          },
                        },
                        "bluebase-assets-register-default" => Object {
                          "event": "bluebase.assets.register",
                          "key": "bluebase-assets-register-default",
                          "preload": false,
                          "priority": 5,
                          "value": Promise {
                            "_40": 0,
                            "_55": [Function],
                            "_65": 1,
                            "_72": null,
                            "isAsync": false,
                            "loaded": true,
                            "module": [Function],
                          },
                        },
                        "bluebase-boot-default" => Object {
                          "event": "bluebase.boot",
                          "key": "bluebase-boot-default",
                          "preload": false,
                          "priority": 5,
                          "value": Promise {
                            "_40": 0,
                            "_55": [Function],
                            "_65": 1,
                            "_72": null,
                            "isAsync": false,
                            "loaded": true,
                            "module": [Function],
                          },
                        },
                        "system-boot-start-default" => Object {
                          "event": "bluebase.boot.start",
                          "key": "system-boot-start-default",
                          "preload": false,
                          "priority": 5,
                          "value": Promise {
                            "_40": 0,
                            "_55": [Function],
                            "_65": 1,
                            "_72": null,
                            "isAsync": false,
                            "loaded": true,
                            "module": [Function],
                          },
                        },
                        "system-preload-default" => Object {
                          "event": "bluebase.preload",
                          "key": "system-preload-default",
                          "preload": false,
                          "priority": 5,
                          "value": Promise {
                            "_40": 0,
                            "_55": [Function],
                            "_65": 1,
                            "_72": null,
                            "isAsync": false,
                            "loaded": true,
                            "module": [Function],
                          },
                        },
                        "bluebase-components-register-internal-default" => Object {
                          "event": "bluebase.components.register.internal",
                          "key": "bluebase-components-register-internal-default",
                          "preload": false,
                          "priority": 5,
                          "value": Promise {
                            "_40": 0,
                            "_55": [Function],
                            "_65": 1,
                            "_72": null,
                            "isAsync": false,
                            "loaded": true,
                            "module": [Function],
                          },
                        },
                        "bluebase-components-register-default" => Object {
                          "event": "bluebase.components.register",
                          "key": "bluebase-components-register-default",
                          "preload": false,
                          "priority": 5,
                          "value": Promise {
                            "_40": 0,
                            "_55": [Function],
                            "_65": 1,
                            "_72": null,
                            "isAsync": false,
                            "loaded": true,
                            "module": [Function],
                          },
                        },
                        "bluebase-configs-register-default" => Object {
                          "event": "bluebase.configs.register",
                          "key": "bluebase-configs-register-default",
                          "preload": false,
                          "priority": 5,
                          "value": Promise {
                            "_40": 0,
                            "_55": [Function],
                            "_65": 1,
                            "_72": null,
                            "isAsync": false,
                            "loaded": true,
                            "module": [Function],
                          },
                        },
                        "bluebase-fonts-register-default" => Object {
                          "event": "bluebase.fonts.register",
                          "key": "bluebase-fonts-register-default",
                          "preload": false,
                          "priority": 5,
                          "value": Promise {
                            "_40": 0,
                            "_55": [Function],
                            "_65": 1,
                            "_72": null,
                            "isAsync": false,
                            "loaded": true,
                            "module": [Function],
                          },
                        },
                        "bluebase-plugins-register-default" => Object {
                          "event": "bluebase.plugins.register",
                          "key": "bluebase-plugins-register-default",
                          "preload": false,
                          "priority": 5,
                          "value": Promise {
                            "_40": 0,
                            "_55": [Function],
                            "_65": 1,
                            "_72": null,
                            "isAsync": false,
                            "loaded": true,
                            "module": [Function],
                          },
                        },
                        "bluebase-plugins-initialize-all-default" => Object {
                          "event": "bluebase.plugins.initialize.all",
                          "key": "bluebase-plugins-initialize-all-default",
                          "preload": false,
                          "priority": 5,
                          "value": Promise {
                            "_40": 0,
                            "_55": [Function],
                            "_65": 1,
                            "_72": null,
                            "isAsync": false,
                            "loaded": true,
                            "module": [Function],
                          },
                        },
                        "bluebase-plugins-initialize-default" => Object {
                          "event": "bluebase.plugins.initialize",
                          "key": "bluebase-plugins-initialize-default",
                          "preload": false,
                          "priority": 5,
                          "value": Promise {
                            "_40": 0,
                            "_55": [Function],
                            "_65": 1,
                            "_72": null,
                            "isAsync": false,
                            "loaded": true,
                            "module": [Function],
                          },
                        },
                        "bluebase-navigator-root-internal-default" => Object {
                          "event": "bluebase.navigator.root",
                          "key": "bluebase-navigator-root-internal-default",
                          "preload": false,
                          "priority": 5,
                          "value": Promise {
                            "_40": 0,
                            "_55": [Function],
                            "_65": 1,
                            "_72": null,
                            "isAsync": false,
                            "loaded": true,
                            "module": [Function],
                          },
                        },
                        "bluebase-navigator-main-internal-default" => Object {
                          "event": "bluebase.navigator.main",
                          "key": "bluebase-navigator-main-internal-default",
                          "preload": false,
                          "priority": 5,
                          "value": Promise {
                            "_40": 0,
                            "_55": [Function],
                            "_65": 1,
                            "_72": null,
                            "isAsync": false,
                            "loaded": true,
                            "module": [Function],
                          },
                        },
                        "bluebase-themes-register-internal-default" => Object {
                          "event": "bluebase.themes.register",
                          "key": "bluebase-themes-register-internal-default",
                          "preload": false,
                          "priority": 5,
                          "value": Promise {
                            "_40": 0,
                            "_55": [Function],
                            "_65": 1,
                            "_72": null,
                            "isAsync": false,
                            "loaded": true,
                            "module": [Function],
                          },
                        },
                        "_kxselc3" => Object {
                          "event": "bluebase.boot.end",
                          "key": "_kxselc3",
                          "preload": false,
                          "priority": 10,
                          "value": Promise {
                            "_40": 0,
                            "_55": [Function],
                            "_65": 1,
                            "_72": null,
                            "isAsync": false,
                            "loaded": true,
                            "module": [Function],
                          },
                        },
                      },
                      "subscriptions": Map {},
                    },
                    "Fonts": FontRegistry {
                      "BB": [Circular],
                      "data": Map {},
                      "subscriptions": Map {},
                    },
                    "Logger": Logger {
                      "BB": [Circular],
                    },
                    "Plugins": PluginRegistry {
                      "BB": [Circular],
                      "data": Map {
                        "plugin-apollo" => Object {
                          "categories": Array [],
                          "defaultConfigs": Object {
                            "plugin.apollo.clientOptions": Object {},
                            "plugin.apollo.httpLinkOptions": Object {},
                          },
                          "description": "🌍 A BlueBase Plugin that integrates Apollo GraphQL Client",
                          "enabled": true,
                          "key": "plugin-apollo",
                          "name": "Apollo Plugin",
                          "path": undefined,
                          "preload": false,
                          "value": Promise {
                            "_40": 0,
                            "_55": Object {
                              "assets": Object {},
                              "components": Object {
                                "ApolloConsumer": [Function],
                                "GraphqlMutation": [Function],
                                "GraphqlQuery": [Function],
                                "GraphqlSubscription": [Function],
                              },
                              "filters": Object {
                                "bluebase.boot.end": [Function],
                              },
                              "fonts": Object {},
                              "routes": undefined,
                              "themes": Object {},
                            },
                            "_65": 1,
                            "_72": null,
                            "isAsync": false,
                            "loaded": true,
                            "module": Object {
                              "assets": Object {},
                              "components": Object {
                                "ApolloConsumer": [Function],
                                "GraphqlMutation": [Function],
                                "GraphqlQuery": [Function],
                                "GraphqlSubscription": [Function],
                              },
                              "filters": Object {
                                "bluebase.boot.end": [Function],
                              },
                              "fonts": Object {},
                              "routes": undefined,
                              "themes": Object {},
                            },
                          },
                          "version": "1.0.0",
                        },
                        "plugin-json-schema-components" => Object {
                          "categories": Array [
                            "ui",
                          ],
                          "defaultConfigs": Object {},
                          "description": "A utility to build pluggable components based on JSON schema!",
                          "enabled": true,
                          "key": "plugin-json-schema-components",
                          "name": "Json Schema Components",
                          "path": undefined,
                          "preload": false,
                          "value": Promise {
                            "_40": 0,
                            "_55": Object {
                              "assets": Object {},
                              "components": Object {
                                "BaseFormField": [Function],
                                "FormCheckboxInput": [Function],
                                "FormEmailInput": [Function],
                                "FormNumberInput": [Function],
                                "FormPasswordInput": [Function],
                                "FormPickerInput": [Function],
                                "FormRadioGroupInput": [Function],
                                "FormRangeInput": [Function],
                                "FormResetButton": [Function],
                                "FormStatus": [Function],
                                "FormStatusList": [Function],
                                "FormStatusListItem": [Function],
                                "FormSubmitButton": [Function],
                                "FormSwitchInput": [Function],
                                "FormTextInput": [Function],
                                "FormUrlInput": [Function],
                                "InlineFields": [Function],
                                "JsonForm": [Function],
                                "JsonGraphqlForm": [Function],
                                "JsonLayout": [Function],
                              },
                              "filters": Object {},
                              "fonts": Object {},
                              "routes": undefined,
                              "themes": Object {},
                            },
                            "_65": 1,
                            "_72": null,
                            "isAsync": false,
                            "loaded": true,
                            "module": Object {
                              "assets": Object {},
                              "components": Object {
                                "BaseFormField": [Function],
                                "FormCheckboxInput": [Function],
                                "FormEmailInput": [Function],
                                "FormNumberInput": [Function],
                                "FormPasswordInput": [Function],
                                "FormPickerInput": [Function],
                                "FormRadioGroupInput": [Function],
                                "FormRangeInput": [Function],
                                "FormResetButton": [Function],
                                "FormStatus": [Function],
                                "FormStatusList": [Function],
                                "FormStatusListItem": [Function],
                                "FormSubmitButton": [Function],
                                "FormSwitchInput": [Function],
                                "FormTextInput": [Function],
                                "FormUrlInput": [Function],
                                "InlineFields": [Function],
                                "JsonForm": [Function],
                                "JsonGraphqlForm": [Function],
                                "JsonLayout": [Function],
                              },
                              "filters": Object {},
                              "fonts": Object {},
                              "routes": undefined,
                              "themes": Object {},
                            },
                          },
                          "version": "0.0.1",
                        },
                      },
                      "subscriptions": Map {},
                    },
                    "Themes": ThemeRegistry {
                      "BB": [Circular],
                      "data": Map {
                        "bluebase-light" => Object {
                          "alternate": "bluebase-dark",
                          "key": "bluebase-light",
                          "mode": "light",
                          "name": "BlueBase Light",
                          "preload": false,
                          "value": Promise {
                            "_40": 0,
                            "_55": Object {
                              "components": Object {},
                              "elevation": [Function],
                              "palette": Object {
                                "action": Object {
                                  "active": "rgba(0, 0, 0, 0.54)",
                                  "disabled": "rgba(0, 0, 0, 0.26)",
                                  "disabledBackground": "rgba(0, 0, 0, 0.12)",
                                  "hover": "rgba(0, 0, 0, 0.08)",
                                  "hoverOpacity": 0.08,
                                  "selected": "rgba(0, 0, 0, 0.14)",
                                },
                                "background": Object {
                                  "card": "#ffffff",
                                  "dark": "#eeeeee",
                                  "default": "#f5f5f5",
                                  "light": "#fafafa",
                                },
                                "divider": "rgba(0, 0, 0, 0.12)",
                                "error": Object {
                                  "contrastText": "#fff",
                                  "dark": "#d32f2f",
                                  "light": "#e57373",
                                  "main": "#f44336",
                                },
                                "primary": Object {
                                  "contrastText": "#fff",
                                  "dark": "#303f9f",
                                  "light": "#7986cb",
                                  "main": "#3f51b5",
                                },
                                "secondary": Object {
                                  "contrastText": "#fff",
                                  "dark": "#c51162",
                                  "light": "#ff4081",
                                  "main": "#f50057",
                                },
                                "success": Object {
                                  "contrastText": "#fff",
                                  "dark": "#388e3c",
                                  "light": "#81c784",
                                  "main": "#4caf50",
                                },
                                "text": Object {
                                  "disabled": "rgba(0, 0, 0, 0.38)",
                                  "hint": "rgba(0, 0, 0, 0.38)",
                                  "icon": "rgba(0, 0, 0, 0.38)",
                                  "primary": "rgba(0, 0, 0, 0.87)",
                                  "secondary": "rgba(0, 0, 0, 0.54)",
                                },
                                "warning": Object {
                                  "contrastText": "#fff",
                                  "dark": "#ffa000",
                                  "light": "#ffd54f",
                                  "main": "#ffc107",
                                },
                              },
                              "shape": Object {
                                "borderRadius": 4,
                              },
                              "spacing": Object {
                                "unit": 8,
                              },
                              "typography": Object {
                                "body1": Object {
                                  "color": "rgba(0, 0, 0, 0.87)",
                                  "fontFamily": undefined,
                                  "fontSize": 16,
                                  "fontWeight": "400",
                                },
                                "body2": Object {
                                  "color": "rgba(0, 0, 0, 0.87)",
                                  "fontFamily": undefined,
                                  "fontSize": 14,
                                  "fontWeight": "400",
                                },
                                "button": Object {
                                  "color": "rgba(0, 0, 0, 0.87)",
                                  "fontFamily": undefined,
                                  "fontSize": 14,
                                  "fontWeight": "500",
                                  "textTransform": "uppercase",
                                },
                                "caption": Object {
                                  "color": "rgba(0, 0, 0, 0.87)",
                                  "fontFamily": undefined,
                                  "fontSize": 12,
                                  "fontWeight": "400",
                                },
                                "h1": Object {
                                  "color": "rgba(0, 0, 0, 0.87)",
                                  "fontFamily": undefined,
                                  "fontSize": 96,
                                  "fontWeight": "300",
                                },
                                "h2": Object {
                                  "color": "rgba(0, 0, 0, 0.87)",
                                  "fontFamily": undefined,
                                  "fontSize": 60,
                                  "fontWeight": "300",
                                },
                                "h3": Object {
                                  "color": "rgba(0, 0, 0, 0.87)",
                                  "fontFamily": undefined,
                                  "fontSize": 48,
                                  "fontWeight": "400",
                                },
                                "h4": Object {
                                  "color": "rgba(0, 0, 0, 0.87)",
                                  "fontFamily": undefined,
                                  "fontSize": 34,
                                  "fontWeight": "400",
                                },
                                "h5": Object {
                                  "color": "rgba(0, 0, 0, 0.87)",
                                  "fontFamily": undefined,
                                  "fontSize": 24,
                                  "fontWeight": "400",
                                },
                                "h6": Object {
                                  "color": "rgba(0, 0, 0, 0.87)",
                                  "fontFamily": undefined,
                                  "fontSize": 20,
                                  "fontWeight": "500",
                                },
                                "overline": Object {
                                  "color": "rgba(0, 0, 0, 0.87)",
                                  "fontFamily": undefined,
                                  "fontSize": 12,
                                  "fontWeight": "400",
                                  "textTransform": "uppercase",
                                },
                                "subtitle1": Object {
                                  "color": "rgba(0, 0, 0, 0.87)",
                                  "fontFamily": undefined,
                                  "fontSize": 16,
                                  "fontWeight": "400",
                                },
                                "subtitle2": Object {
                                  "color": "rgba(0, 0, 0, 0.87)",
                                  "fontFamily": undefined,
                                  "fontSize": 14,
                                  "fontWeight": "500",
                                },
                              },
                            },
                            "_65": 1,
                            "_72": null,
                            "isAsync": false,
                            "loaded": true,
                            "module": Object {
                              "components": Object {},
                              "elevation": [Function],
                              "palette": Object {
                                "action": Object {
                                  "active": "rgba(0, 0, 0, 0.54)",
                                  "disabled": "rgba(0, 0, 0, 0.26)",
                                  "disabledBackground": "rgba(0, 0, 0, 0.12)",
                                  "hover": "rgba(0, 0, 0, 0.08)",
                                  "hoverOpacity": 0.08,
                                  "selected": "rgba(0, 0, 0, 0.14)",
                                },
                                "background": Object {
                                  "card": "#ffffff",
                                  "dark": "#eeeeee",
                                  "default": "#f5f5f5",
                                  "light": "#fafafa",
                                },
                                "divider": "rgba(0, 0, 0, 0.12)",
                                "error": Object {
                                  "contrastText": "#fff",
                                  "dark": "#d32f2f",
                                  "light": "#e57373",
                                  "main": "#f44336",
                                },
                                "primary": Object {
                                  "contrastText": "#fff",
                                  "dark": "#303f9f",
                                  "light": "#7986cb",
                                  "main": "#3f51b5",
                                },
                                "secondary": Object {
                                  "contrastText": "#fff",
                                  "dark": "#c51162",
                                  "light": "#ff4081",
                                  "main": "#f50057",
                                },
                                "success": Object {
                                  "contrastText": "#fff",
                                  "dark": "#388e3c",
                                  "light": "#81c784",
                                  "main": "#4caf50",
                                },
                                "text": Object {
                                  "disabled": "rgba(0, 0, 0, 0.38)",
                                  "hint": "rgba(0, 0, 0, 0.38)",
                                  "icon": "rgba(0, 0, 0, 0.38)",
                                  "primary": "rgba(0, 0, 0, 0.87)",
                                  "secondary": "rgba(0, 0, 0, 0.54)",
                                },
                                "warning": Object {
                                  "contrastText": "#fff",
                                  "dark": "#ffa000",
                                  "light": "#ffd54f",
                                  "main": "#ffc107",
                                },
                              },
                              "shape": Object {
                                "borderRadius": 4,
                              },
                              "spacing": Object {
                                "unit": 8,
                              },
                              "typography": Object {
                                "body1": Object {
                                  "color": "rgba(0, 0, 0, 0.87)",
                                  "fontFamily": undefined,
                                  "fontSize": 16,
                                  "fontWeight": "400",
                                },
                                "body2": Object {
                                  "color": "rgba(0, 0, 0, 0.87)",
                                  "fontFamily": undefined,
                                  "fontSize": 14,
                                  "fontWeight": "400",
                                },
                                "button": Object {
                                  "color": "rgba(0, 0, 0, 0.87)",
                                  "fontFamily": undefined,
                                  "fontSize": 14,
                                  "fontWeight": "500",
                                  "textTransform": "uppercase",
                                },
                                "caption": Object {
                                  "color": "rgba(0, 0, 0, 0.87)",
                                  "fontFamily": undefined,
                                  "fontSize": 12,
                                  "fontWeight": "400",
                                },
                                "h1": Object {
                                  "color": "rgba(0, 0, 0, 0.87)",
                                  "fontFamily": undefined,
                                  "fontSize": 96,
                                  "fontWeight": "300",
                                },
                                "h2": Object {
                                  "color": "rgba(0, 0, 0, 0.87)",
                                  "fontFamily": undefined,
                                  "fontSize": 60,
                                  "fontWeight": "300",
                                },
                                "h3": Object {
                                  "color": "rgba(0, 0, 0, 0.87)",
                                  "fontFamily": undefined,
                                  "fontSize": 48,
                                  "fontWeight": "400",
                                },
                                "h4": Object {
                                  "color": "rgba(0, 0, 0, 0.87)",
                                  "fontFamily": undefined,
                                  "fontSize": 34,
                                  "fontWeight": "400",
                                },
                                "h5": Object {
                                  "color": "rgba(0, 0, 0, 0.87)",
                                  "fontFamily": undefined,
                                  "fontSize": 24,
                                  "fontWeight": "400",
                                },
                                "h6": Object {
                                  "color": "rgba(0, 0, 0, 0.87)",
                                  "fontFamily": undefined,
                                  "fontSize": 20,
                                  "fontWeight": "500",
                                },
                                "overline": Object {
                                  "color": "rgba(0, 0, 0, 0.87)",
                                  "fontFamily": undefined,
                                  "fontSize": 12,
                                  "fontWeight": "400",
                                  "textTransform": "uppercase",
                                },
                                "subtitle1": Object {
                                  "color": "rgba(0, 0, 0, 0.87)",
                                  "fontFamily": undefined,
                                  "fontSize": 16,
                                  "fontWeight": "400",
                                },
                                "subtitle2": Object {
                                  "color": "rgba(0, 0, 0, 0.87)",
                                  "fontFamily": undefined,
                                  "fontSize": 14,
                                  "fontWeight": "500",
                                },
                              },
                            },
                          },
                        },
                        "bluebase-dark" => Object {
                          "alternate": "bluebase-light",
                          "key": "bluebase-dark",
                          "mode": "dark",
                          "name": "BlueBase Dark",
                          "preload": false,
                          "value": Promise {
                            "_40": 0,
                            "_55": Object {
                              "components": Object {},
                              "elevation": [Function],
                              "palette": Object {
                                "action": Object {
                                  "active": "#ffffff",
                                  "disabled": "rgba(255, 255, 255, 0.3)",
                                  "disabledBackground": "rgba(255, 255, 255, 0.12)",
                                  "hover": "rgba(255, 255, 255, 0.1)",
                                  "hoverOpacity": 0.1,
                                  "selected": "rgba(255, 255, 255, 0.2)",
                                },
                                "background": Object {
                                  "card": "#424242",
                                  "dark": "#202020",
                                  "default": "#303030",
                                  "light": "#404040",
                                },
                                "divider": "rgba(255, 255, 255, 0.12)",
                                "error": Object {
                                  "contrastText": "#fff",
                                  "dark": "#d32f2f",
                                  "light": "#e57373",
                                  "main": "#f44336",
                                },
                                "primary": Object {
                                  "contrastText": "#fff",
                                  "dark": "#303f9f",
                                  "light": "#7986cb",
                                  "main": "#3f51b5",
                                },
                                "secondary": Object {
                                  "contrastText": "#fff",
                                  "dark": "#c51162",
                                  "light": "#ff4081",
                                  "main": "#f50057",
                                },
                                "success": Object {
                                  "contrastText": "#fff",
                                  "dark": "#388e3c",
                                  "light": "#81c784",
                                  "main": "#4caf50",
                                },
                                "text": Object {
                                  "disabled": "rgba(255, 255, 255, 0.5)",
                                  "hint": "rgba(255, 255, 255, 0.5)",
                                  "icon": "rgba(255, 255, 255, 0.5)",
                                  "primary": "#ffffff",
                                  "secondary": "rgba(255, 255, 255, 0.7)",
                                },
                                "warning": Object {
                                  "contrastText": "#fff",
                                  "dark": "#ffa000",
                                  "light": "#ffd54f",
                                  "main": "#ffc107",
                                },
                              },
                              "shape": Object {
                                "borderRadius": 4,
                              },
                              "spacing": Object {
                                "unit": 8,
                              },
                              "typography": Object {
                                "body1": Object {
                                  "color": "#ffffff",
                                  "fontFamily": undefined,
                                  "fontSize": 16,
                                  "fontWeight": "400",
                                },
                                "body2": Object {
                                  "color": "#ffffff",
                                  "fontFamily": undefined,
                                  "fontSize": 14,
                                  "fontWeight": "400",
                                },
                                "button": Object {
                                  "color": "#ffffff",
                                  "fontFamily": undefined,
                                  "fontSize": 14,
                                  "fontWeight": "500",
                                  "textTransform": "uppercase",
                                },
                                "caption": Object {
                                  "color": "#ffffff",
                                  "fontFamily": undefined,
                                  "fontSize": 12,
                                  "fontWeight": "400",
                                },
                                "h1": Object {
                                  "color": "#ffffff",
                                  "fontFamily": undefined,
                                  "fontSize": 96,
                                  "fontWeight": "300",
                                },
                                "h2": Object {
                                  "color": "#ffffff",
                                  "fontFamily": undefined,
                                  "fontSize": 60,
                                  "fontWeight": "300",
                                },
                                "h3": Object {
                                  "color": "#ffffff",
                                  "fontFamily": undefined,
                                  "fontSize": 48,
                                  "fontWeight": "400",
                                },
                                "h4": Object {
                                  "color": "#ffffff",
                                  "fontFamily": undefined,
                                  "fontSize": 34,
                                  "fontWeight": "400",
                                },
                                "h5": Object {
                                  "color": "#ffffff",
                                  "fontFamily": undefined,
                                  "fontSize": 24,
                                  "fontWeight": "400",
                                },
                                "h6": Object {
                                  "color": "#ffffff",
                                  "fontFamily": undefined,
                                  "fontSize": 20,
                                  "fontWeight": "500",
                                },
                                "overline": Object {
                                  "color": "#ffffff",
                                  "fontFamily": undefined,
                                  "fontSize": 12,
                                  "fontWeight": "400",
                                  "textTransform": "uppercase",
                                },
                                "subtitle1": Object {
                                  "color": "#ffffff",
                                  "fontFamily": undefined,
                                  "fontSize": 16,
                                  "fontWeight": "400",
                                },
                                "subtitle2": Object {
                                  "color": "#ffffff",
                                  "fontFamily": undefined,
                                  "fontSize": 14,
                                  "fontWeight": "500",
                                },
                              },
                            },
                            "_65": 1,
                            "_72": null,
                            "isAsync": false,
                            "loaded": true,
                            "module": Object {
                              "components": Object {},
                              "elevation": [Function],
                              "palette": Object {
                                "action": Object {
                                  "active": "#ffffff",
                                  "disabled": "rgba(255, 255, 255, 0.3)",
                                  "disabledBackground": "rgba(255, 255, 255, 0.12)",
                                  "hover": "rgba(255, 255, 255, 0.1)",
                                  "hoverOpacity": 0.1,
                                  "selected": "rgba(255, 255, 255, 0.2)",
                                },
                                "background": Object {
                                  "card": "#424242",
                                  "dark": "#202020",
                                  "default": "#303030",
                                  "light": "#404040",
                                },
                                "divider": "rgba(255, 255, 255, 0.12)",
                                "error": Object {
                                  "contrastText": "#fff",
                                  "dark": "#d32f2f",
                                  "light": "#e57373",
                                  "main": "#f44336",
                                },
                                "primary": Object {
                                  "contrastText": "#fff",
                                  "dark": "#303f9f",
                                  "light": "#7986cb",
                                  "main": "#3f51b5",
                                },
                                "secondary": Object {
                                  "contrastText": "#fff",
                                  "dark": "#c51162",
                                  "light": "#ff4081",
                                  "main": "#f50057",
                                },
                                "success": Object {
                                  "contrastText": "#fff",
                                  "dark": "#388e3c",
                                  "light": "#81c784",
                                  "main": "#4caf50",
                                },
                                "text": Object {
                                  "disabled": "rgba(255, 255, 255, 0.5)",
                                  "hint": "rgba(255, 255, 255, 0.5)",
                                  "icon": "rgba(255, 255, 255, 0.5)",
                                  "primary": "#ffffff",
                                  "secondary": "rgba(255, 255, 255, 0.7)",
                                },
                                "warning": Object {
                                  "contrastText": "#fff",
                                  "dark": "#ffa000",
                                  "light": "#ffd54f",
                                  "main": "#ffc107",
                                },
                              },
                              "shape": Object {
                                "borderRadius": 4,
                              },
                              "spacing": Object {
                                "unit": 8,
                              },
                              "typography": Object {
                                "body1": Object {
                                  "color": "#ffffff",
                                  "fontFamily": undefined,
                                  "fontSize": 16,
                                  "fontWeight": "400",
                                },
                                "body2": Object {
                                  "color": "#ffffff",
                                  "fontFamily": undefined,
                                  "fontSize": 14,
                                  "fontWeight": "400",
                                },
                                "button": Object {
                                  "color": "#ffffff",
                                  "fontFamily": undefined,
                                  "fontSize": 14,
                                  "fontWeight": "500",
                                  "textTransform": "uppercase",
                                },
                                "caption": Object {
                                  "color": "#ffffff",
                                  "fontFamily": undefined,
                                  "fontSize": 12,
                                  "fontWeight": "400",
                                },
                                "h1": Object {
                                  "color": "#ffffff",
                                  "fontFamily": undefined,
                                  "fontSize": 96,
                                  "fontWeight": "300",
                                },
                                "h2": Object {
                                  "color": "#ffffff",
                                  "fontFamily": undefined,
                                  "fontSize": 60,
                                  "fontWeight": "300",
                                },
                                "h3": Object {
                                  "color": "#ffffff",
                                  "fontFamily": undefined,
                                  "fontSize": 48,
                                  "fontWeight": "400",
                                },
                                "h4": Object {
                                  "color": "#ffffff",
                                  "fontFamily": undefined,
                                  "fontSize": 34,
                                  "fontWeight": "400",
                                },
                                "h5": Object {
                                  "color": "#ffffff",
                                  "fontFamily": undefined,
                                  "fontSize": 24,
                                  "fontWeight": "400",
                                },
                                "h6": Object {
                                  "color": "#ffffff",
                                  "fontFamily": undefined,
                                  "fontSize": 20,
                                  "fontWeight": "500",
                                },
                                "overline": Object {
                                  "color": "#ffffff",
                                  "fontFamily": undefined,
                                  "fontSize": 12,
                                  "fontWeight": "400",
                                  "textTransform": "uppercase",
                                },
                                "subtitle1": Object {
                                  "color": "#ffffff",
                                  "fontFamily": undefined,
                                  "fontSize": 16,
                                  "fontWeight": "400",
                                },
                                "subtitle2": Object {
                                  "color": "#ffffff",
                                  "fontFamily": undefined,
                                  "fontSize": 14,
                                  "fontWeight": "500",
                                },
                              },
                            },
                          },
                        },
                      },
                      "subscriptions": Map {},
                    },
                    "bootOptions": Object {
                      "assets": Object {},
                      "children": <Unknown />,
                      "components": Object {},
                      "configs": Object {
                        "plugin.apollo.httpLinkOptions": Object {
                          "uri": "http://graphql",
                        },
                      },
                      "filters": Object {},
                      "fonts": Object {},
                      "plugins": Array [
                        Object {
                          "categories": Array [],
                          "defaultConfigs": Object {
                            "plugin.apollo.clientOptions": Object {},
                            "plugin.apollo.httpLinkOptions": Object {},
                          },
                          "description": "🌍 A BlueBase Plugin that integrates Apollo GraphQL Client",
                          "enabled": true,
                          "key": "plugin-apollo",
                          "name": "Apollo Plugin",
                          "value": Object {
                            "assets": Object {},
                            "components": Object {
                              "ApolloConsumer": [Function],
                              "GraphqlMutation": [Function],
                              "GraphqlQuery": [Function],
                              "GraphqlSubscription": [Function],
                            },
                            "filters": Object {
                              "bluebase.boot.end": [Function],
                            },
                            "fonts": Object {},
                            "routes": undefined,
                            "themes": Object {},
                          },
                          "version": "1.0.0",
                        },
                        Object {
                          "categories": Array [
                            "ui",
                          ],
                          "defaultConfigs": Object {},
                          "description": "A utility to build pluggable components based on JSON schema!",
                          "enabled": true,
                          "key": "plugin-json-schema-components",
                          "name": "Json Schema Components",
                          "value": Object {
                            "assets": Object {},
                            "components": Object {
                              "BaseFormField": [Function],
                              "FormCheckboxInput": [Function],
                              "FormEmailInput": [Function],
                              "FormNumberInput": [Function],
                              "FormPasswordInput": [Function],
                              "FormPickerInput": [Function],
                              "FormRadioGroupInput": [Function],
                              "FormRangeInput": [Function],
                              "FormResetButton": [Function],
                              "FormStatus": [Function],
                              "FormStatusList": [Function],
                              "FormStatusListItem": [Function],
                              "FormSubmitButton": [Function],
                              "FormSwitchInput": [Function],
                              "FormTextInput": [Function],
                              "FormUrlInput": [Function],
                              "InlineFields": [Function],
                              "JsonForm": [Function],
                              "JsonGraphqlForm": [Function],
                              "JsonLayout": [Function],
                            },
                            "filters": Object {},
                            "fonts": Object {},
                            "routes": undefined,
                            "themes": Object {},
                          },
                          "version": "0.0.1",
                        },
                      ],
                      "themes": Array [],
                    },
                    "booted": true,
                  }
                }
                navigator={
                  Object {
                    "initialRouteName": "Root",
                    "routes": Array [
                      Object {
                        "name": "Root",
                        "navigationOptions": Object {
                          "header": null,
                        },
                        "navigator": Object {
                          "initialRouteName": "Home",
                          "routes": Array [
                            Object {
                              "exact": true,
                              "name": "Home",
                              "navigationOptions": Object {
                                "headerLeft": null,
                                "title": "BlueBase",
                              },
                              "path": "",
                              "screen": "HomeScreen",
                            },
                          ],
                          "type": "stack",
                        },
                        "path": "",
                      },
                    ],
                    "type": "switch",
                  }
                }
              >
                <Component
                  BB={
                    BlueBase {
                      "Analytics": Analytics {
                        "BB": [Circular],
                      },
                      "Assets": AssetRegistry {
                        "BB": [Circular],
                        "data": Map {
                          "Logo" => Object {
                            "key": "Logo",
                            "preload": false,
                            "type": "unknown",
                            "value": Object {
                              "uri": "test-file-stub",
                            },
                          },
                          "LogoSquare" => Object {
                            "key": "LogoSquare",
                            "preload": false,
                            "type": "unknown",
                            "value": Object {
                              "uri": "test-file-stub",
                            },
                          },
                        },
                        "subscriptions": Map {},
                      },
                      "Components": ComponentRegistry {
                        "BB": [Circular],
                        "data": Map {
                          "BlueBaseContent" => Object {
                            "applyStyles": true,
                            "hocs": Array [
                              [Function],
                            ],
                            "isAsync": false,
                            "key": "BlueBaseContent",
                            "preload": false,
                            "value": Promise {
                              "_40": 0,
                              "_55": [Function],
                              "_65": 1,
                              "_72": null,
                              "isAsync": false,
                              "loaded": true,
                              "module": [Function],
                            },
                          },
                          "BlueBaseFilter" => Object {
                            "applyStyles": false,
                            "hocs": Array [],
                            "isAsync": false,
                            "key": "BlueBaseFilter",
                            "preload": false,
                            "value": Promise {
                              "_40": 0,
                              "_55": [Function],
                              "_65": 1,
                              "_72": null,
                              "isAsync": false,
                              "loaded": true,
                              "module": [Function],
                            },
                          },
                          "BlueBaseImage" => Object {
                            "applyStyles": true,
                            "hocs": Array [],
                            "isAsync": false,
                            "key": "BlueBaseImage",
                            "preload": false,
                            "value": Promise {
                              "_40": 0,
                              "_55": [Function],
                              "_65": 1,
                              "_72": null,
                              "isAsync": false,
                              "loaded": true,
                              "module": [Function],
                            },
                          },
                          "ComponentState" => Object {
                            "applyStyles": true,
                            "hocs": Array [],
                            "isAsync": false,
                            "key": "ComponentState",
                            "preload": false,
                            "value": Promise {
                              "_40": 0,
                              "_55": [Function],
                              "_65": 1,
                              "_72": null,
                              "isAsync": false,
                              "loaded": true,
                              "module": [Function],
                            },
                          },
                          "DataObserver" => Object {
                            "applyStyles": true,
                            "hocs": Array [],
                            "isAsync": false,
                            "key": "DataObserver",
                            "preload": false,
                            "value": Promise {
                              "_40": 0,
                              "_55": [Function],
                              "_65": 1,
                              "_72": null,
                              "isAsync": false,
                              "loaded": true,
                              "module": [Function],
                            },
                          },
                          "DynamicIcon" => Object {
                            "applyStyles": true,
                            "hocs": Array [],
                            "isAsync": false,
                            "key": "DynamicIcon",
                            "preload": false,
                            "value": Promise {
                              "_40": 0,
                              "_55": [Function],
                              "_65": 1,
                              "_72": null,
                              "isAsync": false,
                              "loaded": true,
                              "module": [Function],
                            },
                          },
                          "EmptyState" => Object {
                            "applyStyles": true,
                            "hocs": Array [],
                            "isAsync": false,
                            "key": "EmptyState",
                            "preload": false,
                            "value": Promise {
                              "_40": 0,
                              "_55": [Function],
                              "_65": 1,
                              "_72": null,
                              "isAsync": false,
                              "loaded": true,
                              "module": [Function],
                            },
                          },
                          "ErrorObserver" => Object {
                            "applyStyles": true,
                            "hocs": Array [],
                            "isAsync": false,
                            "key": "ErrorObserver",
                            "preload": false,
                            "value": Promise {
                              "_40": 0,
                              "_55": [Function],
                              "_65": 1,
                              "_72": null,
                              "isAsync": false,
                              "loaded": true,
                              "module": [Function],
                            },
                          },
                          "ErrorState" => Object {
                            "applyStyles": true,
                            "hocs": Array [],
                            "isAsync": false,
                            "key": "ErrorState",
                            "preload": false,
                            "value": Promise {
                              "_40": 0,
                              "_55": [Function],
                              "_65": 1,
                              "_72": null,
                              "isAsync": false,
                              "loaded": true,
                              "module": [Function],
                            },
                          },
                          "FormattedMessage" => Object {
                            "applyStyles": true,
                            "hocs": Array [],
                            "isAsync": false,
                            "key": "FormattedMessage",
                            "preload": false,
                            "value": Promise {
                              "_40": 0,
                              "_55": [Function],
                              "_65": 1,
                              "_72": null,
                              "isAsync": false,
                              "loaded": true,
                              "module": [Function],
                            },
                          },
                          "HomeScreen" => Object {
                            "applyStyles": true,
                            "hocs": Array [],
                            "isAsync": false,
                            "key": "HomeScreen",
                            "preload": false,
                            "value": Promise {
                              "_40": 0,
                              "_55": [Function],
                              "_65": 1,
                              "_72": null,
                              "isAsync": false,
                              "loaded": true,
                              "module": [Function],
                            },
                          },
                          "HoverObserver" => Object {
                            "applyStyles": true,
                            "hocs": Array [],
                            "isAsync": false,
                            "key": "HoverObserver",
                            "preload": false,
                            "value": Promise {
                              "_40": 0,
                              "_55": [Function],
                              "_65": 1,
                              "_72": null,
                              "isAsync": false,
                              "loaded": true,
                              "module": [Function],
                            },
                          },
                          "Icon" => Object {
                            "applyStyles": true,
                            "hocs": Array [],
                            "isAsync": false,
                            "key": "Icon",
                            "preload": false,
                            "value": Promise {
                              "_40": 0,
                              "_55": [Function],
                              "_65": 1,
                              "_72": null,
                              "isAsync": false,
                              "loaded": true,
                              "module": [Function],
                            },
                          },
                          "Link" => Object {
                            "applyStyles": true,
                            "hocs": Array [],
                            "isAsync": false,
                            "key": "Link",
                            "preload": false,
                            "value": Promise {
                              "_40": 0,
                              "_55": [Function],
                              "_65": 1,
                              "_72": null,
                              "isAsync": false,
                              "loaded": true,
                              "module": [Function],
                            },
                          },
                          "LoadingState" => Object {
                            "applyStyles": true,
                            "hocs": Array [],
                            "isAsync": false,
                            "key": "LoadingState",
                            "preload": false,
                            "value": Promise {
                              "_40": 0,
                              "_55": [Function],
                              "_65": 1,
                              "_72": null,
                              "isAsync": false,
                              "loaded": true,
                              "module": [Function],
                            },
                          },
                          "Navigation" => Object {
                            "applyStyles": true,
                            "hocs": Array [],
                            "isAsync": false,
                            "key": "Navigation",
                            "preload": false,
                            "value": Promise {
                              "_40": 0,
                              "_55": [Function],
                              "_65": 1,
                              "_72": null,
                              "isAsync": false,
                              "loaded": true,
                              "module": [Function],
                            },
                          },
                          "NavigationActions" => Object {
                            "applyStyles": true,
                            "hocs": Array [],
                            "isAsync": false,
                            "key": "NavigationActions",
                            "preload": false,
                            "value": Promise {
                              "_40": 0,
                              "_55": [Function],
                              "_65": 1,
                              "_72": null,
                              "isAsync": false,
                              "loaded": true,
                              "module": [Function],
                            },
                          },
                          "Noop" => Object {
                            "applyStyles": false,
                            "hocs": Array [],
                            "isAsync": false,
                            "key": "Noop",
                            "preload": false,
                            "value": Promise {
                              "_40": 0,
                              "_55": [Function],
                              "_65": 1,
                              "_72": null,
                              "isAsync": false,
                              "loaded": true,
                              "module": [Function],
                            },
                          },
                          "PluginIcon" => Object {
                            "applyStyles": true,
                            "hocs": Array [],
                            "isAsync": false,
                            "key": "PluginIcon",
                            "preload": false,
                            "value": Promise {
                              "_40": 0,
                              "_55": [Function],
                              "_65": 1,
                              "_72": null,
                              "isAsync": false,
                              "loaded": true,
                              "module": [Function],
                            },
                          },
                          "Redirect" => Object {
                            "applyStyles": false,
                            "hocs": Array [],
                            "isAsync": false,
                            "key": "Redirect",
                            "preload": false,
                            "value": Promise {
                              "_40": 0,
                              "_55": [Function],
                              "_65": 1,
                              "_72": null,
                              "isAsync": false,
                              "loaded": true,
                              "module": [Function],
                            },
                          },
                          "StatefulComponent" => Object {
                            "applyStyles": true,
                            "hocs": Array [],
                            "isAsync": false,
                            "key": "StatefulComponent",
                            "preload": false,
                            "value": Promise {
                              "_40": 0,
                              "_55": [Function],
                              "_65": 1,
                              "_72": null,
                              "isAsync": false,
                              "loaded": true,
                              "module": [Function],
                            },
                          },
                          "TouchableItem" => Object {
                            "applyStyles": true,
                            "hocs": Array [],
                            "isAsync": false,
                            "key": "TouchableItem",
                            "preload": false,
                            "value": Promise {
                              "_40": 0,
                              "_55": [Function],
                              "_65": 1,
                              "_72": null,
                              "isAsync": false,
                              "loaded": true,
                              "module": [Function],
                            },
                          },
                          "WaitObserver" => Object {
                            "applyStyles": true,
                            "hocs": Array [],
                            "isAsync": false,
                            "key": "WaitObserver",
                            "preload": false,
                            "value": Promise {
                              "_40": 0,
                              "_55": [Function],
                              "_65": 1,
                              "_72": null,
                              "isAsync": false,
                              "loaded": true,
                              "module": [Function],
                            },
                          },
                          "ActivityIndicator" => Object {
                            "applyStyles": true,
                            "hocs": Array [],
                            "isAsync": false,
                            "key": "ActivityIndicator",
                            "preload": false,
                            "value": Promise {
                              "_40": 0,
                              "_55": [Function],
                              "_65": 1,
                              "_72": null,
                              "isAsync": false,
                              "loaded": true,
                              "module": [Function],
                            },
                          },
                          "Button" => Object {
                            "applyStyles": true,
                            "hocs": Array [],
                            "isAsync": false,
                            "key": "Button",
                            "preload": false,
                            "value": Promise {
                              "_40": 0,
                              "_55": [Function],
                              "_65": 1,
                              "_72": null,
                              "isAsync": false,
                              "loaded": true,
                              "module": [Function],
                            },
                          },
                          "FlatList" => Object {
                            "applyStyles": true,
                            "hocs": Array [],
                            "isAsync": false,
                            "key": "FlatList",
                            "preload": false,
                            "value": Promise {
                              "_40": 0,
                              "_55": [Function],
                              "_65": 1,
                              "_72": null,
                              "isAsync": false,
                              "loaded": true,
                              "module": [Function],
                            },
                          },
                          "Image" => Object {
                            "applyStyles": true,
                            "hocs": Array [],
                            "isAsync": false,
                            "key": "Image",
                            "preload": false,
                            "value": Promise {
                              "_40": 0,
                              "_55": [Function],
                              "_65": 1,
                              "_72": null,
                              "isAsync": false,
                              "loaded": true,
                              "module": [Function],
                            },
                          },
                          "ImageBackground" => Object {
                            "applyStyles": true,
                            "hocs": Array [],
                            "isAsync": false,
                            "key": "ImageBackground",
                            "preload": false,
                            "value": Promise {
                              "_40": 0,
                              "_55": [Function],
                              "_65": 1,
                              "_72": null,
                              "isAsync": false,
                              "loaded": true,
                              "module": [Function],
                            },
                          },
                          "Picker" => Object {
                            "applyStyles": true,
                            "hocs": Array [],
                            "isAsync": false,
                            "key": "Picker",
                            "preload": false,
                            "value": Promise {
                              "_40": 0,
                              "_55": [Function],
                              "_65": 1,
                              "_72": null,
                              "isAsync": false,
                              "loaded": true,
                              "module": [Function],
                            },
                          },
                          "SafeAreaView" => Object {
                            "applyStyles": true,
                            "hocs": Array [],
                            "isAsync": false,
                            "key": "SafeAreaView",
                            "preload": false,
                            "value": Promise {
                              "_40": 0,
                              "_55": [Function],
                              "_65": 1,
                              "_72": null,
                              "isAsync": false,
                              "loaded": true,
                              "module": [Function],
                            },
                          },
                          "ScrollView" => Object {
                            "applyStyles": true,
                            "hocs": Array [],
                            "isAsync": false,
                            "key": "ScrollView",
                            "preload": false,
                            "value": Promise {
                              "_40": 0,
                              "_55": [MockFunction],
                              "_65": 1,
                              "_72": null,
                              "isAsync": false,
                              "loaded": true,
                              "module": [MockFunction],
                            },
                          },
                          "Slider" => Object {
                            "applyStyles": true,
                            "hocs": Array [],
                            "isAsync": false,
                            "key": "Slider",
                            "preload": false,
                            "value": Promise {
                              "_40": 0,
                              "_55": Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "defaultProps": Object {
                                  "disabled": false,
                                  "maximumValue": 1,
                                  "minimumValue": 0,
                                  "step": 0,
                                  "value": 0,
                                },
                                "render": [Function],
                              },
                              "_65": 1,
                              "_72": null,
                              "isAsync": false,
                              "loaded": true,
                              "module": Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "defaultProps": Object {
                                  "disabled": false,
                                  "maximumValue": 1,
                                  "minimumValue": 0,
                                  "step": 0,
                                  "value": 0,
                                },
                                "render": [Function],
                              },
                            },
                          },
                          "Switch" => Object {
                            "applyStyles": true,
                            "hocs": Array [],
                            "isAsync": false,
                            "key": "Switch",
                            "preload": false,
                            "value": Promise {
                              "_40": 0,
                              "_55": [Function],
                              "_65": 1,
                              "_72": null,
                              "isAsync": false,
                              "loaded": true,
                              "module": [Function],
                            },
                          },
                          "Text" => Object {
                            "applyStyles": true,
                            "hocs": Array [],
                            "isAsync": false,
                            "key": "Text",
                            "preload": false,
                            "value": Promise {
                              "_40": 0,
                              "_55": [Function],
                              "_65": 1,
                              "_72": null,
                              "isAsync": false,
                              "loaded": true,
                              "module": [Function],
                            },
                          },
                          "TextInput" => Object {
                            "applyStyles": true,
                            "hocs": Array [],
                            "isAsync": false,
                            "key": "TextInput",
                            "preload": false,
                            "value": Promise {
                              "_40": 0,
                              "_55": [Function],
                              "_65": 1,
                              "_72": null,
                              "isAsync": false,
                              "loaded": true,
                              "module": [Function],
                            },
                          },
                          "View" => Object {
                            "applyStyles": false,
                            "hocs": Array [],
                            "isAsync": false,
                            "key": "View",
                            "preload": false,
                            "value": Promise {
                              "_40": 0,
                              "_55": [Function],
                              "_65": 1,
                              "_72": null,
                              "isAsync": false,
                              "loaded": true,
                              "module": [Function],
                            },
                          },
                          "H1" => Object {
                            "applyStyles": true,
                            "hocs": Array [],
                            "isAsync": false,
                            "key": "H1",
                            "preload": false,
                            "styles": [Function],
                            "value": Promise {
                              "_40": 0,
                              "_55": [Function],
                              "_65": 1,
                              "_72": null,
                              "isAsync": false,
                              "loaded": true,
                              "module": [Function],
                            },
                          },
                          "H2" => Object {
                            "applyStyles": true,
                            "hocs": Array [],
                            "isAsync": false,
                            "key": "H2",
                            "preload": false,
                            "styles": [Function],
                            "value": Promise {
                              "_40": 0,
                              "_55": [Function],
                              "_65": 1,
                              "_72": null,
                              "isAsync": false,
                              "loaded": true,
                              "module": [Function],
                            },
                          },
                          "H3" => Object {
                            "applyStyles": true,
                            "hocs": Array [],
                            "isAsync": false,
                            "key": "H3",
                            "preload": false,
                            "styles": [Function],
                            "value": Promise {
                              "_40": 0,
                              "_55": [Function],
                              "_65": 1,
                              "_72": null,
                              "isAsync": false,
                              "loaded": true,
                              "module": [Function],
                            },
                          },
                          "H4" => Object {
                            "applyStyles": true,
                            "hocs": Array [],
                            "isAsync": false,
                            "key": "H4",
                            "preload": false,
                            "styles": [Function],
                            "value": Promise {
                              "_40": 0,
                              "_55": [Function],
                              "_65": 1,
                              "_72": null,
                              "isAsync": false,
                              "loaded": true,
                              "module": [Function],
                            },
                          },
                          "H5" => Object {
                            "applyStyles": true,
                            "hocs": Array [],
                            "isAsync": false,
                            "key": "H5",
                            "preload": false,
                            "styles": [Function],
                            "value": Promise {
                              "_40": 0,
                              "_55": [Function],
                              "_65": 1,
                              "_72": null,
                              "isAsync": false,
                              "loaded": true,
                              "module": [Function],
                            },
                          },
                          "H6" => Object {
                            "applyStyles": true,
                            "hocs": Array [],
                            "isAsync": false,
                            "key": "H6",
                            "preload": false,
                            "styles": [Function],
                            "value": Promise {
                              "_40": 0,
                              "_55": [Function],
                              "_65": 1,
                              "_72": null,
                              "isAsync": false,
                              "loaded": true,
                              "module": [Function],
                            },
                          },
                          "Subtitle1" => Object {
                            "applyStyles": true,
                            "hocs": Array [],
                            "isAsync": false,
                            "key": "Subtitle1",
                            "preload": false,
                            "styles": [Function],
                            "value": Promise {
                              "_40": 0,
                              "_55": [Function],
                              "_65": 1,
                              "_72": null,
                              "isAsync": false,
                              "loaded": true,
                              "module": [Function],
                            },
                          },
                          "Subtitle2" => Object {
                            "applyStyles": true,
                            "hocs": Array [],
                            "isAsync": false,
                            "key": "Subtitle2",
                            "preload": false,
                            "styles": [Function],
                            "value": Promise {
                              "_40": 0,
                              "_55": [Function],
                              "_65": 1,
                              "_72": null,
                              "isAsync": false,
                              "loaded": true,
                              "module": [Function],
                            },
                          },
                          "Body1" => Object {
                            "applyStyles": true,
                            "hocs": Array [],
                            "isAsync": false,
                            "key": "Body1",
                            "preload": false,
                            "styles": [Function],
                            "value": Promise {
                              "_40": 0,
                              "_55": [Function],
                              "_65": 1,
                              "_72": null,
                              "isAsync": false,
                              "loaded": true,
                              "module": [Function],
                            },
                          },
                          "Body2" => Object {
                            "applyStyles": true,
                            "hocs": Array [],
                            "isAsync": false,
                            "key": "Body2",
                            "preload": false,
                            "styles": [Function],
                            "value": Promise {
                              "_40": 0,
                              "_55": [Function],
                              "_65": 1,
                              "_72": null,
                              "isAsync": false,
                              "loaded": true,
                              "module": [Function],
                            },
                          },
                          "Caption" => Object {
                            "applyStyles": true,
                            "hocs": Array [],
                            "isAsync": false,
                            "key": "Caption",
                            "preload": false,
                            "styles": [Function],
                            "value": Promise {
                              "_40": 0,
                              "_55": [Function],
                              "_65": 1,
                              "_72": null,
                              "isAsync": false,
                              "loaded": true,
                              "module": [Function],
                            },
                          },
                          "Overline" => Object {
                            "applyStyles": true,
                            "hocs": Array [],
                            "isAsync": false,
                            "key": "Overline",
                            "preload": false,
                            "styles": [Function],
                            "value": Promise {
                              "_40": 0,
                              "_55": [Function],
                              "_65": 1,
                              "_72": null,
                              "isAsync": false,
                              "loaded": true,
                              "module": [Function],
                            },
                          },
                          "ApolloConsumer" => Object {
                            "applyStyles": true,
                            "hocs": Array [],
                            "isAsync": false,
                            "key": "ApolloConsumer",
                            "preload": false,
                            "value": Promise {
                              "_40": 0,
                              "_55": [Function],
                              "_65": 1,
                              "_72": null,
                              "isAsync": false,
                              "loaded": true,
                              "module": [Function],
                            },
                          },
                          "GraphqlMutation" => Object {
                            "applyStyles": true,
                            "hocs": Array [],
                            "isAsync": false,
                            "key": "GraphqlMutation",
                            "preload": false,
                            "value": Promise {
                              "_40": 0,
                              "_55": [Function],
                              "_65": 1,
                              "_72": null,
                              "isAsync": false,
                              "loaded": true,
                              "module": [Function],
                            },
                          },
                          "GraphqlQuery" => Object {
                            "applyStyles": true,
                            "hocs": Array [],
                            "isAsync": false,
                            "key": "GraphqlQuery",
                            "preload": false,
                            "value": Promise {
                              "_40": 0,
                              "_55": [Function],
                              "_65": 1,
                              "_72": null,
                              "isAsync": false,
                              "loaded": true,
                              "module": [Function],
                            },
                          },
                          "GraphqlSubscription" => Object {
                            "applyStyles": true,
                            "hocs": Array [],
                            "isAsync": false,
                            "key": "GraphqlSubscription",
                            "preload": false,
                            "value": Promise {
                              "_40": 0,
                              "_55": [Function],
                              "_65": 1,
                              "_72": null,
                              "isAsync": false,
                              "loaded": true,
                              "module": [Function],
                            },
                          },
                          "BaseFormField" => Object {
                            "applyStyles": true,
                            "hocs": Array [],
                            "isAsync": false,
                            "key": "BaseFormField",
                            "preload": false,
                            "value": Promise {
                              "_40": 0,
                              "_55": [Function],
                              "_65": 1,
                              "_72": null,
                              "isAsync": false,
                              "loaded": true,
                              "module": [Function],
                            },
                          },
                          "FormCheckboxInput" => Object {
                            "applyStyles": true,
                            "hocs": Array [],
                            "isAsync": false,
                            "key": "FormCheckboxInput",
                            "preload": false,
                            "value": Promise {
                              "_40": 0,
                              "_55": [Function],
                              "_65": 1,
                              "_72": null,
                              "isAsync": false,
                              "loaded": true,
                              "module": [Function],
                            },
                          },
                          "FormEmailInput" => Object {
                            "applyStyles": true,
                            "hocs": Array [],
                            "isAsync": false,
                            "key": "FormEmailInput",
                            "preload": false,
                            "value": Promise {
                              "_40": 0,
                              "_55": [Function],
                              "_65": 1,
                              "_72": null,
                              "isAsync": false,
                              "loaded": true,
                              "module": [Function],
                            },
                          },
                          "FormNumberInput" => Object {
                            "applyStyles": true,
                            "hocs": Array [],
                            "isAsync": false,
                            "key": "FormNumberInput",
                            "preload": false,
                            "value": Promise {
                              "_40": 0,
                              "_55": [Function],
                              "_65": 1,
                              "_72": null,
                              "isAsync": false,
                              "loaded": true,
                              "module": [Function],
                            },
                          },
                          "FormPasswordInput" => Object {
                            "applyStyles": true,
                            "hocs": Array [],
                            "isAsync": false,
                            "key": "FormPasswordInput",
                            "preload": false,
                            "value": Promise {
                              "_40": 0,
                              "_55": [Function],
                              "_65": 1,
                              "_72": null,
                              "isAsync": false,
                              "loaded": true,
                              "module": [Function],
                            },
                          },
                          "FormPickerInput" => Object {
                            "applyStyles": true,
                            "hocs": Array [],
                            "isAsync": false,
                            "key": "FormPickerInput",
                            "preload": false,
                            "value": Promise {
                              "_40": 0,
                              "_55": [Function],
                              "_65": 1,
                              "_72": null,
                              "isAsync": false,
                              "loaded": true,
                              "module": [Function],
                            },
                          },
                          "FormRadioGroupInput" => Object {
                            "applyStyles": true,
                            "hocs": Array [],
                            "isAsync": false,
                            "key": "FormRadioGroupInput",
                            "preload": false,
                            "value": Promise {
                              "_40": 0,
                              "_55": [Function],
                              "_65": 1,
                              "_72": null,
                              "isAsync": false,
                              "loaded": true,
                              "module": [Function],
                            },
                          },
                          "FormRangeInput" => Object {
                            "applyStyles": true,
                            "hocs": Array [],
                            "isAsync": false,
                            "key": "FormRangeInput",
                            "preload": false,
                            "value": Promise {
                              "_40": 0,
                              "_55": [Function],
                              "_65": 1,
                              "_72": null,
                              "isAsync": false,
                              "loaded": true,
                              "module": [Function],
                            },
                          },
                          "FormResetButton" => Object {
                            "applyStyles": true,
                            "hocs": Array [],
                            "isAsync": false,
                            "key": "FormResetButton",
                            "preload": false,
                            "value": Promise {
                              "_40": 0,
                              "_55": [Function],
                              "_65": 1,
                              "_72": null,
                              "isAsync": false,
                              "loaded": true,
                              "module": [Function],
                            },
                          },
                          "FormStatus" => Object {
                            "applyStyles": true,
                            "hocs": Array [],
                            "isAsync": false,
                            "key": "FormStatus",
                            "preload": false,
                            "value": Promise {
                              "_40": 0,
                              "_55": [Function],
                              "_65": 1,
                              "_72": null,
                              "isAsync": false,
                              "loaded": true,
                              "module": [Function],
                            },
                          },
                          "FormStatusList" => Object {
                            "applyStyles": true,
                            "hocs": Array [],
                            "isAsync": false,
                            "key": "FormStatusList",
                            "preload": false,
                            "value": Promise {
                              "_40": 0,
                              "_55": [Function],
                              "_65": 1,
                              "_72": null,
                              "isAsync": false,
                              "loaded": true,
                              "module": [Function],
                            },
                          },
                          "FormStatusListItem" => Object {
                            "applyStyles": true,
                            "hocs": Array [],
                            "isAsync": false,
                            "key": "FormStatusListItem",
                            "preload": false,
                            "value": Promise {
                              "_40": 0,
                              "_55": [Function],
                              "_65": 1,
                              "_72": null,
                              "isAsync": false,
                              "loaded": true,
                              "module": [Function],
                            },
                          },
                          "FormSubmitButton" => Object {
                            "applyStyles": true,
                            "hocs": Array [],
                            "isAsync": false,
                            "key": "FormSubmitButton",
                            "preload": false,
                            "value": Promise {
                              "_40": 0,
                              "_55": [Function],
                              "_65": 1,
                              "_72": null,
                              "isAsync": false,
                              "loaded": true,
                              "module": [Function],
                            },
                          },
                          "FormSwitchInput" => Object {
                            "applyStyles": true,
                            "hocs": Array [],
                            "isAsync": false,
                            "key": "FormSwitchInput",
                            "preload": false,
                            "value": Promise {
                              "_40": 0,
                              "_55": [Function],
                              "_65": 1,
                              "_72": null,
                              "isAsync": false,
                              "loaded": true,
                              "module": [Function],
                            },
                          },
                          "FormTextInput" => Object {
                            "applyStyles": true,
                            "hocs": Array [],
                            "isAsync": false,
                            "key": "FormTextInput",
                            "preload": false,
                            "value": Promise {
                              "_40": 0,
                              "_55": [Function],
                              "_65": 1,
                              "_72": null,
                              "isAsync": false,
                              "loaded": true,
                              "module": [Function],
                            },
                          },
                          "FormUrlInput" => Object {
                            "applyStyles": true,
                            "hocs": Array [],
                            "isAsync": false,
                            "key": "FormUrlInput",
                            "preload": false,
                            "value": Promise {
                              "_40": 0,
                              "_55": [Function],
                              "_65": 1,
                              "_72": null,
                              "isAsync": false,
                              "loaded": true,
                              "module": [Function],
                            },
                          },
                          "InlineFields" => Object {
                            "applyStyles": true,
                            "hocs": Array [],
                            "isAsync": false,
                            "key": "InlineFields",
                            "preload": false,
                            "value": Promise {
                              "_40": 0,
                              "_55": [Function],
                              "_65": 1,
                              "_72": null,
                              "isAsync": false,
                              "loaded": true,
                              "module": [Function],
                            },
                          },
                          "JsonForm" => Object {
                            "applyStyles": true,
                            "hocs": Array [],
                            "isAsync": false,
                            "key": "JsonForm",
                            "preload": false,
                            "value": Promise {
                              "_40": 0,
                              "_55": [Function],
                              "_65": 1,
                              "_72": null,
                              "isAsync": false,
                              "loaded": true,
                              "module": [Function],
                            },
                          },
                          "JsonGraphqlForm" => Object {
                            "applyStyles": true,
                            "hocs": Array [],
                            "isAsync": false,
                            "key": "JsonGraphqlForm",
                            "preload": false,
                            "value": Promise {
                              "_40": 0,
                              "_55": [Function],
                              "_65": 1,
                              "_72": null,
                              "isAsync": false,
                              "loaded": true,
                              "module": [Function],
                            },
                          },
                          "JsonLayout" => Object {
                            "applyStyles": true,
                            "hocs": Array [],
                            "isAsync": false,
                            "key": "JsonLayout",
                            "preload": false,
                            "value": Promise {
                              "_40": 0,
                              "_55": [Function],
                              "_65": 1,
                              "_72": null,
                              "isAsync": false,
                              "loaded": true,
                              "module": [Function],
                            },
                          },
                        },
                        "subscriptions": Map {},
                      },
                      "Configs": ConfigRegistry {
                        "BB": [Circular],
                        "data": Map {
                          "debug" => Object {
                            "key": "debug",
                            "value": true,
                          },
                          "development" => Object {
                            "key": "development",
                            "value": true,
                          },
                          "direction" => Object {
                            "key": "direction",
                            "value": "auto",
                          },
                          "locale" => Object {
                            "key": "locale",
                            "value": "en",
                          },
                          "locale.options" => Object {
                            "key": "locale.options",
                            "value": Object {
                              "en": "English",
                              "ur": "اُردُو",
                            },
                          },
                          "pluginRoutePathPrefix" => Object {
                            "key": "pluginRoutePathPrefix",
                            "value": "p",
                          },
                          "statusBarStyle" => Object {
                            "key": "statusBarStyle",
                            "value": "light-content",
                          },
                          "theme.mode" => Object {
                            "key": "theme.mode",
                            "value": "light",
                          },
                          "theme.name" => Object {
                            "key": "theme.name",
                            "value": "bluebase-light",
                          },
                          "theme.overrides" => Object {
                            "key": "theme.overrides",
                            "value": Object {},
                          },
                          "title" => Object {
                            "key": "title",
                            "value": "BlueBase",
                          },
                          "plugin.apollo.httpLinkOptions" => Object {
                            "key": "plugin.apollo.httpLinkOptions",
                            "value": Object {
                              "uri": "http://graphql",
                            },
                          },
                          "plugin.apollo.clientOptions" => Object {
                            "key": "plugin.apollo.clientOptions",
                            "value": Object {},
                          },
                        },
                        "subscriptions": Map {
                          "theme.name" => Map {
                            "_wmv3luo" => [Function],
                          },
                          "locale" => Map {
                            "_pyjjq59" => [Function],
                          },
                          "direction" => Map {
                            "_xwtcvgc" => [Function],
                          },
                        },
                      },
                      "Filters": FilterRegistry {
                        "BB": [Circular],
                        "data": Map {
                          "bluebase-assets-register-internal-default" => Object {
                            "event": "bluebase.assets.register.internal",
                            "key": "bluebase-assets-register-internal-default",
                            "preload": false,
                            "priority": 5,
                            "value": Promise {
                              "_40": 0,
                              "_55": [Function],
                              "_65": 1,
                              "_72": null,
                              "isAsync": false,
                              "loaded": true,
                              "module": [Function],
                            },
                          },
                          "bluebase-assets-register-default" => Object {
                            "event": "bluebase.assets.register",
                            "key": "bluebase-assets-register-default",
                            "preload": false,
                            "priority": 5,
                            "value": Promise {
                              "_40": 0,
                              "_55": [Function],
                              "_65": 1,
                              "_72": null,
                              "isAsync": false,
                              "loaded": true,
                              "module": [Function],
                            },
                          },
                          "bluebase-boot-default" => Object {
                            "event": "bluebase.boot",
                            "key": "bluebase-boot-default",
                            "preload": false,
                            "priority": 5,
                            "value": Promise {
                              "_40": 0,
                              "_55": [Function],
                              "_65": 1,
                              "_72": null,
                              "isAsync": false,
                              "loaded": true,
                              "module": [Function],
                            },
                          },
                          "system-boot-start-default" => Object {
                            "event": "bluebase.boot.start",
                            "key": "system-boot-start-default",
                            "preload": false,
                            "priority": 5,
                            "value": Promise {
                              "_40": 0,
                              "_55": [Function],
                              "_65": 1,
                              "_72": null,
                              "isAsync": false,
                              "loaded": true,
                              "module": [Function],
                            },
                          },
                          "system-preload-default" => Object {
                            "event": "bluebase.preload",
                            "key": "system-preload-default",
                            "preload": false,
                            "priority": 5,
                            "value": Promise {
                              "_40": 0,
                              "_55": [Function],
                              "_65": 1,
                              "_72": null,
                              "isAsync": false,
                              "loaded": true,
                              "module": [Function],
                            },
                          },
                          "bluebase-components-register-internal-default" => Object {
                            "event": "bluebase.components.register.internal",
                            "key": "bluebase-components-register-internal-default",
                            "preload": false,
                            "priority": 5,
                            "value": Promise {
                              "_40": 0,
                              "_55": [Function],
                              "_65": 1,
                              "_72": null,
                              "isAsync": false,
                              "loaded": true,
                              "module": [Function],
                            },
                          },
                          "bluebase-components-register-default" => Object {
                            "event": "bluebase.components.register",
                            "key": "bluebase-components-register-default",
                            "preload": false,
                            "priority": 5,
                            "value": Promise {
                              "_40": 0,
                              "_55": [Function],
                              "_65": 1,
                              "_72": null,
                              "isAsync": false,
                              "loaded": true,
                              "module": [Function],
                            },
                          },
                          "bluebase-configs-register-default" => Object {
                            "event": "bluebase.configs.register",
                            "key": "bluebase-configs-register-default",
                            "preload": false,
                            "priority": 5,
                            "value": Promise {
                              "_40": 0,
                              "_55": [Function],
                              "_65": 1,
                              "_72": null,
                              "isAsync": false,
                              "loaded": true,
                              "module": [Function],
                            },
                          },
                          "bluebase-fonts-register-default" => Object {
                            "event": "bluebase.fonts.register",
                            "key": "bluebase-fonts-register-default",
                            "preload": false,
                            "priority": 5,
                            "value": Promise {
                              "_40": 0,
                              "_55": [Function],
                              "_65": 1,
                              "_72": null,
                              "isAsync": false,
                              "loaded": true,
                              "module": [Function],
                            },
                          },
                          "bluebase-plugins-register-default" => Object {
                            "event": "bluebase.plugins.register",
                            "key": "bluebase-plugins-register-default",
                            "preload": false,
                            "priority": 5,
                            "value": Promise {
                              "_40": 0,
                              "_55": [Function],
                              "_65": 1,
                              "_72": null,
                              "isAsync": false,
                              "loaded": true,
                              "module": [Function],
                            },
                          },
                          "bluebase-plugins-initialize-all-default" => Object {
                            "event": "bluebase.plugins.initialize.all",
                            "key": "bluebase-plugins-initialize-all-default",
                            "preload": false,
                            "priority": 5,
                            "value": Promise {
                              "_40": 0,
                              "_55": [Function],
                              "_65": 1,
                              "_72": null,
                              "isAsync": false,
                              "loaded": true,
                              "module": [Function],
                            },
                          },
                          "bluebase-plugins-initialize-default" => Object {
                            "event": "bluebase.plugins.initialize",
                            "key": "bluebase-plugins-initialize-default",
                            "preload": false,
                            "priority": 5,
                            "value": Promise {
                              "_40": 0,
                              "_55": [Function],
                              "_65": 1,
                              "_72": null,
                              "isAsync": false,
                              "loaded": true,
                              "module": [Function],
                            },
                          },
                          "bluebase-navigator-root-internal-default" => Object {
                            "event": "bluebase.navigator.root",
                            "key": "bluebase-navigator-root-internal-default",
                            "preload": false,
                            "priority": 5,
                            "value": Promise {
                              "_40": 0,
                              "_55": [Function],
                              "_65": 1,
                              "_72": null,
                              "isAsync": false,
                              "loaded": true,
                              "module": [Function],
                            },
                          },
                          "bluebase-navigator-main-internal-default" => Object {
                            "event": "bluebase.navigator.main",
                            "key": "bluebase-navigator-main-internal-default",
                            "preload": false,
                            "priority": 5,
                            "value": Promise {
                              "_40": 0,
                              "_55": [Function],
                              "_65": 1,
                              "_72": null,
                              "isAsync": false,
                              "loaded": true,
                              "module": [Function],
                            },
                          },
                          "bluebase-themes-register-internal-default" => Object {
                            "event": "bluebase.themes.register",
                            "key": "bluebase-themes-register-internal-default",
                            "preload": false,
                            "priority": 5,
                            "value": Promise {
                              "_40": 0,
                              "_55": [Function],
                              "_65": 1,
                              "_72": null,
                              "isAsync": false,
                              "loaded": true,
                              "module": [Function],
                            },
                          },
                          "_kxselc3" => Object {
                            "event": "bluebase.boot.end",
                            "key": "_kxselc3",
                            "preload": false,
                            "priority": 10,
                            "value": Promise {
                              "_40": 0,
                              "_55": [Function],
                              "_65": 1,
                              "_72": null,
                              "isAsync": false,
                              "loaded": true,
                              "module": [Function],
                            },
                          },
                        },
                        "subscriptions": Map {},
                      },
                      "Fonts": FontRegistry {
                        "BB": [Circular],
                        "data": Map {},
                        "subscriptions": Map {},
                      },
                      "Logger": Logger {
                        "BB": [Circular],
                      },
                      "Plugins": PluginRegistry {
                        "BB": [Circular],
                        "data": Map {
                          "plugin-apollo" => Object {
                            "categories": Array [],
                            "defaultConfigs": Object {
                              "plugin.apollo.clientOptions": Object {},
                              "plugin.apollo.httpLinkOptions": Object {},
                            },
                            "description": "🌍 A BlueBase Plugin that integrates Apollo GraphQL Client",
                            "enabled": true,
                            "key": "plugin-apollo",
                            "name": "Apollo Plugin",
                            "path": undefined,
                            "preload": false,
                            "value": Promise {
                              "_40": 0,
                              "_55": Object {
                                "assets": Object {},
                                "components": Object {
                                  "ApolloConsumer": [Function],
                                  "GraphqlMutation": [Function],
                                  "GraphqlQuery": [Function],
                                  "GraphqlSubscription": [Function],
                                },
                                "filters": Object {
                                  "bluebase.boot.end": [Function],
                                },
                                "fonts": Object {},
                                "routes": undefined,
                                "themes": Object {},
                              },
                              "_65": 1,
                              "_72": null,
                              "isAsync": false,
                              "loaded": true,
                              "module": Object {
                                "assets": Object {},
                                "components": Object {
                                  "ApolloConsumer": [Function],
                                  "GraphqlMutation": [Function],
                                  "GraphqlQuery": [Function],
                                  "GraphqlSubscription": [Function],
                                },
                                "filters": Object {
                                  "bluebase.boot.end": [Function],
                                },
                                "fonts": Object {},
                                "routes": undefined,
                                "themes": Object {},
                              },
                            },
                            "version": "1.0.0",
                          },
                          "plugin-json-schema-components" => Object {
                            "categories": Array [
                              "ui",
                            ],
                            "defaultConfigs": Object {},
                            "description": "A utility to build pluggable components based on JSON schema!",
                            "enabled": true,
                            "key": "plugin-json-schema-components",
                            "name": "Json Schema Components",
                            "path": undefined,
                            "preload": false,
                            "value": Promise {
                              "_40": 0,
                              "_55": Object {
                                "assets": Object {},
                                "components": Object {
                                  "BaseFormField": [Function],
                                  "FormCheckboxInput": [Function],
                                  "FormEmailInput": [Function],
                                  "FormNumberInput": [Function],
                                  "FormPasswordInput": [Function],
                                  "FormPickerInput": [Function],
                                  "FormRadioGroupInput": [Function],
                                  "FormRangeInput": [Function],
                                  "FormResetButton": [Function],
                                  "FormStatus": [Function],
                                  "FormStatusList": [Function],
                                  "FormStatusListItem": [Function],
                                  "FormSubmitButton": [Function],
                                  "FormSwitchInput": [Function],
                                  "FormTextInput": [Function],
                                  "FormUrlInput": [Function],
                                  "InlineFields": [Function],
                                  "JsonForm": [Function],
                                  "JsonGraphqlForm": [Function],
                                  "JsonLayout": [Function],
                                },
                                "filters": Object {},
                                "fonts": Object {},
                                "routes": undefined,
                                "themes": Object {},
                              },
                              "_65": 1,
                              "_72": null,
                              "isAsync": false,
                              "loaded": true,
                              "module": Object {
                                "assets": Object {},
                                "components": Object {
                                  "BaseFormField": [Function],
                                  "FormCheckboxInput": [Function],
                                  "FormEmailInput": [Function],
                                  "FormNumberInput": [Function],
                                  "FormPasswordInput": [Function],
                                  "FormPickerInput": [Function],
                                  "FormRadioGroupInput": [Function],
                                  "FormRangeInput": [Function],
                                  "FormResetButton": [Function],
                                  "FormStatus": [Function],
                                  "FormStatusList": [Function],
                                  "FormStatusListItem": [Function],
                                  "FormSubmitButton": [Function],
                                  "FormSwitchInput": [Function],
                                  "FormTextInput": [Function],
                                  "FormUrlInput": [Function],
                                  "InlineFields": [Function],
                                  "JsonForm": [Function],
                                  "JsonGraphqlForm": [Function],
                                  "JsonLayout": [Function],
                                },
                                "filters": Object {},
                                "fonts": Object {},
                                "routes": undefined,
                                "themes": Object {},
                              },
                            },
                            "version": "0.0.1",
                          },
                        },
                        "subscriptions": Map {},
                      },
                      "Themes": ThemeRegistry {
                        "BB": [Circular],
                        "data": Map {
                          "bluebase-light" => Object {
                            "alternate": "bluebase-dark",
                            "key": "bluebase-light",
                            "mode": "light",
                            "name": "BlueBase Light",
                            "preload": false,
                            "value": Promise {
                              "_40": 0,
                              "_55": Object {
                                "components": Object {},
                                "elevation": [Function],
                                "palette": Object {
                                  "action": Object {
                                    "active": "rgba(0, 0, 0, 0.54)",
                                    "disabled": "rgba(0, 0, 0, 0.26)",
                                    "disabledBackground": "rgba(0, 0, 0, 0.12)",
                                    "hover": "rgba(0, 0, 0, 0.08)",
                                    "hoverOpacity": 0.08,
                                    "selected": "rgba(0, 0, 0, 0.14)",
                                  },
                                  "background": Object {
                                    "card": "#ffffff",
                                    "dark": "#eeeeee",
                                    "default": "#f5f5f5",
                                    "light": "#fafafa",
                                  },
                                  "divider": "rgba(0, 0, 0, 0.12)",
                                  "error": Object {
                                    "contrastText": "#fff",
                                    "dark": "#d32f2f",
                                    "light": "#e57373",
                                    "main": "#f44336",
                                  },
                                  "primary": Object {
                                    "contrastText": "#fff",
                                    "dark": "#303f9f",
                                    "light": "#7986cb",
                                    "main": "#3f51b5",
                                  },
                                  "secondary": Object {
                                    "contrastText": "#fff",
                                    "dark": "#c51162",
                                    "light": "#ff4081",
                                    "main": "#f50057",
                                  },
                                  "success": Object {
                                    "contrastText": "#fff",
                                    "dark": "#388e3c",
                                    "light": "#81c784",
                                    "main": "#4caf50",
                                  },
                                  "text": Object {
                                    "disabled": "rgba(0, 0, 0, 0.38)",
                                    "hint": "rgba(0, 0, 0, 0.38)",
                                    "icon": "rgba(0, 0, 0, 0.38)",
                                    "primary": "rgba(0, 0, 0, 0.87)",
                                    "secondary": "rgba(0, 0, 0, 0.54)",
                                  },
                                  "warning": Object {
                                    "contrastText": "#fff",
                                    "dark": "#ffa000",
                                    "light": "#ffd54f",
                                    "main": "#ffc107",
                                  },
                                },
                                "shape": Object {
                                  "borderRadius": 4,
                                },
                                "spacing": Object {
                                  "unit": 8,
                                },
                                "typography": Object {
                                  "body1": Object {
                                    "color": "rgba(0, 0, 0, 0.87)",
                                    "fontFamily": undefined,
                                    "fontSize": 16,
                                    "fontWeight": "400",
                                  },
                                  "body2": Object {
                                    "color": "rgba(0, 0, 0, 0.87)",
                                    "fontFamily": undefined,
                                    "fontSize": 14,
                                    "fontWeight": "400",
                                  },
                                  "button": Object {
                                    "color": "rgba(0, 0, 0, 0.87)",
                                    "fontFamily": undefined,
                                    "fontSize": 14,
                                    "fontWeight": "500",
                                    "textTransform": "uppercase",
                                  },
                                  "caption": Object {
                                    "color": "rgba(0, 0, 0, 0.87)",
                                    "fontFamily": undefined,
                                    "fontSize": 12,
                                    "fontWeight": "400",
                                  },
                                  "h1": Object {
                                    "color": "rgba(0, 0, 0, 0.87)",
                                    "fontFamily": undefined,
                                    "fontSize": 96,
                                    "fontWeight": "300",
                                  },
                                  "h2": Object {
                                    "color": "rgba(0, 0, 0, 0.87)",
                                    "fontFamily": undefined,
                                    "fontSize": 60,
                                    "fontWeight": "300",
                                  },
                                  "h3": Object {
                                    "color": "rgba(0, 0, 0, 0.87)",
                                    "fontFamily": undefined,
                                    "fontSize": 48,
                                    "fontWeight": "400",
                                  },
                                  "h4": Object {
                                    "color": "rgba(0, 0, 0, 0.87)",
                                    "fontFamily": undefined,
                                    "fontSize": 34,
                                    "fontWeight": "400",
                                  },
                                  "h5": Object {
                                    "color": "rgba(0, 0, 0, 0.87)",
                                    "fontFamily": undefined,
                                    "fontSize": 24,
                                    "fontWeight": "400",
                                  },
                                  "h6": Object {
                                    "color": "rgba(0, 0, 0, 0.87)",
                                    "fontFamily": undefined,
                                    "fontSize": 20,
                                    "fontWeight": "500",
                                  },
                                  "overline": Object {
                                    "color": "rgba(0, 0, 0, 0.87)",
                                    "fontFamily": undefined,
                                    "fontSize": 12,
                                    "fontWeight": "400",
                                    "textTransform": "uppercase",
                                  },
                                  "subtitle1": Object {
                                    "color": "rgba(0, 0, 0, 0.87)",
                                    "fontFamily": undefined,
                                    "fontSize": 16,
                                    "fontWeight": "400",
                                  },
                                  "subtitle2": Object {
                                    "color": "rgba(0, 0, 0, 0.87)",
                                    "fontFamily": undefined,
                                    "fontSize": 14,
                                    "fontWeight": "500",
                                  },
                                },
                              },
                              "_65": 1,
                              "_72": null,
                              "isAsync": false,
                              "loaded": true,
                              "module": Object {
                                "components": Object {},
                                "elevation": [Function],
                                "palette": Object {
                                  "action": Object {
                                    "active": "rgba(0, 0, 0, 0.54)",
                                    "disabled": "rgba(0, 0, 0, 0.26)",
                                    "disabledBackground": "rgba(0, 0, 0, 0.12)",
                                    "hover": "rgba(0, 0, 0, 0.08)",
                                    "hoverOpacity": 0.08,
                                    "selected": "rgba(0, 0, 0, 0.14)",
                                  },
                                  "background": Object {
                                    "card": "#ffffff",
                                    "dark": "#eeeeee",
                                    "default": "#f5f5f5",
                                    "light": "#fafafa",
                                  },
                                  "divider": "rgba(0, 0, 0, 0.12)",
                                  "error": Object {
                                    "contrastText": "#fff",
                                    "dark": "#d32f2f",
                                    "light": "#e57373",
                                    "main": "#f44336",
                                  },
                                  "primary": Object {
                                    "contrastText": "#fff",
                                    "dark": "#303f9f",
                                    "light": "#7986cb",
                                    "main": "#3f51b5",
                                  },
                                  "secondary": Object {
                                    "contrastText": "#fff",
                                    "dark": "#c51162",
                                    "light": "#ff4081",
                                    "main": "#f50057",
                                  },
                                  "success": Object {
                                    "contrastText": "#fff",
                                    "dark": "#388e3c",
                                    "light": "#81c784",
                                    "main": "#4caf50",
                                  },
                                  "text": Object {
                                    "disabled": "rgba(0, 0, 0, 0.38)",
                                    "hint": "rgba(0, 0, 0, 0.38)",
                                    "icon": "rgba(0, 0, 0, 0.38)",
                                    "primary": "rgba(0, 0, 0, 0.87)",
                                    "secondary": "rgba(0, 0, 0, 0.54)",
                                  },
                                  "warning": Object {
                                    "contrastText": "#fff",
                                    "dark": "#ffa000",
                                    "light": "#ffd54f",
                                    "main": "#ffc107",
                                  },
                                },
                                "shape": Object {
                                  "borderRadius": 4,
                                },
                                "spacing": Object {
                                  "unit": 8,
                                },
                                "typography": Object {
                                  "body1": Object {
                                    "color": "rgba(0, 0, 0, 0.87)",
                                    "fontFamily": undefined,
                                    "fontSize": 16,
                                    "fontWeight": "400",
                                  },
                                  "body2": Object {
                                    "color": "rgba(0, 0, 0, 0.87)",
                                    "fontFamily": undefined,
                                    "fontSize": 14,
                                    "fontWeight": "400",
                                  },
                                  "button": Object {
                                    "color": "rgba(0, 0, 0, 0.87)",
                                    "fontFamily": undefined,
                                    "fontSize": 14,
                                    "fontWeight": "500",
                                    "textTransform": "uppercase",
                                  },
                                  "caption": Object {
                                    "color": "rgba(0, 0, 0, 0.87)",
                                    "fontFamily": undefined,
                                    "fontSize": 12,
                                    "fontWeight": "400",
                                  },
                                  "h1": Object {
                                    "color": "rgba(0, 0, 0, 0.87)",
                                    "fontFamily": undefined,
                                    "fontSize": 96,
                                    "fontWeight": "300",
                                  },
                                  "h2": Object {
                                    "color": "rgba(0, 0, 0, 0.87)",
                                    "fontFamily": undefined,
                                    "fontSize": 60,
                                    "fontWeight": "300",
                                  },
                                  "h3": Object {
                                    "color": "rgba(0, 0, 0, 0.87)",
                                    "fontFamily": undefined,
                                    "fontSize": 48,
                                    "fontWeight": "400",
                                  },
                                  "h4": Object {
                                    "color": "rgba(0, 0, 0, 0.87)",
                                    "fontFamily": undefined,
                                    "fontSize": 34,
                                    "fontWeight": "400",
                                  },
                                  "h5": Object {
                                    "color": "rgba(0, 0, 0, 0.87)",
                                    "fontFamily": undefined,
                                    "fontSize": 24,
                                    "fontWeight": "400",
                                  },
                                  "h6": Object {
                                    "color": "rgba(0, 0, 0, 0.87)",
                                    "fontFamily": undefined,
                                    "fontSize": 20,
                                    "fontWeight": "500",
                                  },
                                  "overline": Object {
                                    "color": "rgba(0, 0, 0, 0.87)",
                                    "fontFamily": undefined,
                                    "fontSize": 12,
                                    "fontWeight": "400",
                                    "textTransform": "uppercase",
                                  },
                                  "subtitle1": Object {
                                    "color": "rgba(0, 0, 0, 0.87)",
                                    "fontFamily": undefined,
                                    "fontSize": 16,
                                    "fontWeight": "400",
                                  },
                                  "subtitle2": Object {
                                    "color": "rgba(0, 0, 0, 0.87)",
                                    "fontFamily": undefined,
                                    "fontSize": 14,
                                    "fontWeight": "500",
                                  },
                                },
                              },
                            },
                          },
                          "bluebase-dark" => Object {
                            "alternate": "bluebase-light",
                            "key": "bluebase-dark",
                            "mode": "dark",
                            "name": "BlueBase Dark",
                            "preload": false,
                            "value": Promise {
                              "_40": 0,
                              "_55": Object {
                                "components": Object {},
                                "elevation": [Function],
                                "palette": Object {
                                  "action": Object {
                                    "active": "#ffffff",
                                    "disabled": "rgba(255, 255, 255, 0.3)",
                                    "disabledBackground": "rgba(255, 255, 255, 0.12)",
                                    "hover": "rgba(255, 255, 255, 0.1)",
                                    "hoverOpacity": 0.1,
                                    "selected": "rgba(255, 255, 255, 0.2)",
                                  },
                                  "background": Object {
                                    "card": "#424242",
                                    "dark": "#202020",
                                    "default": "#303030",
                                    "light": "#404040",
                                  },
                                  "divider": "rgba(255, 255, 255, 0.12)",
                                  "error": Object {
                                    "contrastText": "#fff",
                                    "dark": "#d32f2f",
                                    "light": "#e57373",
                                    "main": "#f44336",
                                  },
                                  "primary": Object {
                                    "contrastText": "#fff",
                                    "dark": "#303f9f",
                                    "light": "#7986cb",
                                    "main": "#3f51b5",
                                  },
                                  "secondary": Object {
                                    "contrastText": "#fff",
                                    "dark": "#c51162",
                                    "light": "#ff4081",
                                    "main": "#f50057",
                                  },
                                  "success": Object {
                                    "contrastText": "#fff",
                                    "dark": "#388e3c",
                                    "light": "#81c784",
                                    "main": "#4caf50",
                                  },
                                  "text": Object {
                                    "disabled": "rgba(255, 255, 255, 0.5)",
                                    "hint": "rgba(255, 255, 255, 0.5)",
                                    "icon": "rgba(255, 255, 255, 0.5)",
                                    "primary": "#ffffff",
                                    "secondary": "rgba(255, 255, 255, 0.7)",
                                  },
                                  "warning": Object {
                                    "contrastText": "#fff",
                                    "dark": "#ffa000",
                                    "light": "#ffd54f",
                                    "main": "#ffc107",
                                  },
                                },
                                "shape": Object {
                                  "borderRadius": 4,
                                },
                                "spacing": Object {
                                  "unit": 8,
                                },
                                "typography": Object {
                                  "body1": Object {
                                    "color": "#ffffff",
                                    "fontFamily": undefined,
                                    "fontSize": 16,
                                    "fontWeight": "400",
                                  },
                                  "body2": Object {
                                    "color": "#ffffff",
                                    "fontFamily": undefined,
                                    "fontSize": 14,
                                    "fontWeight": "400",
                                  },
                                  "button": Object {
                                    "color": "#ffffff",
                                    "fontFamily": undefined,
                                    "fontSize": 14,
                                    "fontWeight": "500",
                                    "textTransform": "uppercase",
                                  },
                                  "caption": Object {
                                    "color": "#ffffff",
                                    "fontFamily": undefined,
                                    "fontSize": 12,
                                    "fontWeight": "400",
                                  },
                                  "h1": Object {
                                    "color": "#ffffff",
                                    "fontFamily": undefined,
                                    "fontSize": 96,
                                    "fontWeight": "300",
                                  },
                                  "h2": Object {
                                    "color": "#ffffff",
                                    "fontFamily": undefined,
                                    "fontSize": 60,
                                    "fontWeight": "300",
                                  },
                                  "h3": Object {
                                    "color": "#ffffff",
                                    "fontFamily": undefined,
                                    "fontSize": 48,
                                    "fontWeight": "400",
                                  },
                                  "h4": Object {
                                    "color": "#ffffff",
                                    "fontFamily": undefined,
                                    "fontSize": 34,
                                    "fontWeight": "400",
                                  },
                                  "h5": Object {
                                    "color": "#ffffff",
                                    "fontFamily": undefined,
                                    "fontSize": 24,
                                    "fontWeight": "400",
                                  },
                                  "h6": Object {
                                    "color": "#ffffff",
                                    "fontFamily": undefined,
                                    "fontSize": 20,
                                    "fontWeight": "500",
                                  },
                                  "overline": Object {
                                    "color": "#ffffff",
                                    "fontFamily": undefined,
                                    "fontSize": 12,
                                    "fontWeight": "400",
                                    "textTransform": "uppercase",
                                  },
                                  "subtitle1": Object {
                                    "color": "#ffffff",
                                    "fontFamily": undefined,
                                    "fontSize": 16,
                                    "fontWeight": "400",
                                  },
                                  "subtitle2": Object {
                                    "color": "#ffffff",
                                    "fontFamily": undefined,
                                    "fontSize": 14,
                                    "fontWeight": "500",
                                  },
                                },
                              },
                              "_65": 1,
                              "_72": null,
                              "isAsync": false,
                              "loaded": true,
                              "module": Object {
                                "components": Object {},
                                "elevation": [Function],
                                "palette": Object {
                                  "action": Object {
                                    "active": "#ffffff",
                                    "disabled": "rgba(255, 255, 255, 0.3)",
                                    "disabledBackground": "rgba(255, 255, 255, 0.12)",
                                    "hover": "rgba(255, 255, 255, 0.1)",
                                    "hoverOpacity": 0.1,
                                    "selected": "rgba(255, 255, 255, 0.2)",
                                  },
                                  "background": Object {
                                    "card": "#424242",
                                    "dark": "#202020",
                                    "default": "#303030",
                                    "light": "#404040",
                                  },
                                  "divider": "rgba(255, 255, 255, 0.12)",
                                  "error": Object {
                                    "contrastText": "#fff",
                                    "dark": "#d32f2f",
                                    "light": "#e57373",
                                    "main": "#f44336",
                                  },
                                  "primary": Object {
                                    "contrastText": "#fff",
                                    "dark": "#303f9f",
                                    "light": "#7986cb",
                                    "main": "#3f51b5",
                                  },
                                  "secondary": Object {
                                    "contrastText": "#fff",
                                    "dark": "#c51162",
                                    "light": "#ff4081",
                                    "main": "#f50057",
                                  },
                                  "success": Object {
                                    "contrastText": "#fff",
                                    "dark": "#388e3c",
                                    "light": "#81c784",
                                    "main": "#4caf50",
                                  },
                                  "text": Object {
                                    "disabled": "rgba(255, 255, 255, 0.5)",
                                    "hint": "rgba(255, 255, 255, 0.5)",
                                    "icon": "rgba(255, 255, 255, 0.5)",
                                    "primary": "#ffffff",
                                    "secondary": "rgba(255, 255, 255, 0.7)",
                                  },
                                  "warning": Object {
                                    "contrastText": "#fff",
                                    "dark": "#ffa000",
                                    "light": "#ffd54f",
                                    "main": "#ffc107",
                                  },
                                },
                                "shape": Object {
                                  "borderRadius": 4,
                                },
                                "spacing": Object {
                                  "unit": 8,
                                },
                                "typography": Object {
                                  "body1": Object {
                                    "color": "#ffffff",
                                    "fontFamily": undefined,
                                    "fontSize": 16,
                                    "fontWeight": "400",
                                  },
                                  "body2": Object {
                                    "color": "#ffffff",
                                    "fontFamily": undefined,
                                    "fontSize": 14,
                                    "fontWeight": "400",
                                  },
                                  "button": Object {
                                    "color": "#ffffff",
                                    "fontFamily": undefined,
                                    "fontSize": 14,
                                    "fontWeight": "500",
                                    "textTransform": "uppercase",
                                  },
                                  "caption": Object {
                                    "color": "#ffffff",
                                    "fontFamily": undefined,
                                    "fontSize": 12,
                                    "fontWeight": "400",
                                  },
                                  "h1": Object {
                                    "color": "#ffffff",
                                    "fontFamily": undefined,
                                    "fontSize": 96,
                                    "fontWeight": "300",
                                  },
                                  "h2": Object {
                                    "color": "#ffffff",
                                    "fontFamily": undefined,
                                    "fontSize": 60,
                                    "fontWeight": "300",
                                  },
                                  "h3": Object {
                                    "color": "#ffffff",
                                    "fontFamily": undefined,
                                    "fontSize": 48,
                                    "fontWeight": "400",
                                  },
                                  "h4": Object {
                                    "color": "#ffffff",
                                    "fontFamily": undefined,
                                    "fontSize": 34,
                                    "fontWeight": "400",
                                  },
                                  "h5": Object {
                                    "color": "#ffffff",
                                    "fontFamily": undefined,
                                    "fontSize": 24,
                                    "fontWeight": "400",
                                  },
                                  "h6": Object {
                                    "color": "#ffffff",
                                    "fontFamily": undefined,
                                    "fontSize": 20,
                                    "fontWeight": "500",
                                  },
                                  "overline": Object {
                                    "color": "#ffffff",
                                    "fontFamily": undefined,
                                    "fontSize": 12,
                                    "fontWeight": "400",
                                    "textTransform": "uppercase",
                                  },
                                  "subtitle1": Object {
                                    "color": "#ffffff",
                                    "fontFamily": undefined,
                                    "fontSize": 16,
                                    "fontWeight": "400",
                                  },
                                  "subtitle2": Object {
                                    "color": "#ffffff",
                                    "fontFamily": undefined,
                                    "fontSize": 14,
                                    "fontWeight": "500",
                                  },
                                },
                              },
                            },
                          },
                        },
                        "subscriptions": Map {},
                      },
                      "bootOptions": Object {
                        "assets": Object {},
                        "children": <Unknown />,
                        "components": Object {},
                        "configs": Object {
                          "plugin.apollo.httpLinkOptions": Object {
                            "uri": "http://graphql",
                          },
                        },
                        "filters": Object {},
                        "fonts": Object {},
                        "plugins": Array [
                          Object {
                            "categories": Array [],
                            "defaultConfigs": Object {
                              "plugin.apollo.clientOptions": Object {},
                              "plugin.apollo.httpLinkOptions": Object {},
                            },
                            "description": "🌍 A BlueBase Plugin that integrates Apollo GraphQL Client",
                            "enabled": true,
                            "key": "plugin-apollo",
                            "name": "Apollo Plugin",
                            "value": Object {
                              "assets": Object {},
                              "components": Object {
                                "ApolloConsumer": [Function],
                                "GraphqlMutation": [Function],
                                "GraphqlQuery": [Function],
                                "GraphqlSubscription": [Function],
                              },
                              "filters": Object {
                                "bluebase.boot.end": [Function],
                              },
                              "fonts": Object {},
                              "routes": undefined,
                              "themes": Object {},
                            },
                            "version": "1.0.0",
                          },
                          Object {
                            "categories": Array [
                              "ui",
                            ],
                            "defaultConfigs": Object {},
                            "description": "A utility to build pluggable components based on JSON schema!",
                            "enabled": true,
                            "key": "plugin-json-schema-components",
                            "name": "Json Schema Components",
                            "value": Object {
                              "assets": Object {},
                              "components": Object {
                                "BaseFormField": [Function],
                                "FormCheckboxInput": [Function],
                                "FormEmailInput": [Function],
                                "FormNumberInput": [Function],
                                "FormPasswordInput": [Function],
                                "FormPickerInput": [Function],
                                "FormRadioGroupInput": [Function],
                                "FormRangeInput": [Function],
                                "FormResetButton": [Function],
                                "FormStatus": [Function],
                                "FormStatusList": [Function],
                                "FormStatusListItem": [Function],
                                "FormSubmitButton": [Function],
                                "FormSwitchInput": [Function],
                                "FormTextInput": [Function],
                                "FormUrlInput": [Function],
                                "InlineFields": [Function],
                                "JsonForm": [Function],
                                "JsonGraphqlForm": [Function],
                                "JsonLayout": [Function],
                              },
                              "filters": Object {},
                              "fonts": Object {},
                              "routes": undefined,
                              "themes": Object {},
                            },
                            "version": "0.0.1",
                          },
                        ],
                        "themes": Array [],
                      },
                      "booted": true,
                    }
                  }
                  navigator={
                    Object {
                      "initialRouteName": "Root",
                      "routes": Array [
                        Object {
                          "name": "Root",
                          "navigationOptions": Object {
                            "header": null,
                          },
                          "navigator": Object {
                            "initialRouteName": "Home",
                            "routes": Array [
                              Object {
                                "exact": true,
                                "name": "Home",
                                "navigationOptions": Object {
                                  "headerLeft": null,
                                  "title": "BlueBase",
                                },
                                "path": "",
                                "screen": "HomeScreen",
                              },
                            ],
                            "type": "stack",
                          },
                          "path": "",
                        },
                      ],
                      "type": "switch",
                    }
                  }
                  styles={
                    Object {
                      "backdrop": Object {
                        "backgroundColor": "#f5f5f5",
                        "flex": 1,
                      },
                    }
                  }
                >
                  <Component>
                    <JsonGraphqlForm
                      mutation={
                        Object {
                          "mutation": Object {
                            "definitions": Array [
                              Object {
                                "directives": Array [],
                                "kind": "OperationDefinition",
                                "name": Object {
                                  "kind": "Name",
                                  "value": "SignupMutation",
                                },
                                "operation": "mutation",
                                "selectionSet": Object {
                                  "kind": "SelectionSet",
                                  "selections": Array [
                                    Object {
                                      "alias": undefined,
                                      "arguments": Array [
                                        Object {
                                          "kind": "Argument",
                                          "name": Object {
                                            "kind": "Name",
                                            "value": "input",
                                          },
                                          "value": Object {
                                            "fields": Array [
                                              Object {
                                                "kind": "ObjectField",
                                                "name": Object {
                                                  "kind": "Name",
                                                  "value": "data",
                                                },
                                                "value": Object {
                                                  "kind": "Variable",
                                                  "name": Object {
                                                    "kind": "Name",
                                                    "value": "data",
                                                  },
                                                },
                                              },
                                            ],
                                            "kind": "ObjectValue",
                                          },
                                        },
                                      ],
                                      "directives": Array [],
                                      "kind": "Field",
                                      "name": Object {
                                        "kind": "Name",
                                        "value": "signup",
                                      },
                                      "selectionSet": Object {
                                        "kind": "SelectionSet",
                                        "selections": Array [
                                          Object {
                                            "alias": undefined,
                                            "arguments": Array [],
                                            "directives": Array [],
                                            "kind": "Field",
                                            "name": Object {
                                              "kind": "Name",
                                              "value": "id",
                                            },
                                            "selectionSet": undefined,
                                          },
                                          Object {
                                            "alias": undefined,
                                            "arguments": Array [],
                                            "directives": Array [],
                                            "kind": "Field",
                                            "name": Object {
                                              "kind": "Name",
                                              "value": "firstName",
                                            },
                                            "selectionSet": undefined,
                                          },
                                          Object {
                                            "alias": undefined,
                                            "arguments": Array [],
                                            "directives": Array [],
                                            "kind": "Field",
                                            "name": Object {
                                              "kind": "Name",
                                              "value": "lastName",
                                            },
                                            "selectionSet": undefined,
                                          },
                                          Object {
                                            "alias": undefined,
                                            "arguments": Array [],
                                            "directives": Array [],
                                            "kind": "Field",
                                            "name": Object {
                                              "kind": "Name",
                                              "value": "email",
                                            },
                                            "selectionSet": undefined,
                                          },
                                          Object {
                                            "alias": undefined,
                                            "arguments": Array [],
                                            "directives": Array [],
                                            "kind": "Field",
                                            "name": Object {
                                              "kind": "Name",
                                              "value": "accessToken",
                                            },
                                            "selectionSet": undefined,
                                          },
                                        ],
                                      },
                                    },
                                  ],
                                },
                                "variableDefinitions": Array [
                                  Object {
                                    "defaultValue": undefined,
                                    "directives": Array [],
                                    "kind": "VariableDefinition",
                                    "type": Object {
                                      "kind": "NamedType",
                                      "name": Object {
                                        "kind": "Name",
                                        "value": "JSON",
                                      },
                                    },
                                    "variable": Object {
                                      "kind": "Variable",
                                      "name": Object {
                                        "kind": "Name",
                                        "value": "data",
                                      },
                                    },
                                  },
                                ],
                              },
                            ],
                            "kind": "Document",
                            "loc": Object {
                              "end": 142,
                              "start": 0,
                            },
                          },
                        }
                      }
                      schema={
                        Object {
                          "description": "Press \\"Sign Up\\" button to see the result.",
                          "fields": Array [
                            Object {
                              "fields": Array [
                                Object {
                                  "label": "First Name",
                                  "name": "firstName",
                                  "required": true,
                                  "type": "text",
                                },
                                Object {
                                  "label": "Last Name",
                                  "name": "lastName",
                                  "required": true,
                                  "type": "text",
                                },
                              ],
                              "name": "fullName",
                              "type": "inline",
                            },
                            Object {
                              "label": "Email",
                              "name": "email",
                              "required": true,
                              "type": "email",
                            },
                            Object {
                              "label": "Password",
                              "name": "password",
                              "required": true,
                              "type": "password",
                            },
                            Object {
                              "name": "status",
                              "type": "status",
                            },
                            Object {
                              "fullWidth": true,
                              "name": "submit",
                              "title": "Sign up",
                              "type": "submit",
                            },
                          ],
                          "initialValues": Object {
                            "email": "asd@as.cd",
                            "firstName": "im only",
                            "lastName": "testing",
                            "password": "abc",
                          },
                          "title": "Sign up",
                          "validateOnBlur": false,
                          "validateOnChange": false,
                        }
                      }
                    >
                      <ThemedComponent
                        mutation={
                          Object {
                            "mutation": Object {
                              "definitions": Array [
                                Object {
                                  "directives": Array [],
                                  "kind": "OperationDefinition",
                                  "name": Object {
                                    "kind": "Name",
                                    "value": "SignupMutation",
                                  },
                                  "operation": "mutation",
                                  "selectionSet": Object {
                                    "kind": "SelectionSet",
                                    "selections": Array [
                                      Object {
                                        "alias": undefined,
                                        "arguments": Array [
                                          Object {
                                            "kind": "Argument",
                                            "name": Object {
                                              "kind": "Name",
                                              "value": "input",
                                            },
                                            "value": Object {
                                              "fields": Array [
                                                Object {
                                                  "kind": "ObjectField",
                                                  "name": Object {
                                                    "kind": "Name",
                                                    "value": "data",
                                                  },
                                                  "value": Object {
                                                    "kind": "Variable",
                                                    "name": Object {
                                                      "kind": "Name",
                                                      "value": "data",
                                                    },
                                                  },
                                                },
                                              ],
                                              "kind": "ObjectValue",
                                            },
                                          },
                                        ],
                                        "directives": Array [],
                                        "kind": "Field",
                                        "name": Object {
                                          "kind": "Name",
                                          "value": "signup",
                                        },
                                        "selectionSet": Object {
                                          "kind": "SelectionSet",
                                          "selections": Array [
                                            Object {
                                              "alias": undefined,
                                              "arguments": Array [],
                                              "directives": Array [],
                                              "kind": "Field",
                                              "name": Object {
                                                "kind": "Name",
                                                "value": "id",
                                              },
                                              "selectionSet": undefined,
                                            },
                                            Object {
                                              "alias": undefined,
                                              "arguments": Array [],
                                              "directives": Array [],
                                              "kind": "Field",
                                              "name": Object {
                                                "kind": "Name",
                                                "value": "firstName",
                                              },
                                              "selectionSet": undefined,
                                            },
                                            Object {
                                              "alias": undefined,
                                              "arguments": Array [],
                                              "directives": Array [],
                                              "kind": "Field",
                                              "name": Object {
                                                "kind": "Name",
                                                "value": "lastName",
                                              },
                                              "selectionSet": undefined,
                                            },
                                            Object {
                                              "alias": undefined,
                                              "arguments": Array [],
                                              "directives": Array [],
                                              "kind": "Field",
                                              "name": Object {
                                                "kind": "Name",
                                                "value": "email",
                                              },
                                              "selectionSet": undefined,
                                            },
                                            Object {
                                              "alias": undefined,
                                              "arguments": Array [],
                                              "directives": Array [],
                                              "kind": "Field",
                                              "name": Object {
                                                "kind": "Name",
                                                "value": "accessToken",
                                              },
                                              "selectionSet": undefined,
                                            },
                                          ],
                                        },
                                      },
                                    ],
                                  },
                                  "variableDefinitions": Array [
                                    Object {
                                      "defaultValue": undefined,
                                      "directives": Array [],
                                      "kind": "VariableDefinition",
                                      "type": Object {
                                        "kind": "NamedType",
                                        "name": Object {
                                          "kind": "Name",
                                          "value": "JSON",
                                        },
                                      },
                                      "variable": Object {
                                        "kind": "Variable",
                                        "name": Object {
                                          "kind": "Name",
                                          "value": "data",
                                        },
                                      },
                                    },
                                  ],
                                },
                              ],
                              "kind": "Document",
                              "loc": Object {
                                "end": 142,
                                "start": 0,
                              },
                            },
                          }
                        }
                        schema={
                          Object {
                            "description": "Press \\"Sign Up\\" button to see the result.",
                            "fields": Array [
                              Object {
                                "fields": Array [
                                  Object {
                                    "label": "First Name",
                                    "name": "firstName",
                                    "required": true,
                                    "type": "text",
                                  },
                                  Object {
                                    "label": "Last Name",
                                    "name": "lastName",
                                    "required": true,
                                    "type": "text",
                                  },
                                ],
                                "name": "fullName",
                                "type": "inline",
                              },
                              Object {
                                "label": "Email",
                                "name": "email",
                                "required": true,
                                "type": "email",
                              },
                              Object {
                                "label": "Password",
                                "name": "password",
                                "required": true,
                                "type": "password",
                              },
                              Object {
                                "name": "status",
                                "type": "status",
                              },
                              Object {
                                "fullWidth": true,
                                "name": "submit",
                                "title": "Sign up",
                                "type": "submit",
                              },
                            ],
                            "initialValues": Object {
                              "email": "asd@as.cd",
                              "firstName": "im only",
                              "lastName": "testing",
                              "password": "abc",
                            },
                            "title": "Sign up",
                            "validateOnBlur": false,
                            "validateOnChange": false,
                          }
                        }
                      >
                        <JsonGraphqlForm
                          mapFormValuesToMutationVariables={[Function]}
                          mutation={
                            Object {
                              "mutation": Object {
                                "definitions": Array [
                                  Object {
                                    "directives": Array [],
                                    "kind": "OperationDefinition",
                                    "name": Object {
                                      "kind": "Name",
                                      "value": "SignupMutation",
                                    },
                                    "operation": "mutation",
                                    "selectionSet": Object {
                                      "kind": "SelectionSet",
                                      "selections": Array [
                                        Object {
                                          "alias": undefined,
                                          "arguments": Array [
                                            Object {
                                              "kind": "Argument",
                                              "name": Object {
                                                "kind": "Name",
                                                "value": "input",
                                              },
                                              "value": Object {
                                                "fields": Array [
                                                  Object {
                                                    "kind": "ObjectField",
                                                    "name": Object {
                                                      "kind": "Name",
                                                      "value": "data",
                                                    },
                                                    "value": Object {
                                                      "kind": "Variable",
                                                      "name": Object {
                                                        "kind": "Name",
                                                        "value": "data",
                                                      },
                                                    },
                                                  },
                                                ],
                                                "kind": "ObjectValue",
                                              },
                                            },
                                          ],
                                          "directives": Array [],
                                          "kind": "Field",
                                          "name": Object {
                                            "kind": "Name",
                                            "value": "signup",
                                          },
                                          "selectionSet": Object {
                                            "kind": "SelectionSet",
                                            "selections": Array [
                                              Object {
                                                "alias": undefined,
                                                "arguments": Array [],
                                                "directives": Array [],
                                                "kind": "Field",
                                                "name": Object {
                                                  "kind": "Name",
                                                  "value": "id",
                                                },
                                                "selectionSet": undefined,
                                              },
                                              Object {
                                                "alias": undefined,
                                                "arguments": Array [],
                                                "directives": Array [],
                                                "kind": "Field",
                                                "name": Object {
                                                  "kind": "Name",
                                                  "value": "firstName",
                                                },
                                                "selectionSet": undefined,
                                              },
                                              Object {
                                                "alias": undefined,
                                                "arguments": Array [],
                                                "directives": Array [],
                                                "kind": "Field",
                                                "name": Object {
                                                  "kind": "Name",
                                                  "value": "lastName",
                                                },
                                                "selectionSet": undefined,
                                              },
                                              Object {
                                                "alias": undefined,
                                                "arguments": Array [],
                                                "directives": Array [],
                                                "kind": "Field",
                                                "name": Object {
                                                  "kind": "Name",
                                                  "value": "email",
                                                },
                                                "selectionSet": undefined,
                                              },
                                              Object {
                                                "alias": undefined,
                                                "arguments": Array [],
                                                "directives": Array [],
                                                "kind": "Field",
                                                "name": Object {
                                                  "kind": "Name",
                                                  "value": "accessToken",
                                                },
                                                "selectionSet": undefined,
                                              },
                                            ],
                                          },
                                        },
                                      ],
                                    },
                                    "variableDefinitions": Array [
                                      Object {
                                        "defaultValue": undefined,
                                        "directives": Array [],
                                        "kind": "VariableDefinition",
                                        "type": Object {
                                          "kind": "NamedType",
                                          "name": Object {
                                            "kind": "Name",
                                            "value": "JSON",
                                          },
                                        },
                                        "variable": Object {
                                          "kind": "Variable",
                                          "name": Object {
                                            "kind": "Name",
                                            "value": "data",
                                          },
                                        },
                                      },
                                    ],
                                  },
                                ],
                                "kind": "Document",
                                "loc": Object {
                                  "end": 142,
                                  "start": 0,
                                },
                              },
                            }
                          }
                          onError={[Function]}
                          onSuccess={[Function]}
                          schema={
                            Object {
                              "description": "Press \\"Sign Up\\" button to see the result.",
                              "fields": Array [
                                Object {
                                  "fields": Array [
                                    Object {
                                      "label": "First Name",
                                      "name": "firstName",
                                      "required": true,
                                      "type": "text",
                                    },
                                    Object {
                                      "label": "Last Name",
                                      "name": "lastName",
                                      "required": true,
                                      "type": "text",
                                    },
                                  ],
                                  "name": "fullName",
                                  "type": "inline",
                                },
                                Object {
                                  "label": "Email",
                                  "name": "email",
                                  "required": true,
                                  "type": "email",
                                },
                                Object {
                                  "label": "Password",
                                  "name": "password",
                                  "required": true,
                                  "type": "password",
                                },
                                Object {
                                  "name": "status",
                                  "type": "status",
                                },
                                Object {
                                  "fullWidth": true,
                                  "name": "submit",
                                  "title": "Sign up",
                                  "type": "submit",
                                },
                              ],
                              "initialValues": Object {
                                "email": "asd@as.cd",
                                "firstName": "im only",
                                "lastName": "testing",
                                "password": "abc",
                              },
                              "title": "Sign up",
                              "validateOnBlur": false,
                              "validateOnChange": false,
                            }
                          }
                        >
                          <GraphqlMutation
                            mutation={
                              Object {
                                "definitions": Array [
                                  Object {
                                    "directives": Array [],
                                    "kind": "OperationDefinition",
                                    "name": Object {
                                      "kind": "Name",
                                      "value": "SignupMutation",
                                    },
                                    "operation": "mutation",
                                    "selectionSet": Object {
                                      "kind": "SelectionSet",
                                      "selections": Array [
                                        Object {
                                          "alias": undefined,
                                          "arguments": Array [
                                            Object {
                                              "kind": "Argument",
                                              "name": Object {
                                                "kind": "Name",
                                                "value": "input",
                                              },
                                              "value": Object {
                                                "fields": Array [
                                                  Object {
                                                    "kind": "ObjectField",
                                                    "name": Object {
                                                      "kind": "Name",
                                                      "value": "data",
                                                    },
                                                    "value": Object {
                                                      "kind": "Variable",
                                                      "name": Object {
                                                        "kind": "Name",
                                                        "value": "data",
                                                      },
                                                    },
                                                  },
                                                ],
                                                "kind": "ObjectValue",
                                              },
                                            },
                                          ],
                                          "directives": Array [],
                                          "kind": "Field",
                                          "name": Object {
                                            "kind": "Name",
                                            "value": "signup",
                                          },
                                          "selectionSet": Object {
                                            "kind": "SelectionSet",
                                            "selections": Array [
                                              Object {
                                                "alias": undefined,
                                                "arguments": Array [],
                                                "directives": Array [],
                                                "kind": "Field",
                                                "name": Object {
                                                  "kind": "Name",
                                                  "value": "id",
                                                },
                                                "selectionSet": undefined,
                                              },
                                              Object {
                                                "alias": undefined,
                                                "arguments": Array [],
                                                "directives": Array [],
                                                "kind": "Field",
                                                "name": Object {
                                                  "kind": "Name",
                                                  "value": "firstName",
                                                },
                                                "selectionSet": undefined,
                                              },
                                              Object {
                                                "alias": undefined,
                                                "arguments": Array [],
                                                "directives": Array [],
                                                "kind": "Field",
                                                "name": Object {
                                                  "kind": "Name",
                                                  "value": "lastName",
                                                },
                                                "selectionSet": undefined,
                                              },
                                              Object {
                                                "alias": undefined,
                                                "arguments": Array [],
                                                "directives": Array [],
                                                "kind": "Field",
                                                "name": Object {
                                                  "kind": "Name",
                                                  "value": "email",
                                                },
                                                "selectionSet": undefined,
                                              },
                                              Object {
                                                "alias": undefined,
                                                "arguments": Array [],
                                                "directives": Array [],
                                                "kind": "Field",
                                                "name": Object {
                                                  "kind": "Name",
                                                  "value": "accessToken",
                                                },
                                                "selectionSet": undefined,
                                              },
                                            ],
                                          },
                                        },
                                      ],
                                    },
                                    "variableDefinitions": Array [
                                      Object {
                                        "defaultValue": undefined,
                                        "directives": Array [],
                                        "kind": "VariableDefinition",
                                        "type": Object {
                                          "kind": "NamedType",
                                          "name": Object {
                                            "kind": "Name",
                                            "value": "JSON",
                                          },
                                        },
                                        "variable": Object {
                                          "kind": "Variable",
                                          "name": Object {
                                            "kind": "Name",
                                            "value": "data",
                                          },
                                        },
                                      },
                                    ],
                                  },
                                ],
                                "kind": "Document",
                                "loc": Object {
                                  "end": 142,
                                  "start": 0,
                                },
                              }
                            }
                          >
                            <ThemedComponent
                              mutation={
                                Object {
                                  "definitions": Array [
                                    Object {
                                      "directives": Array [],
                                      "kind": "OperationDefinition",
                                      "name": Object {
                                        "kind": "Name",
                                        "value": "SignupMutation",
                                      },
                                      "operation": "mutation",
                                      "selectionSet": Object {
                                        "kind": "SelectionSet",
                                        "selections": Array [
                                          Object {
                                            "alias": undefined,
                                            "arguments": Array [
                                              Object {
                                                "kind": "Argument",
                                                "name": Object {
                                                  "kind": "Name",
                                                  "value": "input",
                                                },
                                                "value": Object {
                                                  "fields": Array [
                                                    Object {
                                                      "kind": "ObjectField",
                                                      "name": Object {
                                                        "kind": "Name",
                                                        "value": "data",
                                                      },
                                                      "value": Object {
                                                        "kind": "Variable",
                                                        "name": Object {
                                                          "kind": "Name",
                                                          "value": "data",
                                                        },
                                                      },
                                                    },
                                                  ],
                                                  "kind": "ObjectValue",
                                                },
                                              },
                                            ],
                                            "directives": Array [],
                                            "kind": "Field",
                                            "name": Object {
                                              "kind": "Name",
                                              "value": "signup",
                                            },
                                            "selectionSet": Object {
                                              "kind": "SelectionSet",
                                              "selections": Array [
                                                Object {
                                                  "alias": undefined,
                                                  "arguments": Array [],
                                                  "directives": Array [],
                                                  "kind": "Field",
                                                  "name": Object {
                                                    "kind": "Name",
                                                    "value": "id",
                                                  },
                                                  "selectionSet": undefined,
                                                },
                                                Object {
                                                  "alias": undefined,
                                                  "arguments": Array [],
                                                  "directives": Array [],
                                                  "kind": "Field",
                                                  "name": Object {
                                                    "kind": "Name",
                                                    "value": "firstName",
                                                  },
                                                  "selectionSet": undefined,
                                                },
                                                Object {
                                                  "alias": undefined,
                                                  "arguments": Array [],
                                                  "directives": Array [],
                                                  "kind": "Field",
                                                  "name": Object {
                                                    "kind": "Name",
                                                    "value": "lastName",
                                                  },
                                                  "selectionSet": undefined,
                                                },
                                                Object {
                                                  "alias": undefined,
                                                  "arguments": Array [],
                                                  "directives": Array [],
                                                  "kind": "Field",
                                                  "name": Object {
                                                    "kind": "Name",
                                                    "value": "email",
                                                  },
                                                  "selectionSet": undefined,
                                                },
                                                Object {
                                                  "alias": undefined,
                                                  "arguments": Array [],
                                                  "directives": Array [],
                                                  "kind": "Field",
                                                  "name": Object {
                                                    "kind": "Name",
                                                    "value": "accessToken",
                                                  },
                                                  "selectionSet": undefined,
                                                },
                                              ],
                                            },
                                          },
                                        ],
                                      },
                                      "variableDefinitions": Array [
                                        Object {
                                          "defaultValue": undefined,
                                          "directives": Array [],
                                          "kind": "VariableDefinition",
                                          "type": Object {
                                            "kind": "NamedType",
                                            "name": Object {
                                              "kind": "Name",
                                              "value": "JSON",
                                            },
                                          },
                                          "variable": Object {
                                            "kind": "Variable",
                                            "name": Object {
                                              "kind": "Name",
                                              "value": "data",
                                            },
                                          },
                                        },
                                      ],
                                    },
                                  ],
                                  "kind": "Document",
                                  "loc": Object {
                                    "end": 142,
                                    "start": 0,
                                  },
                                }
                              }
                            >
                              <Mutation
                                mutation={
                                  Object {
                                    "definitions": Array [
                                      Object {
                                        "directives": Array [],
                                        "kind": "OperationDefinition",
                                        "name": Object {
                                          "kind": "Name",
                                          "value": "SignupMutation",
                                        },
                                        "operation": "mutation",
                                        "selectionSet": Object {
                                          "kind": "SelectionSet",
                                          "selections": Array [
                                            Object {
                                              "alias": undefined,
                                              "arguments": Array [
                                                Object {
                                                  "kind": "Argument",
                                                  "name": Object {
                                                    "kind": "Name",
                                                    "value": "input",
                                                  },
                                                  "value": Object {
                                                    "fields": Array [
                                                      Object {
                                                        "kind": "ObjectField",
                                                        "name": Object {
                                                          "kind": "Name",
                                                          "value": "data",
                                                        },
                                                        "value": Object {
                                                          "kind": "Variable",
                                                          "name": Object {
                                                            "kind": "Name",
                                                            "value": "data",
                                                          },
                                                        },
                                                      },
                                                    ],
                                                    "kind": "ObjectValue",
                                                  },
                                                },
                                              ],
                                              "directives": Array [],
                                              "kind": "Field",
                                              "name": Object {
                                                "kind": "Name",
                                                "value": "signup",
                                              },
                                              "selectionSet": Object {
                                                "kind": "SelectionSet",
                                                "selections": Array [
                                                  Object {
                                                    "alias": undefined,
                                                    "arguments": Array [],
                                                    "directives": Array [],
                                                    "kind": "Field",
                                                    "name": Object {
                                                      "kind": "Name",
                                                      "value": "id",
                                                    },
                                                    "selectionSet": undefined,
                                                  },
                                                  Object {
                                                    "alias": undefined,
                                                    "arguments": Array [],
                                                    "directives": Array [],
                                                    "kind": "Field",
                                                    "name": Object {
                                                      "kind": "Name",
                                                      "value": "firstName",
                                                    },
                                                    "selectionSet": undefined,
                                                  },
                                                  Object {
                                                    "alias": undefined,
                                                    "arguments": Array [],
                                                    "directives": Array [],
                                                    "kind": "Field",
                                                    "name": Object {
                                                      "kind": "Name",
                                                      "value": "lastName",
                                                    },
                                                    "selectionSet": undefined,
                                                  },
                                                  Object {
                                                    "alias": undefined,
                                                    "arguments": Array [],
                                                    "directives": Array [],
                                                    "kind": "Field",
                                                    "name": Object {
                                                      "kind": "Name",
                                                      "value": "email",
                                                    },
                                                    "selectionSet": undefined,
                                                  },
                                                  Object {
                                                    "alias": undefined,
                                                    "arguments": Array [],
                                                    "directives": Array [],
                                                    "kind": "Field",
                                                    "name": Object {
                                                      "kind": "Name",
                                                      "value": "accessToken",
                                                    },
                                                    "selectionSet": undefined,
                                                  },
                                                ],
                                              },
                                            },
                                          ],
                                        },
                                        "variableDefinitions": Array [
                                          Object {
                                            "defaultValue": undefined,
                                            "directives": Array [],
                                            "kind": "VariableDefinition",
                                            "type": Object {
                                              "kind": "NamedType",
                                              "name": Object {
                                                "kind": "Name",
                                                "value": "JSON",
                                              },
                                            },
                                            "variable": Object {
                                              "kind": "Variable",
                                              "name": Object {
                                                "kind": "Name",
                                                "value": "data",
                                              },
                                            },
                                          },
                                        ],
                                      },
                                    ],
                                    "kind": "Document",
                                    "loc": Object {
                                      "end": 142,
                                      "start": 0,
                                    },
                                  }
                                }
                              >
                                <JsonForm
                                  onError={[Function]}
                                  onSuccess={[Function]}
                                  schema={
                                    Object {
                                      "description": "Press \\"Sign Up\\" button to see the result.",
                                      "fields": Array [
                                        Object {
                                          "fields": Array [
                                            Object {
                                              "label": "First Name",
                                              "name": "firstName",
                                              "required": true,
                                              "type": "text",
                                            },
                                            Object {
                                              "label": "Last Name",
                                              "name": "lastName",
                                              "required": true,
                                              "type": "text",
                                            },
                                          ],
                                          "name": "fullName",
                                          "type": "inline",
                                        },
                                        Object {
                                          "label": "Email",
                                          "name": "email",
                                          "required": true,
                                          "type": "email",
                                        },
                                        Object {
                                          "label": "Password",
                                          "name": "password",
                                          "required": true,
                                          "type": "password",
                                        },
                                        Object {
                                          "name": "status",
                                          "type": "status",
                                        },
                                        Object {
                                          "fullWidth": true,
                                          "name": "submit",
                                          "title": "Sign up",
                                          "type": "submit",
                                        },
                                      ],
                                      "initialValues": Object {
                                        "email": "asd@as.cd",
                                        "firstName": "im only",
                                        "lastName": "testing",
                                        "password": "abc",
                                      },
                                      "onSubmit": [Function],
                                      "title": "Sign up",
                                      "validateOnBlur": false,
                                      "validateOnChange": false,
                                    }
                                  }
                                >
                                  <ThemedComponent
                                    onError={[Function]}
                                    onSuccess={[Function]}
                                    schema={
                                      Object {
                                        "description": "Press \\"Sign Up\\" button to see the result.",
                                        "fields": Array [
                                          Object {
                                            "fields": Array [
                                              Object {
                                                "label": "First Name",
                                                "name": "firstName",
                                                "required": true,
                                                "type": "text",
                                              },
                                              Object {
                                                "label": "Last Name",
                                                "name": "lastName",
                                                "required": true,
                                                "type": "text",
                                              },
                                            ],
                                            "name": "fullName",
                                            "type": "inline",
                                          },
                                          Object {
                                            "label": "Email",
                                            "name": "email",
                                            "required": true,
                                            "type": "email",
                                          },
                                          Object {
                                            "label": "Password",
                                            "name": "password",
                                            "required": true,
                                            "type": "password",
                                          },
                                          Object {
                                            "name": "status",
                                            "type": "status",
                                          },
                                          Object {
                                            "fullWidth": true,
                                            "name": "submit",
                                            "title": "Sign up",
                                            "type": "submit",
                                          },
                                        ],
                                        "initialValues": Object {
                                          "email": "asd@as.cd",
                                          "firstName": "im only",
                                          "lastName": "testing",
                                          "password": "abc",
                                        },
                                        "onSubmit": [Function],
                                        "title": "Sign up",
                                        "validateOnBlur": false,
                                        "validateOnChange": false,
                                      }
                                    }
                                  >
                                    <Component
                                      onError={[Function]}
                                      onSuccess={[Function]}
                                      schema={
                                        Object {
                                          "description": "Press \\"Sign Up\\" button to see the result.",
                                          "fields": Array [
                                            Object {
                                              "fields": Array [
                                                Object {
                                                  "label": "First Name",
                                                  "name": "firstName",
                                                  "required": true,
                                                  "type": "text",
                                                },
                                                Object {
                                                  "label": "Last Name",
                                                  "name": "lastName",
                                                  "required": true,
                                                  "type": "text",
                                                },
                                              ],
                                              "name": "fullName",
                                              "type": "inline",
                                            },
                                            Object {
                                              "label": "Email",
                                              "name": "email",
                                              "required": true,
                                              "type": "email",
                                            },
                                            Object {
                                              "label": "Password",
                                              "name": "password",
                                              "required": true,
                                              "type": "password",
                                            },
                                            Object {
                                              "name": "status",
                                              "type": "status",
                                            },
                                            Object {
                                              "fullWidth": true,
                                              "name": "submit",
                                              "title": "Sign up",
                                              "type": "submit",
                                            },
                                          ],
                                          "initialValues": Object {
                                            "email": "asd@as.cd",
                                            "firstName": "im only",
                                            "lastName": "testing",
                                            "password": "abc",
                                          },
                                          "onSubmit": [Function],
                                          "title": "Sign up",
                                          "validateOnBlur": false,
                                          "validateOnChange": false,
                                        }
                                      }
                                      styles={
                                        Object {
                                          "description": Object {
                                            "color": "rgba(0, 0, 0, 0.38)",
                                          },
                                          "header": Object {
                                            "padding": 16,
                                          },
                                          "root": Object {},
                                          "title": Object {},
                                          "titlePadding": Object {
                                            "paddingBottom": 8,
                                          },
                                        }
                                      }
                                    >
                                      <View
                                        style={
                                          Array [
                                            Object {},
                                            undefined,
                                          ]
                                        }
                                      >
                                        <View
                                          style={
                                            Array [
                                              Object {},
                                              undefined,
                                            ]
                                          }
                                        >
                                          <View
                                            style={
                                              Array [
                                                Object {},
                                                undefined,
                                              ]
                                            }
                                          >
                                            <View
                                              style={
                                                Object {
                                                  "padding": 16,
                                                }
                                              }
                                            >
                                              <View
                                                style={
                                                  Object {
                                                    "padding": 16,
                                                  }
                                                }
                                              >
                                                <View
                                                  style={
                                                    Object {
                                                      "padding": 16,
                                                    }
                                                  }
                                                >
                                                  <FormattedMessage
                                                    component={[Function]}
                                                    style={
                                                      Array [
                                                        Object {},
                                                        Object {
                                                          "paddingBottom": 8,
                                                        },
                                                      ]
                                                    }
                                                  >
                                                    <ThemedComponent
                                                      component={[Function]}
                                                      style={
                                                        Array [
                                                          Object {},
                                                          Object {
                                                            "paddingBottom": 8,
                                                          },
                                                        ]
                                                      }
                                                    >
                                                      <FormattedMessage
                                                        component={[Function]}
                                                        style={
                                                          Array [
                                                            Object {},
                                                            Object {
                                                              "paddingBottom": 8,
                                                            },
                                                          ]
                                                        }
                                                      >
                                                        <H6
                                                          style={
                                                            Array [
                                                              Object {},
                                                              Object {
                                                                "paddingBottom": 8,
                                                              },
                                                            ]
                                                          }
                                                        >
                                                          <ThemedComponent
                                                            style={
                                                              Array [
                                                                Object {},
                                                                Object {
                                                                  "paddingBottom": 8,
                                                                },
                                                              ]
                                                            }
                                                          >
                                                            <Component
                                                              style={
                                                                Array [
                                                                  Object {},
                                                                  Object {
                                                                    "paddingBottom": 8,
                                                                  },
                                                                ]
                                                              }
                                                              styles={
                                                                Object {
                                                                  "root": Object {
                                                                    "color": "rgba(0, 0, 0, 0.87)",
                                                                    "fontFamily": undefined,
                                                                    "fontSize": 20,
                                                                    "fontWeight": "500",
                                                                  },
                                                                }
                                                              }
                                                            >
                                                              <Text
                                                                style={
                                                                  Array [
                                                                    Object {
                                                                      "color": "rgba(0, 0, 0, 0.87)",
                                                                      "fontFamily": undefined,
                                                                      "fontSize": 20,
                                                                      "fontWeight": "500",
                                                                    },
                                                                    Array [
                                                                      Object {},
                                                                      Object {
                                                                        "paddingBottom": 8,
                                                                      },
                                                                    ],
                                                                  ]
                                                                }
                                                              >
                                                                <Text
                                                                  style={
                                                                    Array [
                                                                      Object {
                                                                        "color": "rgba(0, 0, 0, 0.87)",
                                                                        "fontFamily": undefined,
                                                                        "fontSize": 20,
                                                                        "fontWeight": "500",
                                                                      },
                                                                      Array [
                                                                        Object {},
                                                                        Object {
                                                                          "paddingBottom": 8,
                                                                        },
                                                                      ],
                                                                    ]
                                                                  }
                                                                >
                                                                  Sign up
                                                                </Text>
                                                              </Text>
                                                            </Component>
                                                          </ThemedComponent>
                                                        </H6>
                                                      </FormattedMessage>
                                                    </ThemedComponent>
                                                  </FormattedMessage>
                                                  <FormattedMessage
                                                    component={[Function]}
                                                    style={
                                                      Object {
                                                        "color": "rgba(0, 0, 0, 0.38)",
                                                      }
                                                    }
                                                  >
                                                    <ThemedComponent
                                                      component={[Function]}
                                                      style={
                                                        Object {
                                                          "color": "rgba(0, 0, 0, 0.38)",
                                                        }
                                                      }
                                                    >
                                                      <FormattedMessage
                                                        component={[Function]}
                                                        style={
                                                          Object {
                                                            "color": "rgba(0, 0, 0, 0.38)",
                                                          }
                                                        }
                                                      >
                                                        <Body2
                                                          style={
                                                            Object {
                                                              "color": "rgba(0, 0, 0, 0.38)",
                                                            }
                                                          }
                                                        >
                                                          <ThemedComponent
                                                            style={
                                                              Object {
                                                                "color": "rgba(0, 0, 0, 0.38)",
                                                              }
                                                            }
                                                          >
                                                            <Component
                                                              style={
                                                                Object {
                                                                  "color": "rgba(0, 0, 0, 0.38)",
                                                                }
                                                              }
                                                              styles={
                                                                Object {
                                                                  "root": Object {
                                                                    "color": "rgba(0, 0, 0, 0.87)",
                                                                    "fontFamily": undefined,
                                                                    "fontSize": 14,
                                                                    "fontWeight": "400",
                                                                  },
                                                                }
                                                              }
                                                            >
                                                              <Text
                                                                style={
                                                                  Array [
                                                                    Object {
                                                                      "color": "rgba(0, 0, 0, 0.87)",
                                                                      "fontFamily": undefined,
                                                                      "fontSize": 14,
                                                                      "fontWeight": "400",
                                                                    },
                                                                    Object {
                                                                      "color": "rgba(0, 0, 0, 0.38)",
                                                                    },
                                                                  ]
                                                                }
                                                              >
                                                                <Text
                                                                  style={
                                                                    Array [
                                                                      Object {
                                                                        "color": "rgba(0, 0, 0, 0.87)",
                                                                        "fontFamily": undefined,
                                                                        "fontSize": 14,
                                                                        "fontWeight": "400",
                                                                      },
                                                                      Object {
                                                                        "color": "rgba(0, 0, 0, 0.38)",
                                                                      },
                                                                    ]
                                                                  }
                                                                >
                                                                  Press "Sign Up" button to see the result.
                                                                </Text>
                                                              </Text>
                                                            </Component>
                                                          </ThemedComponent>
                                                        </Body2>
                                                      </FormattedMessage>
                                                    </ThemedComponent>
                                                  </FormattedMessage>
                                                </View>
                                              </View>
                                            </View>
                                            <JsonFormInternal
                                              initialValues={
                                                Object {
                                                  "email": "asd@as.cd",
                                                  "firstName": "im only",
                                                  "lastName": "testing",
                                                  "password": "abc",
                                                }
                                              }
                                              onSubmit={[Function]}
                                              schema={
                                                Object {
                                                  "description": "Press \\"Sign Up\\" button to see the result.",
                                                  "fields": Array [
                                                    Object {
                                                      "fields": Array [
                                                        Object {
                                                          "label": "First Name",
                                                          "name": "firstName",
                                                          "required": true,
                                                          "type": "text",
                                                        },
                                                        Object {
                                                          "label": "Last Name",
                                                          "name": "lastName",
                                                          "required": true,
                                                          "type": "text",
                                                        },
                                                      ],
                                                      "name": "fullName",
                                                      "type": "inline",
                                                    },
                                                    Object {
                                                      "label": "Email",
                                                      "name": "email",
                                                      "required": true,
                                                      "type": "email",
                                                    },
                                                    Object {
                                                      "label": "Password",
                                                      "name": "password",
                                                      "required": true,
                                                      "type": "password",
                                                    },
                                                    Object {
                                                      "name": "status",
                                                      "type": "status",
                                                    },
                                                    Object {
                                                      "fullWidth": true,
                                                      "name": "submit",
                                                      "title": "Sign up",
                                                      "type": "submit",
                                                    },
                                                  ],
                                                  "initialValues": Object {
                                                    "email": "asd@as.cd",
                                                    "firstName": "im only",
                                                    "lastName": "testing",
                                                    "password": "abc",
                                                  },
                                                  "onSubmit": [Function],
                                                  "title": "Sign up",
                                                  "validateOnBlur": false,
                                                  "validateOnChange": false,
                                                }
                                              }
                                              validateOnBlur={false}
                                              validateOnChange={false}
                                            >
                                              <Formik
                                                description="Press \\"Sign Up\\" button to see the result."
                                                enableReinitialize={false}
                                                initialValues={
                                                  Object {
                                                    "email": "asd@as.cd",
                                                    "firstName": "im only",
                                                    "lastName": "testing",
                                                    "password": "abc",
                                                  }
                                                }
                                                isInitialValid={false}
                                                onSubmit={[Function]}
                                                title="Sign up"
                                                validateOnBlur={false}
                                                validateOnChange={false}
                                              >
                                                <Noop>
                                                  <Component>
                                                    <FormFields
                                                      fields={
                                                        Array [
                                                          Object {
                                                            "fields": Array [
                                                              Object {
                                                                "label": "First Name",
                                                                "name": "firstName",
                                                                "required": true,
                                                                "type": "text",
                                                              },
                                                              Object {
                                                                "label": "Last Name",
                                                                "name": "lastName",
                                                                "required": true,
                                                                "type": "text",
                                                              },
                                                            ],
                                                            "name": "fullName",
                                                            "type": "inline",
                                                          },
                                                          Object {
                                                            "label": "Email",
                                                            "name": "email",
                                                            "required": true,
                                                            "type": "email",
                                                          },
                                                          Object {
                                                            "label": "Password",
                                                            "name": "password",
                                                            "required": true,
                                                            "type": "password",
                                                          },
                                                          Object {
                                                            "name": "status",
                                                            "type": "status",
                                                          },
                                                          Object {
                                                            "fullWidth": true,
                                                            "name": "submit",
                                                            "title": "Sign up",
                                                            "type": "submit",
                                                          },
                                                        ]
                                                      }
                                                    >
                                                      <InlineFields_Noop
                                                        fields={
                                                          Array [
                                                            Object {
                                                              "label": "First Name",
                                                              "name": "firstName",
                                                              "required": true,
                                                              "type": "text",
                                                            },
                                                            Object {
                                                              "label": "Last Name",
                                                              "name": "lastName",
                                                              "required": true,
                                                              "type": "text",
                                                            },
                                                          ]
                                                        }
                                                        key="fullName"
                                                        name="fullName"
                                                        type="inline"
                                                      >
                                                        <ThemedComponent
                                                          fields={
                                                            Array [
                                                              Object {
                                                                "label": "First Name",
                                                                "name": "firstName",
                                                                "required": true,
                                                                "type": "text",
                                                              },
                                                              Object {
                                                                "label": "Last Name",
                                                                "name": "lastName",
                                                                "required": true,
                                                                "type": "text",
                                                              },
                                                            ]
                                                          }
                                                          name="fullName"
                                                          type="inline"
                                                        >
                                                          <Component
                                                            fields={
                                                              Array [
                                                                Object {
                                                                  "label": "First Name",
                                                                  "name": "firstName",
                                                                  "required": true,
                                                                  "type": "text",
                                                                },
                                                                Object {
                                                                  "label": "Last Name",
                                                                  "name": "lastName",
                                                                  "required": true,
                                                                  "type": "text",
                                                                },
                                                              ]
                                                            }
                                                            name="fullName"
                                                            styles={
                                                              Object {
                                                                "fieldContainer": Object {
                                                                  "margin": -8,
                                                                },
                                                                "fieldContainerFill": Object {
                                                                  "flex": 1,
                                                                },
                                                                "root": Object {
                                                                  "flexDirection": "row",
                                                                  "padding": 8,
                                                                },
                                                                "rootLeft": Object {
                                                                  "justifyContent": "flex-start",
                                                                },
                                                                "rootRight": Object {
                                                                  "justifyContent": "flex-end",
                                                                },
                                                              }
                                                            }
                                                            type="inline"
                                                          >
                                                            <View
                                                              style={
                                                                Array [
                                                                  Object {
                                                                    "flexDirection": "row",
                                                                    "padding": 8,
                                                                  },
                                                                  undefined,
                                                                ]
                                                              }
                                                              testID="form-actions"
                                                            >
                                                              <View
                                                                style={
                                                                  Array [
                                                                    Object {
                                                                      "flexDirection": "row",
                                                                      "padding": 8,
                                                                    },
                                                                    undefined,
                                                                  ]
                                                                }
                                                                testID="form-actions"
                                                              >
                                                                <View
                                                                  style={
                                                                    Array [
                                                                      Object {
                                                                        "flexDirection": "row",
                                                                        "padding": 8,
                                                                      },
                                                                      undefined,
                                                                    ]
                                                                  }
                                                                  testID="form-actions"
                                                                >
                                                                  <FormFields
                                                                    FieldWrapper={[Function]}
                                                                    fields={
                                                                      Array [
                                                                        Object {
                                                                          "label": "First Name",
                                                                          "name": "firstName",
                                                                          "required": true,
                                                                          "type": "text",
                                                                        },
                                                                        Object {
                                                                          "label": "Last Name",
                                                                          "name": "lastName",
                                                                          "required": true,
                                                                          "type": "text",
                                                                        },
                                                                      ]
                                                                    }
                                                                    name="fullName"
                                                                    styles={
                                                                      Object {
                                                                        "fieldContainer": Object {
                                                                          "margin": -8,
                                                                        },
                                                                        "fieldContainerFill": Object {
                                                                          "flex": 1,
                                                                        },
                                                                        "root": Object {
                                                                          "flexDirection": "row",
                                                                          "padding": 8,
                                                                        },
                                                                        "rootLeft": Object {
                                                                          "justifyContent": "flex-start",
                                                                        },
                                                                        "rootRight": Object {
                                                                          "justifyContent": "flex-end",
                                                                        },
                                                                      }
                                                                    }
                                                                    type="inline"
                                                                  >
                                                                    <FieldWrapper
                                                                      field={
                                                                        Object {
                                                                          "helperText": undefined,
                                                                          "label": "First Name",
                                                                          "name": "firstName",
                                                                          "placeholder": undefined,
                                                                          "required": true,
                                                                          "title": undefined,
                                                                          "type": "text",
                                                                        }
                                                                      }
                                                                      key="firstName"
                                                                      parent={
                                                                        Object {
                                                                          "FieldWrapper": [Function],
                                                                          "fields": Array [
                                                                            Object {
                                                                              "label": "First Name",
                                                                              "name": "firstName",
                                                                              "required": true,
                                                                              "type": "text",
                                                                            },
                                                                            Object {
                                                                              "label": "Last Name",
                                                                              "name": "lastName",
                                                                              "required": true,
                                                                              "type": "text",
                                                                            },
                                                                          ],
                                                                          "helperText": undefined,
                                                                          "label": undefined,
                                                                          "name": "fullName",
                                                                          "placeholder": undefined,
                                                                          "styles": Object {
                                                                            "fieldContainer": Object {
                                                                              "margin": -8,
                                                                            },
                                                                            "fieldContainerFill": Object {
                                                                              "flex": 1,
                                                                            },
                                                                            "root": Object {
                                                                              "flexDirection": "row",
                                                                              "padding": 8,
                                                                            },
                                                                            "rootLeft": Object {
                                                                              "justifyContent": "flex-start",
                                                                            },
                                                                            "rootRight": Object {
                                                                              "justifyContent": "flex-end",
                                                                            },
                                                                          },
                                                                          "title": undefined,
                                                                          "type": "inline",
                                                                        }
                                                                      }
                                                                    >
                                                                      <View
                                                                        key="firstName"
                                                                        style={
                                                                          Array [
                                                                            Object {
                                                                              "margin": -8,
                                                                            },
                                                                            Object {
                                                                              "flex": 1,
                                                                            },
                                                                          ]
                                                                        }
                                                                      >
                                                                        <View
                                                                          style={
                                                                            Array [
                                                                              Object {
                                                                                "margin": -8,
                                                                              },
                                                                              Object {
                                                                                "flex": 1,
                                                                              },
                                                                            ]
                                                                          }
                                                                        >
                                                                          <View
                                                                            style={
                                                                              Array [
                                                                                Object {
                                                                                  "margin": -8,
                                                                                },
                                                                                Object {
                                                                                  "flex": 1,
                                                                                },
                                                                              ]
                                                                            }
                                                                          >
                                                                            <FormTextInput_TextInput_Noop
                                                                              key="firstName"
                                                                              label="First Name"
                                                                              name="firstName"
                                                                              required={true}
                                                                              type="text"
                                                                            >
                                                                              <ThemedComponent
                                                                                label="First Name"
                                                                                name="firstName"
                                                                                required={true}
                                                                                type="text"
                                                                              >
                                                                                <Component
                                                                                  MainComponent={[Function]}
                                                                                  label="First Name"
                                                                                  name="firstName"
                                                                                  required={true}
                                                                                  type="text"
                                                                                >
                                                                                  <FormikConnect(FieldInner)
                                                                                    MainComponent={[Function]}
                                                                                    label="First Name"
                                                                                    name="firstName"
                                                                                    required={true}
                                                                                    type="text"
                                                                                    validate={[Function]}
                                                                                  >
                                                                                    <FieldInner
                                                                                      MainComponent={[Function]}
                                                                                      formik={
                                                                                        Object {
                                                                                          "dirty": false,
                                                                                          "errors": Object {
                                                                                            "form": Array [
                                                                                              "A network error occurred. This may be because of your network connection, or a server error. Please try again later.",
                                                                                            ],
                                                                                          },
                                                                                          "handleBlur": [Function],
                                                                                          "handleChange": [Function],
                                                                                          "handleReset": [Function],
                                                                                          "handleSubmit": [Function],
                                                                                          "initialValues": Object {
                                                                                            "email": "asd@as.cd",
                                                                                            "firstName": "im only",
                                                                                            "lastName": "testing",
                                                                                            "password": "abc",
                                                                                          },
                                                                                          "isSubmitting": false,
                                                                                          "isValid": false,
                                                                                          "isValidating": false,
                                                                                          "registerField": [Function],
                                                                                          "resetForm": [Function],
                                                                                          "setError": [Function],
                                                                                          "setErrors": [Function],
                                                                                          "setFieldError": [Function],
                                                                                          "setFieldTouched": [Function],
                                                                                          "setFieldValue": [Function],
                                                                                          "setFormikState": [Function],
                                                                                          "setStatus": [Function],
                                                                                          "setSubmitting": [Function],
                                                                                          "setTouched": [Function],
                                                                                          "setValues": [Function],
                                                                                          "status": undefined,
                                                                                          "submitCount": 1,
                                                                                          "submitForm": [Function],
                                                                                          "touched": Object {
                                                                                            "email": true,
                                                                                            "firstName": true,
                                                                                            "lastName": true,
                                                                                            "password": true,
                                                                                          },
                                                                                          "unregisterField": [Function],
                                                                                          "validate": undefined,
                                                                                          "validateField": [Function],
                                                                                          "validateForm": [Function],
                                                                                          "validateOnBlur": false,
                                                                                          "validateOnChange": false,
                                                                                          "validationSchema": undefined,
                                                                                          "values": Object {
                                                                                            "email": "asd@as.cd",
                                                                                            "firstName": "im only",
                                                                                            "lastName": "testing",
                                                                                            "password": "abc",
                                                                                          },
                                                                                        }
                                                                                      }
                                                                                      label="First Name"
                                                                                      name="firstName"
                                                                                      required={true}
                                                                                      type="text"
                                                                                      validate={[Function]}
                                                                                    >
                                                                                      <BaseFormField
                                                                                        MainComponent={[Function]}
                                                                                        label="First Name"
                                                                                        name="firstName"
                                                                                        onBlur={[Function]}
                                                                                        onChangeText={[Function]}
                                                                                        required={true}
                                                                                        type="text"
                                                                                        value="im only"
                                                                                      >
                                                                                        <ThemedComponent
                                                                                          MainComponent={[Function]}
                                                                                          label="First Name"
                                                                                          name="firstName"
                                                                                          onBlur={[Function]}
                                                                                          onChangeText={[Function]}
                                                                                          required={true}
                                                                                          type="text"
                                                                                          value="im only"
                                                                                        >
                                                                                          <BaseFormField
                                                                                            MainComponent={[Function]}
                                                                                            label="First Name"
                                                                                            name="firstName"
                                                                                            onBlur={[Function]}
                                                                                            onChangeText={[Function]}
                                                                                            required={true}
                                                                                            styles={
                                                                                              Object {
                                                                                                "leftContainer": Object {
                                                                                                  "paddingRight": 16,
                                                                                                },
                                                                                                "mainContainer": Object {
                                                                                                  "flex": 1,
                                                                                                },
                                                                                                "rightContainer": Object {
                                                                                                  "paddingLeft": 16,
                                                                                                },
                                                                                                "root": Object {
                                                                                                  "alignItems": "center",
                                                                                                  "flexDirection": "row",
                                                                                                  "justifyContent": "flex-start",
                                                                                                  "paddingHorizontal": 16,
                                                                                                  "paddingVertical": 16,
                                                                                                },
                                                                                              }
                                                                                            }
                                                                                            type="text"
                                                                                            value="im only"
                                                                                          >
                                                                                            <View
                                                                                              style={
                                                                                                Object {
                                                                                                  "alignItems": "center",
                                                                                                  "flexDirection": "row",
                                                                                                  "justifyContent": "flex-start",
                                                                                                  "paddingHorizontal": 16,
                                                                                                  "paddingVertical": 16,
                                                                                                }
                                                                                              }
                                                                                              testID="base-form-field"
                                                                                            >
                                                                                              <View
                                                                                                style={
                                                                                                  Object {
                                                                                                    "alignItems": "center",
                                                                                                    "flexDirection": "row",
                                                                                                    "justifyContent": "flex-start",
                                                                                                    "paddingHorizontal": 16,
                                                                                                    "paddingVertical": 16,
                                                                                                  }
                                                                                                }
                                                                                                testID="base-form-field"
                                                                                              >
                                                                                                <View
                                                                                                  style={
                                                                                                    Object {
                                                                                                      "alignItems": "center",
                                                                                                      "flexDirection": "row",
                                                                                                      "justifyContent": "flex-start",
                                                                                                      "paddingHorizontal": 16,
                                                                                                      "paddingVertical": 16,
                                                                                                    }
                                                                                                  }
                                                                                                  testID="base-form-field"
                                                                                                >
                                                                                                  <View
                                                                                                    style={
                                                                                                      Object {
                                                                                                        "flex": 1,
                                                                                                      }
                                                                                                    }
                                                                                                    testID="base-form-field-main"
                                                                                                  >
                                                                                                    <View
                                                                                                      style={
                                                                                                        Object {
                                                                                                          "flex": 1,
                                                                                                        }
                                                                                                      }
                                                                                                      testID="base-form-field-main"
                                                                                                    >
                                                                                                      <View
                                                                                                        style={
                                                                                                          Object {
                                                                                                            "flex": 1,
                                                                                                          }
                                                                                                        }
                                                                                                        testID="base-form-field-main"
                                                                                                      >
                                                                                                        <TextInput
                                                                                                          label="First Name"
                                                                                                          name="firstName"
                                                                                                          onBlur={[Function]}
                                                                                                          onChangeText={[Function]}
                                                                                                          required={true}
                                                                                                          type="text"
                                                                                                          value="im only"
                                                                                                        >
                                                                                                          <ThemedComponent
                                                                                                            label="First Name"
                                                                                                            name="firstName"
                                                                                                            onBlur={[Function]}
                                                                                                            onChangeText={[Function]}
                                                                                                            required={true}
                                                                                                            type="text"
                                                                                                            value="im only"
                                                                                                          >
                                                                                                            <TextInput
                                                                                                              allowFontScaling={true}
                                                                                                              label="First Name"
                                                                                                              name="firstName"
                                                                                                              onBlur={[Function]}
                                                                                                              onChangeText={[Function]}
                                                                                                              required={true}
                                                                                                              type="text"
                                                                                                              underlineColorAndroid="transparent"
                                                                                                              value="im only"
                                                                                                            >
                                                                                                              <TextInput
                                                                                                                allowFontScaling={true}
                                                                                                                label="First Name"
                                                                                                                name="firstName"
                                                                                                                onBlur={[Function]}
                                                                                                                onChangeText={[Function]}
                                                                                                                required={true}
                                                                                                                type="text"
                                                                                                                underlineColorAndroid="transparent"
                                                                                                                value="im only"
                                                                                                              />
                                                                                                            </TextInput>
                                                                                                          </ThemedComponent>
                                                                                                        </TextInput>
                                                                                                      </View>
                                                                                                    </View>
                                                                                                  </View>
                                                                                                </View>
                                                                                              </View>
                                                                                            </View>
                                                                                          </BaseFormField>
                                                                                        </ThemedComponent>
                                                                                      </BaseFormField>
                                                                                    </FieldInner>
                                                                                  </FormikConnect(FieldInner)>
                                                                                </Component>
                                                                              </ThemedComponent>
                                                                            </FormTextInput_TextInput_Noop>
                                                                          </View>
                                                                        </View>
                                                                      </View>
                                                                    </FieldWrapper>
                                                                    <FieldWrapper
                                                                      field={
                                                                        Object {
                                                                          "helperText": undefined,
                                                                          "label": "Last Name",
                                                                          "name": "lastName",
                                                                          "placeholder": undefined,
                                                                          "required": true,
                                                                          "title": undefined,
                                                                          "type": "text",
                                                                        }
                                                                      }
                                                                      key="lastName"
                                                                      parent={
                                                                        Object {
                                                                          "FieldWrapper": [Function],
                                                                          "fields": Array [
                                                                            Object {
                                                                              "label": "First Name",
                                                                              "name": "firstName",
                                                                              "required": true,
                                                                              "type": "text",
                                                                            },
                                                                            Object {
                                                                              "label": "Last Name",
                                                                              "name": "lastName",
                                                                              "required": true,
                                                                              "type": "text",
                                                                            },
                                                                          ],
                                                                          "helperText": undefined,
                                                                          "label": undefined,
                                                                          "name": "fullName",
                                                                          "placeholder": undefined,
                                                                          "styles": Object {
                                                                            "fieldContainer": Object {
                                                                              "margin": -8,
                                                                            },
                                                                            "fieldContainerFill": Object {
                                                                              "flex": 1,
                                                                            },
                                                                            "root": Object {
                                                                              "flexDirection": "row",
                                                                              "padding": 8,
                                                                            },
                                                                            "rootLeft": Object {
                                                                              "justifyContent": "flex-start",
                                                                            },
                                                                            "rootRight": Object {
                                                                              "justifyContent": "flex-end",
                                                                            },
                                                                          },
                                                                          "title": undefined,
                                                                          "type": "inline",
                                                                        }
                                                                      }
                                                                    >
                                                                      <View
                                                                        key="lastName"
                                                                        style={
                                                                          Array [
                                                                            Object {
                                                                              "margin": -8,
                                                                            },
                                                                            Object {
                                                                              "flex": 1,
                                                                            },
                                                                          ]
                                                                        }
                                                                      >
                                                                        <View
                                                                          style={
                                                                            Array [
                                                                              Object {
                                                                                "margin": -8,
                                                                              },
                                                                              Object {
                                                                                "flex": 1,
                                                                              },
                                                                            ]
                                                                          }
                                                                        >
                                                                          <View
                                                                            style={
                                                                              Array [
                                                                                Object {
                                                                                  "margin": -8,
                                                                                },
                                                                                Object {
                                                                                  "flex": 1,
                                                                                },
                                                                              ]
                                                                            }
                                                                          >
                                                                            <FormTextInput_TextInput_Noop
                                                                              key="lastName"
                                                                              label="Last Name"
                                                                              name="lastName"
                                                                              required={true}
                                                                              type="text"
                                                                            >
                                                                              <ThemedComponent
                                                                                label="Last Name"
                                                                                name="lastName"
                                                                                required={true}
                                                                                type="text"
                                                                              >
                                                                                <Component
                                                                                  MainComponent={[Function]}
                                                                                  label="Last Name"
                                                                                  name="lastName"
                                                                                  required={true}
                                                                                  type="text"
                                                                                >
                                                                                  <FormikConnect(FieldInner)
                                                                                    MainComponent={[Function]}
                                                                                    label="Last Name"
                                                                                    name="lastName"
                                                                                    required={true}
                                                                                    type="text"
                                                                                    validate={[Function]}
                                                                                  >
                                                                                    <FieldInner
                                                                                      MainComponent={[Function]}
                                                                                      formik={
                                                                                        Object {
                                                                                          "dirty": false,
                                                                                          "errors": Object {
                                                                                            "form": Array [
                                                                                              "A network error occurred. This may be because of your network connection, or a server error. Please try again later.",
                                                                                            ],
                                                                                          },
                                                                                          "handleBlur": [Function],
                                                                                          "handleChange": [Function],
                                                                                          "handleReset": [Function],
                                                                                          "handleSubmit": [Function],
                                                                                          "initialValues": Object {
                                                                                            "email": "asd@as.cd",
                                                                                            "firstName": "im only",
                                                                                            "lastName": "testing",
                                                                                            "password": "abc",
                                                                                          },
                                                                                          "isSubmitting": false,
                                                                                          "isValid": false,
                                                                                          "isValidating": false,
                                                                                          "registerField": [Function],
                                                                                          "resetForm": [Function],
                                                                                          "setError": [Function],
                                                                                          "setErrors": [Function],
                                                                                          "setFieldError": [Function],
                                                                                          "setFieldTouched": [Function],
                                                                                          "setFieldValue": [Function],
                                                                                          "setFormikState": [Function],
                                                                                          "setStatus": [Function],
                                                                                          "setSubmitting": [Function],
                                                                                          "setTouched": [Function],
                                                                                          "setValues": [Function],
                                                                                          "status": undefined,
                                                                                          "submitCount": 1,
                                                                                          "submitForm": [Function],
                                                                                          "touched": Object {
                                                                                            "email": true,
                                                                                            "firstName": true,
                                                                                            "lastName": true,
                                                                                            "password": true,
                                                                                          },
                                                                                          "unregisterField": [Function],
                                                                                          "validate": undefined,
                                                                                          "validateField": [Function],
                                                                                          "validateForm": [Function],
                                                                                          "validateOnBlur": false,
                                                                                          "validateOnChange": false,
                                                                                          "validationSchema": undefined,
                                                                                          "values": Object {
                                                                                            "email": "asd@as.cd",
                                                                                            "firstName": "im only",
                                                                                            "lastName": "testing",
                                                                                            "password": "abc",
                                                                                          },
                                                                                        }
                                                                                      }
                                                                                      label="Last Name"
                                                                                      name="lastName"
                                                                                      required={true}
                                                                                      type="text"
                                                                                      validate={[Function]}
                                                                                    >
                                                                                      <BaseFormField
                                                                                        MainComponent={[Function]}
                                                                                        label="Last Name"
                                                                                        name="lastName"
                                                                                        onBlur={[Function]}
                                                                                        onChangeText={[Function]}
                                                                                        required={true}
                                                                                        type="text"
                                                                                        value="testing"
                                                                                      >
                                                                                        <ThemedComponent
                                                                                          MainComponent={[Function]}
                                                                                          label="Last Name"
                                                                                          name="lastName"
                                                                                          onBlur={[Function]}
                                                                                          onChangeText={[Function]}
                                                                                          required={true}
                                                                                          type="text"
                                                                                          value="testing"
                                                                                        >
                                                                                          <BaseFormField
                                                                                            MainComponent={[Function]}
                                                                                            label="Last Name"
                                                                                            name="lastName"
                                                                                            onBlur={[Function]}
                                                                                            onChangeText={[Function]}
                                                                                            required={true}
                                                                                            styles={
                                                                                              Object {
                                                                                                "leftContainer": Object {
                                                                                                  "paddingRight": 16,
                                                                                                },
                                                                                                "mainContainer": Object {
                                                                                                  "flex": 1,
                                                                                                },
                                                                                                "rightContainer": Object {
                                                                                                  "paddingLeft": 16,
                                                                                                },
                                                                                                "root": Object {
                                                                                                  "alignItems": "center",
                                                                                                  "flexDirection": "row",
                                                                                                  "justifyContent": "flex-start",
                                                                                                  "paddingHorizontal": 16,
                                                                                                  "paddingVertical": 16,
                                                                                                },
                                                                                              }
                                                                                            }
                                                                                            type="text"
                                                                                            value="testing"
                                                                                          >
                                                                                            <View
                                                                                              style={
                                                                                                Object {
                                                                                                  "alignItems": "center",
                                                                                                  "flexDirection": "row",
                                                                                                  "justifyContent": "flex-start",
                                                                                                  "paddingHorizontal": 16,
                                                                                                  "paddingVertical": 16,
                                                                                                }
                                                                                              }
                                                                                              testID="base-form-field"
                                                                                            >
                                                                                              <View
                                                                                                style={
                                                                                                  Object {
                                                                                                    "alignItems": "center",
                                                                                                    "flexDirection": "row",
                                                                                                    "justifyContent": "flex-start",
                                                                                                    "paddingHorizontal": 16,
                                                                                                    "paddingVertical": 16,
                                                                                                  }
                                                                                                }
                                                                                                testID="base-form-field"
                                                                                              >
                                                                                                <View
                                                                                                  style={
                                                                                                    Object {
                                                                                                      "alignItems": "center",
                                                                                                      "flexDirection": "row",
                                                                                                      "justifyContent": "flex-start",
                                                                                                      "paddingHorizontal": 16,
                                                                                                      "paddingVertical": 16,
                                                                                                    }
                                                                                                  }
                                                                                                  testID="base-form-field"
                                                                                                >
                                                                                                  <View
                                                                                                    style={
                                                                                                      Object {
                                                                                                        "flex": 1,
                                                                                                      }
                                                                                                    }
                                                                                                    testID="base-form-field-main"
                                                                                                  >
                                                                                                    <View
                                                                                                      style={
                                                                                                        Object {
                                                                                                          "flex": 1,
                                                                                                        }
                                                                                                      }
                                                                                                      testID="base-form-field-main"
                                                                                                    >
                                                                                                      <View
                                                                                                        style={
                                                                                                          Object {
                                                                                                            "flex": 1,
                                                                                                          }
                                                                                                        }
                                                                                                        testID="base-form-field-main"
                                                                                                      >
                                                                                                        <TextInput
                                                                                                          label="Last Name"
                                                                                                          name="lastName"
                                                                                                          onBlur={[Function]}
                                                                                                          onChangeText={[Function]}
                                                                                                          required={true}
                                                                                                          type="text"
                                                                                                          value="testing"
                                                                                                        >
                                                                                                          <ThemedComponent
                                                                                                            label="Last Name"
                                                                                                            name="lastName"
                                                                                                            onBlur={[Function]}
                                                                                                            onChangeText={[Function]}
                                                                                                            required={true}
                                                                                                            type="text"
                                                                                                            value="testing"
                                                                                                          >
                                                                                                            <TextInput
                                                                                                              allowFontScaling={true}
                                                                                                              label="Last Name"
                                                                                                              name="lastName"
                                                                                                              onBlur={[Function]}
                                                                                                              onChangeText={[Function]}
                                                                                                              required={true}
                                                                                                              type="text"
                                                                                                              underlineColorAndroid="transparent"
                                                                                                              value="testing"
                                                                                                            >
                                                                                                              <TextInput
                                                                                                                allowFontScaling={true}
                                                                                                                label="Last Name"
                                                                                                                name="lastName"
                                                                                                                onBlur={[Function]}
                                                                                                                onChangeText={[Function]}
                                                                                                                required={true}
                                                                                                                type="text"
                                                                                                                underlineColorAndroid="transparent"
                                                                                                                value="testing"
                                                                                                              />
                                                                                                            </TextInput>
                                                                                                          </ThemedComponent>
                                                                                                        </TextInput>
                                                                                                      </View>
                                                                                                    </View>
                                                                                                  </View>
                                                                                                </View>
                                                                                              </View>
                                                                                            </View>
                                                                                          </BaseFormField>
                                                                                        </ThemedComponent>
                                                                                      </BaseFormField>
                                                                                    </FieldInner>
                                                                                  </FormikConnect(FieldInner)>
                                                                                </Component>
                                                                              </ThemedComponent>
                                                                            </FormTextInput_TextInput_Noop>
                                                                          </View>
                                                                        </View>
                                                                      </View>
                                                                    </FieldWrapper>
                                                                  </FormFields>
                                                                </View>
                                                              </View>
                                                            </View>
                                                          </Component>
                                                        </ThemedComponent>
                                                      </InlineFields_Noop>
                                                      <FormEmailInput_FormTextInput_TextInput_Noop
                                                        key="email"
                                                        label="Email"
                                                        name="email"
                                                        required={true}
                                                        type="email"
                                                      >
                                                        <ThemedComponent
                                                          label="Email"
                                                          name="email"
                                                          required={true}
                                                          type="email"
                                                        >
                                                          <Component
                                                            label="Email"
                                                            name="email"
                                                            required={true}
                                                            type="email"
                                                          >
                                                            <FormTextInput
                                                              autoCapitalize="none"
                                                              keyboardType="email-address"
                                                              label="Email"
                                                              name="email"
                                                              required={true}
                                                              type="email"
                                                            >
                                                              <ThemedComponent
                                                                autoCapitalize="none"
                                                                keyboardType="email-address"
                                                                label="Email"
                                                                name="email"
                                                                required={true}
                                                                type="email"
                                                              >
                                                                <Component
                                                                  MainComponent={[Function]}
                                                                  autoCapitalize="none"
                                                                  keyboardType="email-address"
                                                                  label="Email"
                                                                  name="email"
                                                                  required={true}
                                                                  type="email"
                                                                >
                                                                  <FormikConnect(FieldInner)
                                                                    MainComponent={[Function]}
                                                                    autoCapitalize="none"
                                                                    keyboardType="email-address"
                                                                    label="Email"
                                                                    name="email"
                                                                    required={true}
                                                                    type="email"
                                                                    validate={[Function]}
                                                                  >
                                                                    <FieldInner
                                                                      MainComponent={[Function]}
                                                                      autoCapitalize="none"
                                                                      formik={
                                                                        Object {
                                                                          "dirty": false,
                                                                          "errors": Object {
                                                                            "form": Array [
                                                                              "A network error occurred. This may be because of your network connection, or a server error. Please try again later.",
                                                                            ],
                                                                          },
                                                                          "handleBlur": [Function],
                                                                          "handleChange": [Function],
                                                                          "handleReset": [Function],
                                                                          "handleSubmit": [Function],
                                                                          "initialValues": Object {
                                                                            "email": "asd@as.cd",
                                                                            "firstName": "im only",
                                                                            "lastName": "testing",
                                                                            "password": "abc",
                                                                          },
                                                                          "isSubmitting": false,
                                                                          "isValid": false,
                                                                          "isValidating": false,
                                                                          "registerField": [Function],
                                                                          "resetForm": [Function],
                                                                          "setError": [Function],
                                                                          "setErrors": [Function],
                                                                          "setFieldError": [Function],
                                                                          "setFieldTouched": [Function],
                                                                          "setFieldValue": [Function],
                                                                          "setFormikState": [Function],
                                                                          "setStatus": [Function],
                                                                          "setSubmitting": [Function],
                                                                          "setTouched": [Function],
                                                                          "setValues": [Function],
                                                                          "status": undefined,
                                                                          "submitCount": 1,
                                                                          "submitForm": [Function],
                                                                          "touched": Object {
                                                                            "email": true,
                                                                            "firstName": true,
                                                                            "lastName": true,
                                                                            "password": true,
                                                                          },
                                                                          "unregisterField": [Function],
                                                                          "validate": undefined,
                                                                          "validateField": [Function],
                                                                          "validateForm": [Function],
                                                                          "validateOnBlur": false,
                                                                          "validateOnChange": false,
                                                                          "validationSchema": undefined,
                                                                          "values": Object {
                                                                            "email": "asd@as.cd",
                                                                            "firstName": "im only",
                                                                            "lastName": "testing",
                                                                            "password": "abc",
                                                                          },
                                                                        }
                                                                      }
                                                                      keyboardType="email-address"
                                                                      label="Email"
                                                                      name="email"
                                                                      required={true}
                                                                      type="email"
                                                                      validate={[Function]}
                                                                    >
                                                                      <BaseFormField
                                                                        MainComponent={[Function]}
                                                                        autoCapitalize="none"
                                                                        keyboardType="email-address"
                                                                        label="Email"
                                                                        name="email"
                                                                        onBlur={[Function]}
                                                                        onChangeText={[Function]}
                                                                        required={true}
                                                                        type="email"
                                                                        value="asd@as.cd"
                                                                      >
                                                                        <ThemedComponent
                                                                          MainComponent={[Function]}
                                                                          autoCapitalize="none"
                                                                          keyboardType="email-address"
                                                                          label="Email"
                                                                          name="email"
                                                                          onBlur={[Function]}
                                                                          onChangeText={[Function]}
                                                                          required={true}
                                                                          type="email"
                                                                          value="asd@as.cd"
                                                                        >
                                                                          <BaseFormField
                                                                            MainComponent={[Function]}
                                                                            autoCapitalize="none"
                                                                            keyboardType="email-address"
                                                                            label="Email"
                                                                            name="email"
                                                                            onBlur={[Function]}
                                                                            onChangeText={[Function]}
                                                                            required={true}
                                                                            styles={
                                                                              Object {
                                                                                "leftContainer": Object {
                                                                                  "paddingRight": 16,
                                                                                },
                                                                                "mainContainer": Object {
                                                                                  "flex": 1,
                                                                                },
                                                                                "rightContainer": Object {
                                                                                  "paddingLeft": 16,
                                                                                },
                                                                                "root": Object {
                                                                                  "alignItems": "center",
                                                                                  "flexDirection": "row",
                                                                                  "justifyContent": "flex-start",
                                                                                  "paddingHorizontal": 16,
                                                                                  "paddingVertical": 16,
                                                                                },
                                                                              }
                                                                            }
                                                                            type="email"
                                                                            value="asd@as.cd"
                                                                          >
                                                                            <View
                                                                              style={
                                                                                Object {
                                                                                  "alignItems": "center",
                                                                                  "flexDirection": "row",
                                                                                  "justifyContent": "flex-start",
                                                                                  "paddingHorizontal": 16,
                                                                                  "paddingVertical": 16,
                                                                                }
                                                                              }
                                                                              testID="base-form-field"
                                                                            >
                                                                              <View
                                                                                style={
                                                                                  Object {
                                                                                    "alignItems": "center",
                                                                                    "flexDirection": "row",
                                                                                    "justifyContent": "flex-start",
                                                                                    "paddingHorizontal": 16,
                                                                                    "paddingVertical": 16,
                                                                                  }
                                                                                }
                                                                                testID="base-form-field"
                                                                              >
                                                                                <View
                                                                                  style={
                                                                                    Object {
                                                                                      "alignItems": "center",
                                                                                      "flexDirection": "row",
                                                                                      "justifyContent": "flex-start",
                                                                                      "paddingHorizontal": 16,
                                                                                      "paddingVertical": 16,
                                                                                    }
                                                                                  }
                                                                                  testID="base-form-field"
                                                                                >
                                                                                  <View
                                                                                    style={
                                                                                      Object {
                                                                                        "flex": 1,
                                                                                      }
                                                                                    }
                                                                                    testID="base-form-field-main"
                                                                                  >
                                                                                    <View
                                                                                      style={
                                                                                        Object {
                                                                                          "flex": 1,
                                                                                        }
                                                                                      }
                                                                                      testID="base-form-field-main"
                                                                                    >
                                                                                      <View
                                                                                        style={
                                                                                          Object {
                                                                                            "flex": 1,
                                                                                          }
                                                                                        }
                                                                                        testID="base-form-field-main"
                                                                                      >
                                                                                        <TextInput
                                                                                          autoCapitalize="none"
                                                                                          keyboardType="email-address"
                                                                                          label="Email"
                                                                                          name="email"
                                                                                          onBlur={[Function]}
                                                                                          onChangeText={[Function]}
                                                                                          required={true}
                                                                                          type="email"
                                                                                          value="asd@as.cd"
                                                                                        >
                                                                                          <ThemedComponent
                                                                                            autoCapitalize="none"
                                                                                            keyboardType="email-address"
                                                                                            label="Email"
                                                                                            name="email"
                                                                                            onBlur={[Function]}
                                                                                            onChangeText={[Function]}
                                                                                            required={true}
                                                                                            type="email"
                                                                                            value="asd@as.cd"
                                                                                          >
                                                                                            <TextInput
                                                                                              allowFontScaling={true}
                                                                                              autoCapitalize="none"
                                                                                              keyboardType="email-address"
                                                                                              label="Email"
                                                                                              name="email"
                                                                                              onBlur={[Function]}
                                                                                              onChangeText={[Function]}
                                                                                              required={true}
                                                                                              type="email"
                                                                                              underlineColorAndroid="transparent"
                                                                                              value="asd@as.cd"
                                                                                            >
                                                                                              <TextInput
                                                                                                allowFontScaling={true}
                                                                                                autoCapitalize="none"
                                                                                                keyboardType="email-address"
                                                                                                label="Email"
                                                                                                name="email"
                                                                                                onBlur={[Function]}
                                                                                                onChangeText={[Function]}
                                                                                                required={true}
                                                                                                type="email"
                                                                                                underlineColorAndroid="transparent"
                                                                                                value="asd@as.cd"
                                                                                              />
                                                                                            </TextInput>
                                                                                          </ThemedComponent>
                                                                                        </TextInput>
                                                                                      </View>
                                                                                    </View>
                                                                                  </View>
                                                                                </View>
                                                                              </View>
                                                                            </View>
                                                                          </BaseFormField>
                                                                        </ThemedComponent>
                                                                      </BaseFormField>
                                                                    </FieldInner>
                                                                  </FormikConnect(FieldInner)>
                                                                </Component>
                                                              </ThemedComponent>
                                                            </FormTextInput>
                                                          </Component>
                                                        </ThemedComponent>
                                                      </FormEmailInput_FormTextInput_TextInput_Noop>
                                                      <FormPasswordInput_FormTextInput_TextInput_Noop
                                                        key="password"
                                                        label="Password"
                                                        name="password"
                                                        required={true}
                                                        type="password"
                                                      >
                                                        <ThemedComponent
                                                          label="Password"
                                                          name="password"
                                                          required={true}
                                                          type="password"
                                                        >
                                                          <Component
                                                            label="Password"
                                                            name="password"
                                                            required={true}
                                                            type="password"
                                                          >
                                                            <FormTextInput
                                                              label="Password"
                                                              name="password"
                                                              required={true}
                                                              secureTextEntry={true}
                                                              type="password"
                                                            >
                                                              <ThemedComponent
                                                                label="Password"
                                                                name="password"
                                                                required={true}
                                                                secureTextEntry={true}
                                                                type="password"
                                                              >
                                                                <Component
                                                                  MainComponent={[Function]}
                                                                  label="Password"
                                                                  name="password"
                                                                  required={true}
                                                                  secureTextEntry={true}
                                                                  type="password"
                                                                >
                                                                  <FormikConnect(FieldInner)
                                                                    MainComponent={[Function]}
                                                                    label="Password"
                                                                    name="password"
                                                                    required={true}
                                                                    secureTextEntry={true}
                                                                    type="password"
                                                                    validate={[Function]}
                                                                  >
                                                                    <FieldInner
                                                                      MainComponent={[Function]}
                                                                      formik={
                                                                        Object {
                                                                          "dirty": false,
                                                                          "errors": Object {
                                                                            "form": Array [
                                                                              "A network error occurred. This may be because of your network connection, or a server error. Please try again later.",
                                                                            ],
                                                                          },
                                                                          "handleBlur": [Function],
                                                                          "handleChange": [Function],
                                                                          "handleReset": [Function],
                                                                          "handleSubmit": [Function],
                                                                          "initialValues": Object {
                                                                            "email": "asd@as.cd",
                                                                            "firstName": "im only",
                                                                            "lastName": "testing",
                                                                            "password": "abc",
                                                                          },
                                                                          "isSubmitting": false,
                                                                          "isValid": false,
                                                                          "isValidating": false,
                                                                          "registerField": [Function],
                                                                          "resetForm": [Function],
                                                                          "setError": [Function],
                                                                          "setErrors": [Function],
                                                                          "setFieldError": [Function],
                                                                          "setFieldTouched": [Function],
                                                                          "setFieldValue": [Function],
                                                                          "setFormikState": [Function],
                                                                          "setStatus": [Function],
                                                                          "setSubmitting": [Function],
                                                                          "setTouched": [Function],
                                                                          "setValues": [Function],
                                                                          "status": undefined,
                                                                          "submitCount": 1,
                                                                          "submitForm": [Function],
                                                                          "touched": Object {
                                                                            "email": true,
                                                                            "firstName": true,
                                                                            "lastName": true,
                                                                            "password": true,
                                                                          },
                                                                          "unregisterField": [Function],
                                                                          "validate": undefined,
                                                                          "validateField": [Function],
                                                                          "validateForm": [Function],
                                                                          "validateOnBlur": false,
                                                                          "validateOnChange": false,
                                                                          "validationSchema": undefined,
                                                                          "values": Object {
                                                                            "email": "asd@as.cd",
                                                                            "firstName": "im only",
                                                                            "lastName": "testing",
                                                                            "password": "abc",
                                                                          },
                                                                        }
                                                                      }
                                                                      label="Password"
                                                                      name="password"
                                                                      required={true}
                                                                      secureTextEntry={true}
                                                                      type="password"
                                                                      validate={[Function]}
                                                                    >
                                                                      <BaseFormField
                                                                        MainComponent={[Function]}
                                                                        label="Password"
                                                                        name="password"
                                                                        onBlur={[Function]}
                                                                        onChangeText={[Function]}
                                                                        required={true}
                                                                        secureTextEntry={true}
                                                                        type="password"
                                                                        value="abc"
                                                                      >
                                                                        <ThemedComponent
                                                                          MainComponent={[Function]}
                                                                          label="Password"
                                                                          name="password"
                                                                          onBlur={[Function]}
                                                                          onChangeText={[Function]}
                                                                          required={true}
                                                                          secureTextEntry={true}
                                                                          type="password"
                                                                          value="abc"
                                                                        >
                                                                          <BaseFormField
                                                                            MainComponent={[Function]}
                                                                            label="Password"
                                                                            name="password"
                                                                            onBlur={[Function]}
                                                                            onChangeText={[Function]}
                                                                            required={true}
                                                                            secureTextEntry={true}
                                                                            styles={
                                                                              Object {
                                                                                "leftContainer": Object {
                                                                                  "paddingRight": 16,
                                                                                },
                                                                                "mainContainer": Object {
                                                                                  "flex": 1,
                                                                                },
                                                                                "rightContainer": Object {
                                                                                  "paddingLeft": 16,
                                                                                },
                                                                                "root": Object {
                                                                                  "alignItems": "center",
                                                                                  "flexDirection": "row",
                                                                                  "justifyContent": "flex-start",
                                                                                  "paddingHorizontal": 16,
                                                                                  "paddingVertical": 16,
                                                                                },
                                                                              }
                                                                            }
                                                                            type="password"
                                                                            value="abc"
                                                                          >
                                                                            <View
                                                                              style={
                                                                                Object {
                                                                                  "alignItems": "center",
                                                                                  "flexDirection": "row",
                                                                                  "justifyContent": "flex-start",
                                                                                  "paddingHorizontal": 16,
                                                                                  "paddingVertical": 16,
                                                                                }
                                                                              }
                                                                              testID="base-form-field"
                                                                            >
                                                                              <View
                                                                                style={
                                                                                  Object {
                                                                                    "alignItems": "center",
                                                                                    "flexDirection": "row",
                                                                                    "justifyContent": "flex-start",
                                                                                    "paddingHorizontal": 16,
                                                                                    "paddingVertical": 16,
                                                                                  }
                                                                                }
                                                                                testID="base-form-field"
                                                                              >
                                                                                <View
                                                                                  style={
                                                                                    Object {
                                                                                      "alignItems": "center",
                                                                                      "flexDirection": "row",
                                                                                      "justifyContent": "flex-start",
                                                                                      "paddingHorizontal": 16,
                                                                                      "paddingVertical": 16,
                                                                                    }
                                                                                  }
                                                                                  testID="base-form-field"
                                                                                >
                                                                                  <View
                                                                                    style={
                                                                                      Object {
                                                                                        "flex": 1,
                                                                                      }
                                                                                    }
                                                                                    testID="base-form-field-main"
                                                                                  >
                                                                                    <View
                                                                                      style={
                                                                                        Object {
                                                                                          "flex": 1,
                                                                                        }
                                                                                      }
                                                                                      testID="base-form-field-main"
                                                                                    >
                                                                                      <View
                                                                                        style={
                                                                                          Object {
                                                                                            "flex": 1,
                                                                                          }
                                                                                        }
                                                                                        testID="base-form-field-main"
                                                                                      >
                                                                                        <TextInput
                                                                                          label="Password"
                                                                                          name="password"
                                                                                          onBlur={[Function]}
                                                                                          onChangeText={[Function]}
                                                                                          required={true}
                                                                                          secureTextEntry={true}
                                                                                          type="password"
                                                                                          value="abc"
                                                                                        >
                                                                                          <ThemedComponent
                                                                                            label="Password"
                                                                                            name="password"
                                                                                            onBlur={[Function]}
                                                                                            onChangeText={[Function]}
                                                                                            required={true}
                                                                                            secureTextEntry={true}
                                                                                            type="password"
                                                                                            value="abc"
                                                                                          >
                                                                                            <TextInput
                                                                                              allowFontScaling={true}
                                                                                              label="Password"
                                                                                              name="password"
                                                                                              onBlur={[Function]}
                                                                                              onChangeText={[Function]}
                                                                                              required={true}
                                                                                              secureTextEntry={true}
                                                                                              type="password"
                                                                                              underlineColorAndroid="transparent"
                                                                                              value="abc"
                                                                                            >
                                                                                              <TextInput
                                                                                                allowFontScaling={true}
                                                                                                label="Password"
                                                                                                name="password"
                                                                                                onBlur={[Function]}
                                                                                                onChangeText={[Function]}
                                                                                                required={true}
                                                                                                secureTextEntry={true}
                                                                                                type="password"
                                                                                                underlineColorAndroid="transparent"
                                                                                                value="abc"
                                                                                              />
                                                                                            </TextInput>
                                                                                          </ThemedComponent>
                                                                                        </TextInput>
                                                                                      </View>
                                                                                    </View>
                                                                                  </View>
                                                                                </View>
                                                                              </View>
                                                                            </View>
                                                                          </BaseFormField>
                                                                        </ThemedComponent>
                                                                      </BaseFormField>
                                                                    </FieldInner>
                                                                  </FormikConnect(FieldInner)>
                                                                </Component>
                                                              </ThemedComponent>
                                                            </FormTextInput>
                                                          </Component>
                                                        </ThemedComponent>
                                                      </FormPasswordInput_FormTextInput_TextInput_Noop>
                                                      <FormStatus
                                                        key="status"
                                                        name="status"
                                                        type="status"
                                                      >
                                                        <ThemedComponent
                                                          name="status"
                                                          type="status"
                                                        >
                                                          <FormikConnect(Function)
                                                            name="status"
                                                            type="status"
                                                          >
                                                            <Component
                                                              formik={
                                                                Object {
                                                                  "dirty": false,
                                                                  "errors": Object {
                                                                    "form": Array [
                                                                      "A network error occurred. This may be because of your network connection, or a server error. Please try again later.",
                                                                    ],
                                                                  },
                                                                  "handleBlur": [Function],
                                                                  "handleChange": [Function],
                                                                  "handleReset": [Function],
                                                                  "handleSubmit": [Function],
                                                                  "initialValues": Object {
                                                                    "email": "asd@as.cd",
                                                                    "firstName": "im only",
                                                                    "lastName": "testing",
                                                                    "password": "abc",
                                                                  },
                                                                  "isSubmitting": false,
                                                                  "isValid": false,
                                                                  "isValidating": false,
                                                                  "registerField": [Function],
                                                                  "resetForm": [Function],
                                                                  "setError": [Function],
                                                                  "setErrors": [Function],
                                                                  "setFieldError": [Function],
                                                                  "setFieldTouched": [Function],
                                                                  "setFieldValue": [Function],
                                                                  "setFormikState": [Function],
                                                                  "setStatus": [Function],
                                                                  "setSubmitting": [Function],
                                                                  "setTouched": [Function],
                                                                  "setValues": [Function],
                                                                  "status": undefined,
                                                                  "submitCount": 1,
                                                                  "submitForm": [Function],
                                                                  "touched": Object {
                                                                    "email": true,
                                                                    "firstName": true,
                                                                    "lastName": true,
                                                                    "password": true,
                                                                  },
                                                                  "unregisterField": [Function],
                                                                  "validate": undefined,
                                                                  "validateField": [Function],
                                                                  "validateForm": [Function],
                                                                  "validateOnBlur": false,
                                                                  "validateOnChange": false,
                                                                  "validationSchema": undefined,
                                                                  "values": Object {
                                                                    "email": "asd@as.cd",
                                                                    "firstName": "im only",
                                                                    "lastName": "testing",
                                                                    "password": "abc",
                                                                  },
                                                                }
                                                              }
                                                              name="status"
                                                              type="status"
                                                            >
                                                              <FormStatusList
                                                                items={Array []}
                                                                type="success"
                                                              >
                                                                <ThemedComponent
                                                                  items={Array []}
                                                                  type="success"
                                                                >
                                                                  <Component
                                                                    items={Array []}
                                                                    styles={
                                                                      Object {
                                                                        "error": Object {
                                                                          "backgroundColor": "#ffebee",
                                                                          "borderColor": "#f44336",
                                                                        },
                                                                        "root": Object {
                                                                          "borderRadius": 4,
                                                                          "borderWidth": 1,
                                                                          "marginHorizontal": 16,
                                                                        },
                                                                        "success": Object {
                                                                          "backgroundColor": "#e8f5e9",
                                                                          "borderColor": "#4caf50",
                                                                        },
                                                                        "warning": Object {
                                                                          "backgroundColor": "#fff3e0",
                                                                          "borderColor": "#ffa000",
                                                                        },
                                                                      }
                                                                    }
                                                                    type="success"
                                                                  />
                                                                </ThemedComponent>
                                                              </FormStatusList>
                                                              <FormStatusList
                                                                items={Array []}
                                                                type="warning"
                                                              >
                                                                <ThemedComponent
                                                                  items={Array []}
                                                                  type="warning"
                                                                >
                                                                  <Component
                                                                    items={Array []}
                                                                    styles={
                                                                      Object {
                                                                        "error": Object {
                                                                          "backgroundColor": "#ffebee",
                                                                          "borderColor": "#f44336",
                                                                        },
                                                                        "root": Object {
                                                                          "borderRadius": 4,
                                                                          "borderWidth": 1,
                                                                          "marginHorizontal": 16,
                                                                        },
                                                                        "success": Object {
                                                                          "backgroundColor": "#e8f5e9",
                                                                          "borderColor": "#4caf50",
                                                                        },
                                                                        "warning": Object {
                                                                          "backgroundColor": "#fff3e0",
                                                                          "borderColor": "#ffa000",
                                                                        },
                                                                      }
                                                                    }
                                                                    type="warning"
                                                                  />
                                                                </ThemedComponent>
                                                              </FormStatusList>
                                                              <FormStatusList
                                                                items={
                                                                  Array [
                                                                    "A network error occurred. This may be because of your network connection, or a server error. Please try again later.",
                                                                  ]
                                                                }
                                                                type="error"
                                                              >
                                                                <ThemedComponent
                                                                  items={
                                                                    Array [
                                                                      "A network error occurred. This may be because of your network connection, or a server error. Please try again later.",
                                                                    ]
                                                                  }
                                                                  type="error"
                                                                >
                                                                  <Component
                                                                    items={
                                                                      Array [
                                                                        "A network error occurred. This may be because of your network connection, or a server error. Please try again later.",
                                                                      ]
                                                                    }
                                                                    styles={
                                                                      Object {
                                                                        "error": Object {
                                                                          "backgroundColor": "#ffebee",
                                                                          "borderColor": "#f44336",
                                                                        },
                                                                        "root": Object {
                                                                          "borderRadius": 4,
                                                                          "borderWidth": 1,
                                                                          "marginHorizontal": 16,
                                                                        },
                                                                        "success": Object {
                                                                          "backgroundColor": "#e8f5e9",
                                                                          "borderColor": "#4caf50",
                                                                        },
                                                                        "warning": Object {
                                                                          "backgroundColor": "#fff3e0",
                                                                          "borderColor": "#ffa000",
                                                                        },
                                                                      }
                                                                    }
                                                                    type="error"
                                                                  >
                                                                    <View
                                                                      style={
                                                                        Object {
                                                                          "backgroundColor": "#ffebee",
                                                                          "borderColor": "#f44336",
                                                                          "borderRadius": 4,
                                                                          "borderWidth": 1,
                                                                          "marginHorizontal": 16,
                                                                        }
                                                                      }
                                                                      testID="FormStatusListitem-actions"
                                                                    >
                                                                      <View
                                                                        style={
                                                                          Object {
                                                                            "backgroundColor": "#ffebee",
                                                                            "borderColor": "#f44336",
                                                                            "borderRadius": 4,
                                                                            "borderWidth": 1,
                                                                            "marginHorizontal": 16,
                                                                          }
                                                                        }
                                                                        testID="FormStatusListitem-actions"
                                                                      >
                                                                        <View
                                                                          style={
                                                                            Object {
                                                                              "backgroundColor": "#ffebee",
                                                                              "borderColor": "#f44336",
                                                                              "borderRadius": 4,
                                                                              "borderWidth": 1,
                                                                              "marginHorizontal": 16,
                                                                            }
                                                                          }
                                                                          testID="FormStatusListitem-actions"
                                                                        >
                                                                          <FormStatusListItem
                                                                            divider={false}
                                                                            key="0"
                                                                            type="error"
                                                                          >
                                                                            <ThemedComponent
                                                                              divider={false}
                                                                              type="error"
                                                                            >
                                                                              <Component
                                                                                divider={false}
                                                                                styles={
                                                                                  Object {
                                                                                    "divider": Object {
                                                                                      "borderBottomWidth": 1,
                                                                                    },
                                                                                    "dividerError": Object {
                                                                                      "borderBottomColor": "#f44336",
                                                                                    },
                                                                                    "dividerSuccess": Object {
                                                                                      "borderBottomColor": "#4caf50",
                                                                                    },
                                                                                    "dividerWarning": Object {
                                                                                      "borderBottomColor": "#ffa000",
                                                                                    },
                                                                                    "icon": Object {
                                                                                      "paddingHorizontal": 8,
                                                                                    },
                                                                                    "iconError": Object {
                                                                                      "color": "#f44336",
                                                                                    },
                                                                                    "iconSuccess": Object {
                                                                                      "color": "#4caf50",
                                                                                    },
                                                                                    "iconWarning": Object {
                                                                                      "color": "#ffa000",
                                                                                    },
                                                                                    "root": Object {
                                                                                      "flexDirection": "row",
                                                                                      "padding": 8,
                                                                                    },
                                                                                    "text": Object {
                                                                                      "flexShrink": 1,
                                                                                      "paddingHorizontal": 8,
                                                                                    },
                                                                                    "textError": Object {
                                                                                      "color": "#f44336",
                                                                                    },
                                                                                    "textSuccess": Object {
                                                                                      "color": "#4caf50",
                                                                                    },
                                                                                    "textWarning": Object {
                                                                                      "color": "#ffa000",
                                                                                    },
                                                                                  }
                                                                                }
                                                                                type="error"
                                                                              >
                                                                                <View
                                                                                  style={
                                                                                    Object {
                                                                                      "borderBottomColor": "#f44336",
                                                                                      "flexDirection": "row",
                                                                                      "padding": 8,
                                                                                    }
                                                                                  }
                                                                                >
                                                                                  <View
                                                                                    style={
                                                                                      Object {
                                                                                        "borderBottomColor": "#f44336",
                                                                                        "flexDirection": "row",
                                                                                        "padding": 8,
                                                                                      }
                                                                                    }
                                                                                  >
                                                                                    <View
                                                                                      style={
                                                                                        Object {
                                                                                          "borderBottomColor": "#f44336",
                                                                                          "flexDirection": "row",
                                                                                          "padding": 8,
                                                                                        }
                                                                                      }
                                                                                    >
                                                                                      <Body2
                                                                                        style={
                                                                                          Object {
                                                                                            "color": "#f44336",
                                                                                            "paddingHorizontal": 8,
                                                                                          }
                                                                                        }
                                                                                      >
                                                                                        <ThemedComponent
                                                                                          style={
                                                                                            Object {
                                                                                              "color": "#f44336",
                                                                                              "paddingHorizontal": 8,
                                                                                            }
                                                                                          }
                                                                                        >
                                                                                          <Component
                                                                                            style={
                                                                                              Object {
                                                                                                "color": "#f44336",
                                                                                                "paddingHorizontal": 8,
                                                                                              }
                                                                                            }
                                                                                            styles={
                                                                                              Object {
                                                                                                "root": Object {
                                                                                                  "color": "rgba(0, 0, 0, 0.87)",
                                                                                                  "fontFamily": undefined,
                                                                                                  "fontSize": 14,
                                                                                                  "fontWeight": "400",
                                                                                                },
                                                                                              }
                                                                                            }
                                                                                          >
                                                                                            <Text
                                                                                              style={
                                                                                                Array [
                                                                                                  Object {
                                                                                                    "color": "rgba(0, 0, 0, 0.87)",
                                                                                                    "fontFamily": undefined,
                                                                                                    "fontSize": 14,
                                                                                                    "fontWeight": "400",
                                                                                                  },
                                                                                                  Object {
                                                                                                    "color": "#f44336",
                                                                                                    "paddingHorizontal": 8,
                                                                                                  },
                                                                                                ]
                                                                                              }
                                                                                            >
                                                                                              <Text
                                                                                                style={
                                                                                                  Array [
                                                                                                    Object {
                                                                                                      "color": "rgba(0, 0, 0, 0.87)",
                                                                                                      "fontFamily": undefined,
                                                                                                      "fontSize": 14,
                                                                                                      "fontWeight": "400",
                                                                                                    },
                                                                                                    Object {
                                                                                                      "color": "#f44336",
                                                                                                      "paddingHorizontal": 8,
                                                                                                    },
                                                                                                  ]
                                                                                                }
                                                                                              >
                                                                                                <Icon
                                                                                                  name="alert-circle"
                                                                                                  size={16}
                                                                                                >
                                                                                                  <ThemedComponent
                                                                                                    name="alert-circle"
                                                                                                    size={16}
                                                                                                  >
                                                                                                    <Component
                                                                                                      name="alert-circle"
                                                                                                      size={16}
                                                                                                    />
                                                                                                  </ThemedComponent>
                                                                                                </Icon>
                                                                                              </Text>
                                                                                            </Text>
                                                                                          </Component>
                                                                                        </ThemedComponent>
                                                                                      </Body2>
                                                                                      <FormattedMessage
                                                                                        component={[Function]}
                                                                                        style={
                                                                                          Object {
                                                                                            "color": "#f44336",
                                                                                            "flexShrink": 1,
                                                                                            "paddingHorizontal": 8,
                                                                                          }
                                                                                        }
                                                                                      >
                                                                                        <ThemedComponent
                                                                                          component={[Function]}
                                                                                          style={
                                                                                            Object {
                                                                                              "color": "#f44336",
                                                                                              "flexShrink": 1,
                                                                                              "paddingHorizontal": 8,
                                                                                            }
                                                                                          }
                                                                                        >
                                                                                          <FormattedMessage
                                                                                            component={[Function]}
                                                                                            style={
                                                                                              Object {
                                                                                                "color": "#f44336",
                                                                                                "flexShrink": 1,
                                                                                                "paddingHorizontal": 8,
                                                                                              }
                                                                                            }
                                                                                          >
                                                                                            <Body2
                                                                                              style={
                                                                                                Object {
                                                                                                  "color": "#f44336",
                                                                                                  "flexShrink": 1,
                                                                                                  "paddingHorizontal": 8,
                                                                                                }
                                                                                              }
                                                                                            >
                                                                                              <ThemedComponent
                                                                                                style={
                                                                                                  Object {
                                                                                                    "color": "#f44336",
                                                                                                    "flexShrink": 1,
                                                                                                    "paddingHorizontal": 8,
                                                                                                  }
                                                                                                }
                                                                                              >
                                                                                                <Component
                                                                                                  style={
                                                                                                    Object {
                                                                                                      "color": "#f44336",
                                                                                                      "flexShrink": 1,
                                                                                                      "paddingHorizontal": 8,
                                                                                                    }
                                                                                                  }
                                                                                                  styles={
                                                                                                    Object {
                                                                                                      "root": Object {
                                                                                                        "color": "rgba(0, 0, 0, 0.87)",
                                                                                                        "fontFamily": undefined,
                                                                                                        "fontSize": 14,
                                                                                                        "fontWeight": "400",
                                                                                                      },
                                                                                                    }
                                                                                                  }
                                                                                                >
                                                                                                  <Text
                                                                                                    style={
                                                                                                      Array [
                                                                                                        Object {
                                                                                                          "color": "rgba(0, 0, 0, 0.87)",
                                                                                                          "fontFamily": undefined,
                                                                                                          "fontSize": 14,
                                                                                                          "fontWeight": "400",
                                                                                                        },
                                                                                                        Object {
                                                                                                          "color": "#f44336",
                                                                                                          "flexShrink": 1,
                                                                                                          "paddingHorizontal": 8,
                                                                                                        },
                                                                                                      ]
                                                                                                    }
                                                                                                  >
                                                                                                    <Text
                                                                                                      style={
                                                                                                        Array [
                                                                                                          Object {
                                                                                                            "color": "rgba(0, 0, 0, 0.87)",
                                                                                                            "fontFamily": undefined,
                                                                                                            "fontSize": 14,
                                                                                                            "fontWeight": "400",
                                                                                                          },
                                                                                                          Object {
                                                                                                            "color": "#f44336",
                                                                                                            "flexShrink": 1,
                                                                                                            "paddingHorizontal": 8,
                                                                                                          },
                                                                                                        ]
                                                                                                      }
                                                                                                    >
                                                                                                      A network error occurred. This may be because of your network connection, or a server error. Please try again later.
                                                                                                    </Text>
                                                                                                  </Text>
                                                                                                </Component>
                                                                                              </ThemedComponent>
                                                                                            </Body2>
                                                                                          </FormattedMessage>
                                                                                        </ThemedComponent>
                                                                                      </FormattedMessage>
                                                                                    </View>
                                                                                  </View>
                                                                                </View>
                                                                              </Component>
                                                                            </ThemedComponent>
                                                                          </FormStatusListItem>
                                                                        </View>
                                                                      </View>
                                                                    </View>
                                                                  </Component>
                                                                </ThemedComponent>
                                                              </FormStatusList>
                                                            </Component>
                                                          </FormikConnect(Function)>
                                                        </ThemedComponent>
                                                      </FormStatus>
                                                      <FormSubmitButton_Button_Noop
                                                        fullWidth={true}
                                                        key="submit"
                                                        name="submit"
                                                        title="Sign up"
                                                        type="submit"
                                                      >
                                                        <ThemedComponent
                                                          fullWidth={true}
                                                          name="submit"
                                                          title="Sign up"
                                                          type="submit"
                                                        >
                                                          <FormikConnect(Function)
                                                            color="primary"
                                                            fullWidth={true}
                                                            name="submit"
                                                            styles={
                                                              Object {
                                                                "button": Object {},
                                                                "root": Object {
                                                                  "padding": 16,
                                                                },
                                                              }
                                                            }
                                                            title="Sign up"
                                                            type="submit"
                                                            variant="contained"
                                                          >
                                                            <Component
                                                              color="primary"
                                                              formik={
                                                                Object {
                                                                  "dirty": false,
                                                                  "errors": Object {
                                                                    "form": Array [
                                                                      "A network error occurred. This may be because of your network connection, or a server error. Please try again later.",
                                                                    ],
                                                                  },
                                                                  "handleBlur": [Function],
                                                                  "handleChange": [Function],
                                                                  "handleReset": [Function],
                                                                  "handleSubmit": [Function],
                                                                  "initialValues": Object {
                                                                    "email": "asd@as.cd",
                                                                    "firstName": "im only",
                                                                    "lastName": "testing",
                                                                    "password": "abc",
                                                                  },
                                                                  "isSubmitting": false,
                                                                  "isValid": false,
                                                                  "isValidating": false,
                                                                  "registerField": [Function],
                                                                  "resetForm": [Function],
                                                                  "setError": [Function],
                                                                  "setErrors": [Function],
                                                                  "setFieldError": [Function],
                                                                  "setFieldTouched": [Function],
                                                                  "setFieldValue": [Function],
                                                                  "setFormikState": [Function],
                                                                  "setStatus": [Function],
                                                                  "setSubmitting": [Function],
                                                                  "setTouched": [Function],
                                                                  "setValues": [Function],
                                                                  "status": undefined,
                                                                  "submitCount": 1,
                                                                  "submitForm": [Function],
                                                                  "touched": Object {
                                                                    "email": true,
                                                                    "firstName": true,
                                                                    "lastName": true,
                                                                    "password": true,
                                                                  },
                                                                  "unregisterField": [Function],
                                                                  "validate": undefined,
                                                                  "validateField": [Function],
                                                                  "validateForm": [Function],
                                                                  "validateOnBlur": false,
                                                                  "validateOnChange": false,
                                                                  "validationSchema": undefined,
                                                                  "values": Object {
                                                                    "email": "asd@as.cd",
                                                                    "firstName": "im only",
                                                                    "lastName": "testing",
                                                                    "password": "abc",
                                                                  },
                                                                }
                                                              }
                                                              fullWidth={true}
                                                              name="submit"
                                                              styles={
                                                                Object {
                                                                  "button": Object {},
                                                                  "root": Object {
                                                                    "padding": 16,
                                                                  },
                                                                }
                                                              }
                                                              title="Sign up"
                                                              type="submit"
                                                              variant="contained"
                                                            >
                                                              <View
                                                                style={
                                                                  Object {
                                                                    "padding": 16,
                                                                  }
                                                                }
                                                              >
                                                                <View
                                                                  style={
                                                                    Object {
                                                                      "padding": 16,
                                                                    }
                                                                  }
                                                                >
                                                                  <View
                                                                    style={
                                                                      Object {
                                                                        "padding": 16,
                                                                      }
                                                                    }
                                                                  >
                                                                    <Button
                                                                      color="primary"
                                                                      disabled={false}
                                                                      formik={
                                                                        Object {
                                                                          "dirty": false,
                                                                          "errors": Object {
                                                                            "form": Array [
                                                                              "A network error occurred. This may be because of your network connection, or a server error. Please try again later.",
                                                                            ],
                                                                          },
                                                                          "handleBlur": [Function],
                                                                          "handleChange": [Function],
                                                                          "handleReset": [Function],
                                                                          "handleSubmit": [Function],
                                                                          "initialValues": Object {
                                                                            "email": "asd@as.cd",
                                                                            "firstName": "im only",
                                                                            "lastName": "testing",
                                                                            "password": "abc",
                                                                          },
                                                                          "isSubmitting": false,
                                                                          "isValid": false,
                                                                          "isValidating": false,
                                                                          "registerField": [Function],
                                                                          "resetForm": [Function],
                                                                          "setError": [Function],
                                                                          "setErrors": [Function],
                                                                          "setFieldError": [Function],
                                                                          "setFieldTouched": [Function],
                                                                          "setFieldValue": [Function],
                                                                          "setFormikState": [Function],
                                                                          "setStatus": [Function],
                                                                          "setSubmitting": [Function],
                                                                          "setTouched": [Function],
                                                                          "setValues": [Function],
                                                                          "status": undefined,
                                                                          "submitCount": 1,
                                                                          "submitForm": [Function],
                                                                          "touched": Object {
                                                                            "email": true,
                                                                            "firstName": true,
                                                                            "lastName": true,
                                                                            "password": true,
                                                                          },
                                                                          "unregisterField": [Function],
                                                                          "validate": undefined,
                                                                          "validateField": [Function],
                                                                          "validateForm": [Function],
                                                                          "validateOnBlur": false,
                                                                          "validateOnChange": false,
                                                                          "validationSchema": undefined,
                                                                          "values": Object {
                                                                            "email": "asd@as.cd",
                                                                            "firstName": "im only",
                                                                            "lastName": "testing",
                                                                            "password": "abc",
                                                                          },
                                                                        }
                                                                      }
                                                                      fullWidth={true}
                                                                      loading={false}
                                                                      name="submit"
                                                                      onPress={[Function]}
                                                                      style={Object {}}
                                                                      title="Sign up"
                                                                      type="submit"
                                                                      variant="contained"
                                                                    >
                                                                      <ThemedComponent
                                                                        color="primary"
                                                                        disabled={false}
                                                                        formik={
                                                                          Object {
                                                                            "dirty": false,
                                                                            "errors": Object {
                                                                              "form": Array [
                                                                                "A network error occurred. This may be because of your network connection, or a server error. Please try again later.",
                                                                              ],
                                                                            },
                                                                            "handleBlur": [Function],
                                                                            "handleChange": [Function],
                                                                            "handleReset": [Function],
                                                                            "handleSubmit": [Function],
                                                                            "initialValues": Object {
                                                                              "email": "asd@as.cd",
                                                                              "firstName": "im only",
                                                                              "lastName": "testing",
                                                                              "password": "abc",
                                                                            },
                                                                            "isSubmitting": false,
                                                                            "isValid": false,
                                                                            "isValidating": false,
                                                                            "registerField": [Function],
                                                                            "resetForm": [Function],
                                                                            "setError": [Function],
                                                                            "setErrors": [Function],
                                                                            "setFieldError": [Function],
                                                                            "setFieldTouched": [Function],
                                                                            "setFieldValue": [Function],
                                                                            "setFormikState": [Function],
                                                                            "setStatus": [Function],
                                                                            "setSubmitting": [Function],
                                                                            "setTouched": [Function],
                                                                            "setValues": [Function],
                                                                            "status": undefined,
                                                                            "submitCount": 1,
                                                                            "submitForm": [Function],
                                                                            "touched": Object {
                                                                              "email": true,
                                                                              "firstName": true,
                                                                              "lastName": true,
                                                                              "password": true,
                                                                            },
                                                                            "unregisterField": [Function],
                                                                            "validate": undefined,
                                                                            "validateField": [Function],
                                                                            "validateForm": [Function],
                                                                            "validateOnBlur": false,
                                                                            "validateOnChange": false,
                                                                            "validationSchema": undefined,
                                                                            "values": Object {
                                                                              "email": "asd@as.cd",
                                                                              "firstName": "im only",
                                                                              "lastName": "testing",
                                                                              "password": "abc",
                                                                            },
                                                                          }
                                                                        }
                                                                        fullWidth={true}
                                                                        loading={false}
                                                                        name="submit"
                                                                        onPress={[Function]}
                                                                        style={Object {}}
                                                                        title="Sign up"
                                                                        type="submit"
                                                                        variant="contained"
                                                                      >
                                                                        <Button
                                                                          color="primary"
                                                                          disabled={false}
                                                                          formik={
                                                                            Object {
                                                                              "dirty": false,
                                                                              "errors": Object {
                                                                                "form": Array [
                                                                                  "A network error occurred. This may be because of your network connection, or a server error. Please try again later.",
                                                                                ],
                                                                              },
                                                                              "handleBlur": [Function],
                                                                              "handleChange": [Function],
                                                                              "handleReset": [Function],
                                                                              "handleSubmit": [Function],
                                                                              "initialValues": Object {
                                                                                "email": "asd@as.cd",
                                                                                "firstName": "im only",
                                                                                "lastName": "testing",
                                                                                "password": "abc",
                                                                              },
                                                                              "isSubmitting": false,
                                                                              "isValid": false,
                                                                              "isValidating": false,
                                                                              "registerField": [Function],
                                                                              "resetForm": [Function],
                                                                              "setError": [Function],
                                                                              "setErrors": [Function],
                                                                              "setFieldError": [Function],
                                                                              "setFieldTouched": [Function],
                                                                              "setFieldValue": [Function],
                                                                              "setFormikState": [Function],
                                                                              "setStatus": [Function],
                                                                              "setSubmitting": [Function],
                                                                              "setTouched": [Function],
                                                                              "setValues": [Function],
                                                                              "status": undefined,
                                                                              "submitCount": 1,
                                                                              "submitForm": [Function],
                                                                              "touched": Object {
                                                                                "email": true,
                                                                                "firstName": true,
                                                                                "lastName": true,
                                                                                "password": true,
                                                                              },
                                                                              "unregisterField": [Function],
                                                                              "validate": undefined,
                                                                              "validateField": [Function],
                                                                              "validateForm": [Function],
                                                                              "validateOnBlur": false,
                                                                              "validateOnChange": false,
                                                                              "validationSchema": undefined,
                                                                              "values": Object {
                                                                                "email": "asd@as.cd",
                                                                                "firstName": "im only",
                                                                                "lastName": "testing",
                                                                                "password": "abc",
                                                                              },
                                                                            }
                                                                          }
                                                                          fullWidth={true}
                                                                          loading={false}
                                                                          name="submit"
                                                                          onPress={[Function]}
                                                                          style={Object {}}
                                                                          styles={
                                                                            Object {
                                                                              "default": Object {
                                                                                "backgroundColor": "#f5f5f5",
                                                                              },
                                                                              "defaultText": Object {},
                                                                              "fullWidth": Object {
                                                                                "alignSelf": "stretch",
                                                                              },
                                                                              "link": Object {},
                                                                              "linkText": Object {},
                                                                              "primary": Object {
                                                                                "backgroundColor": "#3f51b5",
                                                                              },
                                                                              "primaryText": Object {
                                                                                "color": "#fff",
                                                                              },
                                                                              "root": Object {
                                                                                "alignSelf": "flex-start",
                                                                                "borderRadius": 4,
                                                                                "paddingBottom": 8,
                                                                                "paddingLeft": 16,
                                                                                "paddingRight": 16,
                                                                                "paddingTop": 8,
                                                                              },
                                                                              "secondary": Object {
                                                                                "backgroundColor": "#f50057",
                                                                              },
                                                                              "secondaryText": Object {
                                                                                "color": "#fff",
                                                                              },
                                                                              "text": Object {
                                                                                "color": "rgba(0, 0, 0, 0.87)",
                                                                                "fontFamily": undefined,
                                                                                "fontSize": 14,
                                                                                "fontWeight": "500",
                                                                                "textAlign": "center",
                                                                                "textTransform": "uppercase",
                                                                              },
                                                                            }
                                                                          }
                                                                          title="Sign up"
                                                                          type="submit"
                                                                          variant="contained"
                                                                        >
                                                                          <TouchableOpacity
                                                                            accessibilityRole="button"
                                                                            activeOpacity={0.2}
                                                                            disabled={false}
                                                                            onPress={[Function]}
                                                                          >
                                                                            <AnimatedComponent
                                                                              accessibilityRole="button"
                                                                              accessible={true}
                                                                              isTVSelectable={true}
                                                                              onResponderGrant={[Function]}
                                                                              onResponderMove={[Function]}
                                                                              onResponderRelease={[Function]}
                                                                              onResponderTerminate={[Function]}
                                                                              onResponderTerminationRequest={[Function]}
                                                                              onStartShouldSetResponder={[Function]}
                                                                              style={
                                                                                Array [
                                                                                  undefined,
                                                                                  Object {
                                                                                    "opacity": 1,
                                                                                  },
                                                                                ]
                                                                              }
                                                                            >
                                                                              <View
                                                                                accessibilityRole="button"
                                                                                accessible={true}
                                                                                isTVSelectable={true}
                                                                                onResponderGrant={[Function]}
                                                                                onResponderMove={[Function]}
                                                                                onResponderRelease={[Function]}
                                                                                onResponderTerminate={[Function]}
                                                                                onResponderTerminationRequest={[Function]}
                                                                                onStartShouldSetResponder={[Function]}
                                                                                style={
                                                                                  Object {
                                                                                    "opacity": 1,
                                                                                  }
                                                                                }
                                                                              >
                                                                                <View
                                                                                  accessibilityRole="button"
                                                                                  accessible={true}
                                                                                  isTVSelectable={true}
                                                                                  onResponderGrant={[Function]}
                                                                                  onResponderMove={[Function]}
                                                                                  onResponderRelease={[Function]}
                                                                                  onResponderTerminate={[Function]}
                                                                                  onResponderTerminationRequest={[Function]}
                                                                                  onStartShouldSetResponder={[Function]}
                                                                                  style={
                                                                                    Object {
                                                                                      "opacity": 1,
                                                                                    }
                                                                                  }
                                                                                >
                                                                                  <View
                                                                                    style={
                                                                                      Array [
                                                                                        Object {
                                                                                          "alignSelf": "flex-start",
                                                                                          "borderRadius": 4,
                                                                                          "paddingBottom": 8,
                                                                                          "paddingLeft": 16,
                                                                                          "paddingRight": 16,
                                                                                          "paddingTop": 8,
                                                                                        },
                                                                                        Object {
                                                                                          "backgroundColor": "#3f51b5",
                                                                                        },
                                                                                        Object {
                                                                                          "alignSelf": "stretch",
                                                                                        },
                                                                                      ]
                                                                                    }
                                                                                  >
                                                                                    <View
                                                                                      style={
                                                                                        Array [
                                                                                          Object {
                                                                                            "alignSelf": "flex-start",
                                                                                            "borderRadius": 4,
                                                                                            "paddingBottom": 8,
                                                                                            "paddingLeft": 16,
                                                                                            "paddingRight": 16,
                                                                                            "paddingTop": 8,
                                                                                          },
                                                                                          Object {
                                                                                            "backgroundColor": "#3f51b5",
                                                                                          },
                                                                                          Object {
                                                                                            "alignSelf": "stretch",
                                                                                          },
                                                                                        ]
                                                                                      }
                                                                                    />
                                                                                  </View>
                                                                                </View>
                                                                              </View>
                                                                            </AnimatedComponent>
                                                                          </TouchableOpacity>
                                                                        </Button>
                                                                      </ThemedComponent>
                                                                    </Button>
                                                                  </View>
                                                                </View>
                                                              </View>
                                                            </Component>
                                                          </FormikConnect(Function)>
                                                        </ThemedComponent>
                                                      </FormSubmitButton_Button_Noop>
                                                    </FormFields>
                                                  </Component>
                                                </Noop>
                                              </Formik>
                                            </JsonFormInternal>
                                          </View>
                                        </View>
                                      </View>
                                    </Component>
                                  </ThemedComponent>
                                </JsonForm>
                              </Mutation>
                            </ThemedComponent>
                          </GraphqlMutation>
                        </JsonGraphqlForm>
                      </ThemedComponent>
                    </JsonGraphqlForm>
                  </Component>
                </Component>
              </ThemedComponent>
            </ApolloProvider>
          </Component>
        </BlueBaseContent>
      </IntlProvider>
    </ThemeProvider>
  </BlueBaseRoot>
</BlueBaseApp>
`;
